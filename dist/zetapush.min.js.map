{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///zetapush.min.js","webpack:///webpack/bootstrap 8e1340a2436acd855a18","webpack:///./~/whatwg-fetch/fetch.js","webpack:///./lib/index.js","webpack:///./lib/authentication/handshake.js","webpack:///./lib/services/index.js","webpack:///./lib/connection/connection-status.js","webpack:///./lib/client.js","webpack:///./lib/utils/index.js","webpack:///./lib/client-helper.js","webpack:///./~/zetapush-cometd/index.js","webpack:///./~/zetapush-cometd/lib/CallbackPollingTransport.js","webpack:///./~/zetapush-cometd/lib/Transport.js","webpack:///./~/zetapush-cometd/lib/Utils.js","webpack:///./~/zetapush-cometd/lib/RequestTransport.js","webpack:///./~/zetapush-cometd/lib/CometD.js","webpack:///./~/zetapush-cometd/lib/TransportRegistry.js","webpack:///./~/zetapush-cometd/lib/LongPollingTransport.js","webpack:///./~/zetapush-cometd/lib/WebSocketTransport.js","webpack:///./lib/connection/cometd.js","webpack:///./lib/weak-client.js","webpack:///./lib/utils/token-persistence.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","self","normalizeName","name","String","test","TypeError","toLowerCase","normalizeValue","value","iteratorFor","items","iterator","next","shift","done","undefined","support","iterable","Symbol","Headers","headers","map","forEach","append","Object","getOwnPropertyNames","consumed","body","bodyUsed","Promise","reject","fileReaderReady","reader","resolve","onload","result","onerror","error","readBlobAsArrayBuffer","blob","FileReader","readAsArrayBuffer","readBlobAsText","readAsText","Body","_initBody","_bodyInit","_bodyText","Blob","prototype","isPrototypeOf","_bodyBlob","formData","FormData","_bodyFormData","searchParams","URLSearchParams","toString","arrayBuffer","ArrayBuffer","Error","get","set","type","rejected","then","text","decode","json","JSON","parse","normalizeMethod","method","upcased","toUpperCase","methods","indexOf","Request","input","options","url","credentials","mode","referrer","form","trim","split","bytes","replace","join","decodeURIComponent","xhr","head","pairs","getAllResponseHeaders","header","key","Response","bodyInit","status","ok","statusText","fetch","e","list","push","values","getAll","has","hasOwnProperty","callback","thisArg","keys","entries","clone","response","redirectStatuses","redirect","RangeError","location","init","responseURL","getResponseHeader","request","XMLHttpRequest","responseText","ontimeout","open","withCredentials","responseType","setRequestHeader","send","polyfill","_interopRequireWildcard","obj","__esModule","newObj","defineProperty","VERSION","services","WeakClient","Client","ConnectionStatusListener","Authentication","_handshake","enumerable","_connectionStatus","_client","_weakClient","_index","_possibleConstructorReturn","ReferenceError","_inherits","subClass","superClass","create","constructor","writable","configurable","setPrototypeOf","__proto__","_classCallCheck","instance","Constructor","CredentialsHandshake","TokenHandshake","AbstractHandshake","_createClass","defineProperties","target","props","i","length","descriptor","protoProps","staticProps","_services","DeployableNames","AUTH_SIMPLE","AUTH_WEAK","AUTH_DELEGATING","_ref","authType","sandboxId","deploymentId","client","authentication","data","authData","getSandboxId","version","authVersion","getResource","resource","ext","_AbstractHandshake","_ref2","token","_this","getPrototypeOf","_AbstractHandshake2","_ref3","login","password","_this2","_ref4","_ref4$deploymentId","Simple","DEFAULT_DEPLOYMENT_ID","_ref5","_ref5$deploymentId","Weak","_ref6","_ref6$deploymentId","Delegating","_ref7","_objectDestructuringEmpty","Service","$publish","Remoting","Aggreg","_Service","apply","arguments","owner","Stack","_Service2","stack","page","guids","_ref8","listeners","_ref9","guid","Echo","_Service3","_ref10","GameEngine","_Service4","_ref11","callerId","msgId","payload","_ref12","_ref13","gameInfo","maxGames","_ref14","gameId","_ref15","_ref16","Game","_Service5","_ref17","_ref18","role","userId","userName","_ref19","_ref20","_ref21","_ref22","Gda","_Service6","_ref23","table","_ref24","column","key2","_ref25","_ref26","columns","_ref27","_ref28","rows","_ref29","start","stop","_ref30","_ref31","_ref32","_ref33","_ref34","_Service7","_ref35","cmd","from","fromResource","_ref36","answeringResource","askingResource","_capabilities","capabilities","_ref37","_ref38","_ref39","_ref40","action","_ref41","available","uid","user","_ref42","Search","GroupManagement","_Service8","_ref43","group","_ref44","_ref45","users","_ref46","_ref47","groupName","_ref48","_ref49","_ref50","_ref51","_ref52","_ref53","_ref54","_ref55","_ref56","_ref57","hardFail","_ref58","actions","_ref59","_ref60","_ref61","Httpclient","_Service9","_ref62","requestId","_ref63","Macro","_Service10","_ref64","debug","parameters","_ref65","_ref66","Sendmail","_Service11","_ref67","Messaging","_Service12","_ref68","channel","Queue","_Service13","_ref69","description","originBusinessId","originDeploymentId","_ref70","success","taskId","_ref71","capacity","_ref72","_ref73","Sms_ovh","_Service14","_ref74","Cron","_Service15","_ref75","_ref76","_ref77","cronName","_Service16","_ref78","index","_ref79","_ref80","_ref81","indices","query","sort","Template","_Service17","_ref82","languageTag","Zpfs_s3","_Service18","_ref83","oldPath","path","_ref84","_ref85","_ref86","_ref87","folder","_ref88","parents","_ref89","_ref90","metadata","tags","_ref91","contentType","_ref92","_ref93","_ref94","metadataFiles","Zpfs_hdfs","_Service19","_ref95","_ref96","_ref97","_ref98","_ref99","_ref100","_ref101","_ref102","_ref103","_ref104","_ref105","_ref106","Zpfs_s3compat","_Service20","_ref107","_ref108","_ref109","_ref110","_ref111","_ref112","_ref113","_ref114","_ref115","_ref116","_ref117","_ref118","Userdir","_Service21","_ref119","_ref120","userKeys","_Service22","_ref121","_Service23","_ref122","_ref123","_ref124","_ref125","_ref126","_ref127","_Service24","_ref128","fullRights","publicToken","_ref129","_defineProperty","_clientHelper","_ref$apiUrl","apiUrl","API_URL","_ref$forceHttps","forceHttps","isHttpsProtocol","_ref$resource","helper","ClientHelper","isConnected","connect","disconnect","getUserId","service","$subscriptions","unsubscribe","listener","_ref2$deploymentId","createService","setResource","addConnectionStatusListener","handler","removeConnectionStatusListener","level","setLogLevel","UNSECURE_PATTERN","getSecureUrl","shuffle","Math","floor","random","getServers","secureApiUrl","servers","server","protocol","derived","parent","is","_zetapushCometd","_cometd","Message","RECONNECT_HANDSHAKE_VALUE","RECONNECT_NONE_VALUE","RECONNECT_RETRY_VALUE","Transport","LONG_POLLING","WEBSOCKET","connectionListeners","connected","wasConnected","serverUrl","subscribeQueue","cometd","CometD","registerTransport","WebSocketTransport","FetchLongPollingTransport","onTransportException","transport","updateServerUrl","addListener","successful","advice","_debug","_ext$authentication","initialized","handshakeFailure","reconnect","authenticationFailed","negotiate","isDisconnected","connectionWillClose","batch","prefix","subscriptions","subscribe","connectionEstablished","connectionBroken","connectionClosed","configure","backoffIncrement","maxBackoff","appendMessageTypeToURL","handshake","getHandshakeFields","filter","enabled","onConnectionEstablished","onConnectionBroken","onMessageLost","onConnectionWillClose","onConnectionClosed","onSuccessfulHandshake","onFailedHandshake","_this3","splice","setTimeout","_getQueuedSubscriptio","getQueuedSubscription","queued","subscription","_getQueuedSubscriptio2","findIndex","element","_this4","publish","_this5","isMacroType","getMacroPublisher","getServicePublisher","assign","CallbackPollingTransport","LongPollingTransport","RequestTransport","TransportRegistry","Utils","_failTransportFn","envelope","x","transportFailure","_super","_self","derive","accept","crossDomain","jsonpSend","packet","transportSend","messages","lengths","stringify","slice","urlLength","encodeURI","maxLength","getConfiguration","maxURILength","getType","envelopeToSend","begin","end","_mixin","onSuccess","onFailure","nextEnvelope","metaConnect","sameStack","sync","requestHeaders","responses","received","convertToMessages","httpCode","transportSuccess","exception","onError","reason","failure","xx","_type","_url","registered","unregistered","getAdvice","funktion","delay","clearTimeout","handle","isString","isArray","getURL","setURL","reset","abort","baseObject","F","Array","inArray","array","timeoutHandle","_coalesceEnvelopes","_envelopes","envelopeAndRequest","newEnvelope","newRequest","concat","_transportSend","expired","maxDelay","maxNetworkDelay","timeout","errorMessage","xhrStatus","abortXHR","complete","_queueSend","_requestIds","_requests","maxConnections","_metaConnectComplete","_metaConnectRequest","_complete","nextRequest","autoBatch","_metaConnectSend","state","readyState","UNSENT","_fieldValue","object","_isString","_isFunction","_zeroPad","pow","_log","args","console","logger","now","Date","getHours","getMinutes","getSeconds","getMilliseconds","_splitURL","exec","_configure","configuration","_config","urlParts","hostAndPort","uri","afterURI","_crossDomain","_isCrossDomain","_info","uriSegments","lastSegmentIndex","match","_removeListener","_listeners","_removeSubscription","_clearSubscriptions","_setStatus","newStatus","_status","_isDisconnected","_nextMessageId","_messageId","_applyExtension","scope","message","outgoing","onExtensionException","_applyIncomingExtensions","_extensions","reverseIncomingExtensions","extension","incoming","_applyOutgoingExtensions","_notify","onListenerException","_notifyListeners","channelParts","last","channelPart","_cancelDelayedSend","_scheduledSend","_delayedSend","operation","time","_advice","interval","_backoff","_send","extraPath","messageId","_clientId","clientId","_callbacks","rcvdMessages","_handleMessages","conduit","getTransport","connectionType","_handleFailure","_transport","_batch","_internalBatch","_messageQueue","_resetBackoff","_increaseBackoff","_startBatch","_flushBatch","_endBatch","_connect","bayeuxMessage","_connected","_delayedConnect","_updateAdvice","newAdvice","_disconnect","_notifyTransportFailure","oldTransport","newTransport","handshakeProps","handshakeCallback","_transports","_handshakeProps","_handshakeCallback","transportTypes","findTransportTypes","minimumVersion","supportedConnectionTypes","_putCallback","negotiateTransport","getTransportTypes","_warn","_delayedHandshake","_notifyCallback","onCallbackException","_handleCallback","_getCallback","_handleRemoteCall","context","_remoteCalls","_failHandshake","retry","_handshakeResponse","reestablish","_reestablish","_handshakeFailure","_failConnect","_connectResponse","_connectFailure","_failDisconnect","_disconnectResponse","_disconnectFailure","_failSubscribe","_subscribeResponse","_subscribeFailure","_failUnsubscribe","_unsubscribeResponse","_unsubscribeFailure","_failMessage","_messageResponse","_handshakeMessages","_messageFailure","_receive","_unconnectTime","_hasSubscriptions","_resolveScopedCallback","delegate","_addListener","isListener","_name","stickyReconnect","connectTimeout","logLevel","urls","maxInterval","deep","objects","propName","prop","targ","source","window","host","receive","failureMessage","add","unregisterTransport","remove","unregisterTransports","clear","findTransport","find","getTransportRegistry","disconnectProps","disconnectCallback","startBatch","endBatch","removeListener","clearListeners","subscribeProps","subscribeCallback","unsubscribeProps","unsubscribeCallback","resubscribe","clearSubscriptions","content","publishProps","publishCallback","remoteCall","getStatus","setBackoffIncrement","period","getBackoffIncrement","getBackoffPeriod","increaseBackoffPeriod","resetBackoffPeriod","registerExtension","existing","existingExtension","unregisterExtension","getExtension","getName","getClientId","_types","types","j","_supportsCrossDomain","xhrSend","_forceClose","event","webSocketClose","code","onClose","_sameContext","_connecting","_context","_storeEnvelope","messageIds","envelopes","_websocketConnect","webSocket","WebSocket","_webSocketSupported","_stickyReconnect","connectTimer","onopen","_webSocketConnected","onOpen","onclose","onmessage","wsMessage","onMessage","_webSocketSend","timeouts","_successCallback","_notifySuccess","fn","_notifyFailure","close","removed","ids","websocketCode","websocketEnabled","that","Content-Type","_tokenPersistence","_Client","getToken","weak","strategy","LocalStorageTokenPersistenceStrategy","ZETAPUSH_TOKEN_KEY","AbstractTokenPersistenceStrategy","_ref$key","_AbstractTokenPersist","localStorage","getItem","setItem"],"mappings":"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","file":"zetapush.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ZetaPush\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ZetaPush\"] = factory();\n\telse\n\t\troot[\"ZetaPush\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ZetaPush\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ZetaPush\"] = factory();\n\telse\n\t\troot[\"ZetaPush\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(1);\n\tmodule.exports = __webpack_require__(2);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t(function(self) {\n\t  'use strict';\n\t\n\t  if (self.fetch) {\n\t    return\n\t  }\n\t\n\t  var support = {\n\t    searchParams: 'URLSearchParams' in self,\n\t    iterable: 'Symbol' in self && 'iterator' in Symbol,\n\t    blob: 'FileReader' in self && 'Blob' in self && (function() {\n\t      try {\n\t        new Blob()\n\t        return true\n\t      } catch(e) {\n\t        return false\n\t      }\n\t    })(),\n\t    formData: 'FormData' in self,\n\t    arrayBuffer: 'ArrayBuffer' in self\n\t  }\n\t\n\t  function normalizeName(name) {\n\t    if (typeof name !== 'string') {\n\t      name = String(name)\n\t    }\n\t    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n\t      throw new TypeError('Invalid character in header field name')\n\t    }\n\t    return name.toLowerCase()\n\t  }\n\t\n\t  function normalizeValue(value) {\n\t    if (typeof value !== 'string') {\n\t      value = String(value)\n\t    }\n\t    return value\n\t  }\n\t\n\t  // Build a destructive iterator for the value list\n\t  function iteratorFor(items) {\n\t    var iterator = {\n\t      next: function() {\n\t        var value = items.shift()\n\t        return {done: value === undefined, value: value}\n\t      }\n\t    }\n\t\n\t    if (support.iterable) {\n\t      iterator[Symbol.iterator] = function() {\n\t        return iterator\n\t      }\n\t    }\n\t\n\t    return iterator\n\t  }\n\t\n\t  function Headers(headers) {\n\t    this.map = {}\n\t\n\t    if (headers instanceof Headers) {\n\t      headers.forEach(function(value, name) {\n\t        this.append(name, value)\n\t      }, this)\n\t\n\t    } else if (headers) {\n\t      Object.getOwnPropertyNames(headers).forEach(function(name) {\n\t        this.append(name, headers[name])\n\t      }, this)\n\t    }\n\t  }\n\t\n\t  Headers.prototype.append = function(name, value) {\n\t    name = normalizeName(name)\n\t    value = normalizeValue(value)\n\t    var list = this.map[name]\n\t    if (!list) {\n\t      list = []\n\t      this.map[name] = list\n\t    }\n\t    list.push(value)\n\t  }\n\t\n\t  Headers.prototype['delete'] = function(name) {\n\t    delete this.map[normalizeName(name)]\n\t  }\n\t\n\t  Headers.prototype.get = function(name) {\n\t    var values = this.map[normalizeName(name)]\n\t    return values ? values[0] : null\n\t  }\n\t\n\t  Headers.prototype.getAll = function(name) {\n\t    return this.map[normalizeName(name)] || []\n\t  }\n\t\n\t  Headers.prototype.has = function(name) {\n\t    return this.map.hasOwnProperty(normalizeName(name))\n\t  }\n\t\n\t  Headers.prototype.set = function(name, value) {\n\t    this.map[normalizeName(name)] = [normalizeValue(value)]\n\t  }\n\t\n\t  Headers.prototype.forEach = function(callback, thisArg) {\n\t    Object.getOwnPropertyNames(this.map).forEach(function(name) {\n\t      this.map[name].forEach(function(value) {\n\t        callback.call(thisArg, value, name, this)\n\t      }, this)\n\t    }, this)\n\t  }\n\t\n\t  Headers.prototype.keys = function() {\n\t    var items = []\n\t    this.forEach(function(value, name) { items.push(name) })\n\t    return iteratorFor(items)\n\t  }\n\t\n\t  Headers.prototype.values = function() {\n\t    var items = []\n\t    this.forEach(function(value) { items.push(value) })\n\t    return iteratorFor(items)\n\t  }\n\t\n\t  Headers.prototype.entries = function() {\n\t    var items = []\n\t    this.forEach(function(value, name) { items.push([name, value]) })\n\t    return iteratorFor(items)\n\t  }\n\t\n\t  if (support.iterable) {\n\t    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n\t  }\n\t\n\t  function consumed(body) {\n\t    if (body.bodyUsed) {\n\t      return Promise.reject(new TypeError('Already read'))\n\t    }\n\t    body.bodyUsed = true\n\t  }\n\t\n\t  function fileReaderReady(reader) {\n\t    return new Promise(function(resolve, reject) {\n\t      reader.onload = function() {\n\t        resolve(reader.result)\n\t      }\n\t      reader.onerror = function() {\n\t        reject(reader.error)\n\t      }\n\t    })\n\t  }\n\t\n\t  function readBlobAsArrayBuffer(blob) {\n\t    var reader = new FileReader()\n\t    reader.readAsArrayBuffer(blob)\n\t    return fileReaderReady(reader)\n\t  }\n\t\n\t  function readBlobAsText(blob) {\n\t    var reader = new FileReader()\n\t    reader.readAsText(blob)\n\t    return fileReaderReady(reader)\n\t  }\n\t\n\t  function Body() {\n\t    this.bodyUsed = false\n\t\n\t    this._initBody = function(body) {\n\t      this._bodyInit = body\n\t      if (typeof body === 'string') {\n\t        this._bodyText = body\n\t      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n\t        this._bodyBlob = body\n\t      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n\t        this._bodyFormData = body\n\t      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n\t        this._bodyText = body.toString()\n\t      } else if (!body) {\n\t        this._bodyText = ''\n\t      } else if (support.arrayBuffer && ArrayBuffer.prototype.isPrototypeOf(body)) {\n\t        // Only support ArrayBuffers for POST method.\n\t        // Receiving ArrayBuffers happens via Blobs, instead.\n\t      } else {\n\t        throw new Error('unsupported BodyInit type')\n\t      }\n\t\n\t      if (!this.headers.get('content-type')) {\n\t        if (typeof body === 'string') {\n\t          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n\t        } else if (this._bodyBlob && this._bodyBlob.type) {\n\t          this.headers.set('content-type', this._bodyBlob.type)\n\t        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n\t          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n\t        }\n\t      }\n\t    }\n\t\n\t    if (support.blob) {\n\t      this.blob = function() {\n\t        var rejected = consumed(this)\n\t        if (rejected) {\n\t          return rejected\n\t        }\n\t\n\t        if (this._bodyBlob) {\n\t          return Promise.resolve(this._bodyBlob)\n\t        } else if (this._bodyFormData) {\n\t          throw new Error('could not read FormData body as blob')\n\t        } else {\n\t          return Promise.resolve(new Blob([this._bodyText]))\n\t        }\n\t      }\n\t\n\t      this.arrayBuffer = function() {\n\t        return this.blob().then(readBlobAsArrayBuffer)\n\t      }\n\t\n\t      this.text = function() {\n\t        var rejected = consumed(this)\n\t        if (rejected) {\n\t          return rejected\n\t        }\n\t\n\t        if (this._bodyBlob) {\n\t          return readBlobAsText(this._bodyBlob)\n\t        } else if (this._bodyFormData) {\n\t          throw new Error('could not read FormData body as text')\n\t        } else {\n\t          return Promise.resolve(this._bodyText)\n\t        }\n\t      }\n\t    } else {\n\t      this.text = function() {\n\t        var rejected = consumed(this)\n\t        return rejected ? rejected : Promise.resolve(this._bodyText)\n\t      }\n\t    }\n\t\n\t    if (support.formData) {\n\t      this.formData = function() {\n\t        return this.text().then(decode)\n\t      }\n\t    }\n\t\n\t    this.json = function() {\n\t      return this.text().then(JSON.parse)\n\t    }\n\t\n\t    return this\n\t  }\n\t\n\t  // HTTP methods whose capitalization should be normalized\n\t  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\t\n\t  function normalizeMethod(method) {\n\t    var upcased = method.toUpperCase()\n\t    return (methods.indexOf(upcased) > -1) ? upcased : method\n\t  }\n\t\n\t  function Request(input, options) {\n\t    options = options || {}\n\t    var body = options.body\n\t    if (Request.prototype.isPrototypeOf(input)) {\n\t      if (input.bodyUsed) {\n\t        throw new TypeError('Already read')\n\t      }\n\t      this.url = input.url\n\t      this.credentials = input.credentials\n\t      if (!options.headers) {\n\t        this.headers = new Headers(input.headers)\n\t      }\n\t      this.method = input.method\n\t      this.mode = input.mode\n\t      if (!body) {\n\t        body = input._bodyInit\n\t        input.bodyUsed = true\n\t      }\n\t    } else {\n\t      this.url = input\n\t    }\n\t\n\t    this.credentials = options.credentials || this.credentials || 'omit'\n\t    if (options.headers || !this.headers) {\n\t      this.headers = new Headers(options.headers)\n\t    }\n\t    this.method = normalizeMethod(options.method || this.method || 'GET')\n\t    this.mode = options.mode || this.mode || null\n\t    this.referrer = null\n\t\n\t    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n\t      throw new TypeError('Body not allowed for GET or HEAD requests')\n\t    }\n\t    this._initBody(body)\n\t  }\n\t\n\t  Request.prototype.clone = function() {\n\t    return new Request(this)\n\t  }\n\t\n\t  function decode(body) {\n\t    var form = new FormData()\n\t    body.trim().split('&').forEach(function(bytes) {\n\t      if (bytes) {\n\t        var split = bytes.split('=')\n\t        var name = split.shift().replace(/\\+/g, ' ')\n\t        var value = split.join('=').replace(/\\+/g, ' ')\n\t        form.append(decodeURIComponent(name), decodeURIComponent(value))\n\t      }\n\t    })\n\t    return form\n\t  }\n\t\n\t  function headers(xhr) {\n\t    var head = new Headers()\n\t    var pairs = (xhr.getAllResponseHeaders() || '').trim().split('\\n')\n\t    pairs.forEach(function(header) {\n\t      var split = header.trim().split(':')\n\t      var key = split.shift().trim()\n\t      var value = split.join(':').trim()\n\t      head.append(key, value)\n\t    })\n\t    return head\n\t  }\n\t\n\t  Body.call(Request.prototype)\n\t\n\t  function Response(bodyInit, options) {\n\t    if (!options) {\n\t      options = {}\n\t    }\n\t\n\t    this.type = 'default'\n\t    this.status = options.status\n\t    this.ok = this.status >= 200 && this.status < 300\n\t    this.statusText = options.statusText\n\t    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers)\n\t    this.url = options.url || ''\n\t    this._initBody(bodyInit)\n\t  }\n\t\n\t  Body.call(Response.prototype)\n\t\n\t  Response.prototype.clone = function() {\n\t    return new Response(this._bodyInit, {\n\t      status: this.status,\n\t      statusText: this.statusText,\n\t      headers: new Headers(this.headers),\n\t      url: this.url\n\t    })\n\t  }\n\t\n\t  Response.error = function() {\n\t    var response = new Response(null, {status: 0, statusText: ''})\n\t    response.type = 'error'\n\t    return response\n\t  }\n\t\n\t  var redirectStatuses = [301, 302, 303, 307, 308]\n\t\n\t  Response.redirect = function(url, status) {\n\t    if (redirectStatuses.indexOf(status) === -1) {\n\t      throw new RangeError('Invalid status code')\n\t    }\n\t\n\t    return new Response(null, {status: status, headers: {location: url}})\n\t  }\n\t\n\t  self.Headers = Headers\n\t  self.Request = Request\n\t  self.Response = Response\n\t\n\t  self.fetch = function(input, init) {\n\t    return new Promise(function(resolve, reject) {\n\t      var request\n\t      if (Request.prototype.isPrototypeOf(input) && !init) {\n\t        request = input\n\t      } else {\n\t        request = new Request(input, init)\n\t      }\n\t\n\t      var xhr = new XMLHttpRequest()\n\t\n\t      function responseURL() {\n\t        if ('responseURL' in xhr) {\n\t          return xhr.responseURL\n\t        }\n\t\n\t        // Avoid security warnings on getResponseHeader when not allowed by CORS\n\t        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n\t          return xhr.getResponseHeader('X-Request-URL')\n\t        }\n\t\n\t        return\n\t      }\n\t\n\t      xhr.onload = function() {\n\t        var options = {\n\t          status: xhr.status,\n\t          statusText: xhr.statusText,\n\t          headers: headers(xhr),\n\t          url: responseURL()\n\t        }\n\t        var body = 'response' in xhr ? xhr.response : xhr.responseText\n\t        resolve(new Response(body, options))\n\t      }\n\t\n\t      xhr.onerror = function() {\n\t        reject(new TypeError('Network request failed'))\n\t      }\n\t\n\t      xhr.ontimeout = function() {\n\t        reject(new TypeError('Network request failed'))\n\t      }\n\t\n\t      xhr.open(request.method, request.url, true)\n\t\n\t      if (request.credentials === 'include') {\n\t        xhr.withCredentials = true\n\t      }\n\t\n\t      if ('responseType' in xhr && support.blob) {\n\t        xhr.responseType = 'blob'\n\t      }\n\t\n\t      request.headers.forEach(function(value, name) {\n\t        xhr.setRequestHeader(name, value)\n\t      })\n\t\n\t      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n\t    })\n\t  }\n\t  self.fetch.polyfill = true\n\t})(typeof self !== 'undefined' ? self : this);\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.VERSION = exports.services = exports.WeakClient = exports.Client = exports.ConnectionStatusListener = exports.Authentication = undefined;\n\t\n\tvar _handshake = __webpack_require__(3);\n\t\n\tObject.defineProperty(exports, 'Authentication', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _handshake.Authentication;\n\t  }\n\t});\n\t\n\tvar _connectionStatus = __webpack_require__(5);\n\t\n\tObject.defineProperty(exports, 'ConnectionStatusListener', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _connectionStatus.ConnectionStatusListener;\n\t  }\n\t});\n\t\n\tvar _client = __webpack_require__(6);\n\t\n\tObject.defineProperty(exports, 'Client', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _client.Client;\n\t  }\n\t});\n\t\n\tvar _weakClient = __webpack_require__(19);\n\t\n\tObject.defineProperty(exports, 'WeakClient', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _weakClient.WeakClient;\n\t  }\n\t});\n\t\n\tvar _index = __webpack_require__(4);\n\t\n\tvar services = _interopRequireWildcard(_index);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\texports.services = services;\n\t\n\t/**\n\t * SDK Version\n\t * @type {string}\n\t */\n\t\n\tvar VERSION = exports.VERSION = '2.0.0-rc.1';\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Authentication = exports.CredentialsHandshake = exports.TokenHandshake = exports.AbstractHandshake = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _services = __webpack_require__(4);\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\n\t * ZetaPush deployables names\n\t */\n\tvar DeployableNames = {\n\t  AUTH_SIMPLE: 'simple',\n\t  AUTH_WEAK: 'weak',\n\t  AUTH_DELEGATING: 'delegating'\n\t};\n\t\n\t/**\n\t * Provide abstraction over CometD handshake data structure\n\t * @access public\n\t */\n\t\n\tvar AbstractHandshake = exports.AbstractHandshake = function () {\n\t  /**\n\t   * Create a new handshake manager\n\t   * @param {{authType: string, sandboxId: string, deploymentId: string}} parameters\n\t   */\n\t\n\t  function AbstractHandshake(_ref) {\n\t    var authType = _ref.authType;\n\t    var sandboxId = _ref.sandboxId;\n\t    var deploymentId = _ref.deploymentId;\n\t\n\t    _classCallCheck(this, AbstractHandshake);\n\t\n\t    /**\n\t     * @access protected\n\t     * @type {string}\n\t     */\n\t    this.authType = authType;\n\t    /**\n\t     * @access protected\n\t     * @type {string}\n\t     */\n\t    this.sandboxId = sandboxId;\n\t    /**\n\t     * @access protected\n\t     * @type {string}\n\t     */\n\t    this.deploymentId = deploymentId;\n\t  }\n\t  /**\n\t   * @param {ClientHelper} client\n\t   * @return {Object}\n\t   */\n\t\n\t\n\t  _createClass(AbstractHandshake, [{\n\t    key: 'getHandshakeFields',\n\t    value: function getHandshakeFields(client) {\n\t      var authentication = {\n\t        data: this.authData,\n\t        type: client.getSandboxId() + '.' + this.deploymentId + '.' + this.authType,\n\t        version: this.authVersion\n\t      };\n\t      if (client.getResource()) {\n\t        authentication.resource = client.getResource();\n\t      }\n\t      return {\n\t        ext: {\n\t          authentication: authentication\n\t        }\n\t      };\n\t    }\n\t    /**\n\t     * Get auth version\n\t     * @return {string}\n\t     */\n\t\n\t  }, {\n\t    key: 'authVersion',\n\t    get: function get() {\n\t      return 'none';\n\t    }\n\t  }]);\n\t\n\t  return AbstractHandshake;\n\t}();\n\t\n\t/**\n\t * Provide abstraction over CometD token base handshake data structure\n\t * @access public\n\t * @extends {AbstractHandshake}\n\t */\n\t\n\t\n\tvar TokenHandshake = exports.TokenHandshake = function (_AbstractHandshake) {\n\t  _inherits(TokenHandshake, _AbstractHandshake);\n\t\n\t  /**\n\t   * @param {{authType: string, deploymentId: string, token: string}} parameters\n\t   */\n\t\n\t  function TokenHandshake(_ref2) {\n\t    var authType = _ref2.authType;\n\t    var deploymentId = _ref2.deploymentId;\n\t    var token = _ref2.token;\n\t\n\t    _classCallCheck(this, TokenHandshake);\n\t\n\t    /**\n\t     * @access private\n\t     * @type {string}\n\t     */\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TokenHandshake).call(this, { deploymentId: deploymentId, authType: authType }));\n\t\n\t    _this.token = token;\n\t    return _this;\n\t  }\n\t  /**\n\t   * @return {token: string}\n\t   */\n\t\n\t\n\t  _createClass(TokenHandshake, [{\n\t    key: 'authData',\n\t    get: function get() {\n\t      var token = this.token;\n\t\n\t      return {\n\t        token: token\n\t      };\n\t    }\n\t  }]);\n\t\n\t  return TokenHandshake;\n\t}(AbstractHandshake);\n\t\n\t/**\n\t * Provide abstraction over CometD credentials based handshake data structure\n\t * @access public\n\t * @extends {AbstractHandshake}\n\t */\n\t\n\t\n\tvar CredentialsHandshake = exports.CredentialsHandshake = function (_AbstractHandshake2) {\n\t  _inherits(CredentialsHandshake, _AbstractHandshake2);\n\t\n\t  /**\n\t   * @param {{authType: string, deploymentId: string, login: string, password: string}} parameters\n\t   */\n\t\n\t  function CredentialsHandshake(_ref3) {\n\t    var authType = _ref3.authType;\n\t    var deploymentId = _ref3.deploymentId;\n\t    var login = _ref3.login;\n\t    var password = _ref3.password;\n\t\n\t    _classCallCheck(this, CredentialsHandshake);\n\t\n\t    /**\n\t     * @access private\n\t     * @type {string}\n\t     */\n\t\n\t    var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(CredentialsHandshake).call(this, { authType: authType, deploymentId: deploymentId }));\n\t\n\t    _this2.login = login;\n\t    /**\n\t     * @access private\n\t     * @type {string}\n\t     */\n\t    _this2.password = password;\n\t    return _this2;\n\t  }\n\t  /**\n\t   * Get auth data\n\t   * @return {login: string, password: string}\n\t   */\n\t\n\t\n\t  _createClass(CredentialsHandshake, [{\n\t    key: 'authData',\n\t    get: function get() {\n\t      var login = this.login;\n\t      var password = this.password;\n\t\n\t      return {\n\t        login: login, password: password\n\t      };\n\t    }\n\t  }]);\n\t\n\t  return CredentialsHandshake;\n\t}(AbstractHandshake);\n\t\n\t/**\n\t * Factory to create handshake\n\t * @access public\n\t */\n\t\n\t\n\tvar Authentication = exports.Authentication = function () {\n\t  function Authentication() {\n\t    _classCallCheck(this, Authentication);\n\t  }\n\t\n\t  _createClass(Authentication, null, [{\n\t    key: 'simple',\n\t\n\t    /**\n\t     * @param {{deploymentId: string, login: string, password: string}} parameters\n\t     * @return {CredentialsHandshake}\n\t     */\n\t    value: function simple(_ref4) {\n\t      var _ref4$deploymentId = _ref4.deploymentId;\n\t      var deploymentId = _ref4$deploymentId === undefined ? _services.Simple.DEFAULT_DEPLOYMENT_ID : _ref4$deploymentId;\n\t      var login = _ref4.login;\n\t      var password = _ref4.password;\n\t\n\t      return Authentication.create({\n\t        authType: DeployableNames.AUTH_SIMPLE,\n\t        deploymentId: deploymentId,\n\t        login: login,\n\t        password: password\n\t      });\n\t    }\n\t    /**\n\t     * @param {{deploymentId: string, token: string}} parameters\n\t     * @return {TokenHandshake}\n\t     */\n\t\n\t  }, {\n\t    key: 'weak',\n\t    value: function weak(_ref5) {\n\t      var _ref5$deploymentId = _ref5.deploymentId;\n\t      var deploymentId = _ref5$deploymentId === undefined ? _services.Weak.DEFAULT_DEPLOYMENT_ID : _ref5$deploymentId;\n\t      var token = _ref5.token;\n\t\n\t      return Authentication.create({\n\t        authType: DeployableNames.AUTH_WEAK,\n\t        deploymentId: deploymentId,\n\t        login: token,\n\t        password: null\n\t      });\n\t    }\n\t    /**\n\t     * @param {{deploymentId: string, token: string}} parameters\n\t     * @return {TokenHandshake}\n\t     */\n\t\n\t  }, {\n\t    key: 'delegating',\n\t    value: function delegating(_ref6) {\n\t      var _ref6$deploymentId = _ref6.deploymentId;\n\t      var deploymentId = _ref6$deploymentId === undefined ? _services.Delegating.DEFAULT_DEPLOYMENT_ID : _ref6$deploymentId;\n\t      var token = _ref6.token;\n\t\n\t      return Authentication.create({\n\t        authType: DeployableNames.AUTH_DELEGATING,\n\t        deploymentId: deploymentId,\n\t        login: token,\n\t        password: null\n\t      });\n\t    }\n\t    /**\n\t     * @param {{authType: string, deploymentId: string, login: string, password: string}} parameters\n\t     * @return {TokenHandshake|CredentialsHandshake}\n\t     */\n\t\n\t  }, {\n\t    key: 'create',\n\t    value: function create(_ref7) {\n\t      var authType = _ref7.authType;\n\t      var deploymentId = _ref7.deploymentId;\n\t      var login = _ref7.login;\n\t      var password = _ref7.password;\n\t\n\t      if (null === password) {\n\t        return new TokenHandshake({ authType: authType, deploymentId: deploymentId, token: login });\n\t      }\n\t      return new CredentialsHandshake({ authType: authType, deploymentId: deploymentId, login: login, password: password });\n\t    }\n\t  }]);\n\n\t  return Authentication;\n\t}();\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t\tvalue: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError(\"Cannot destructure undefined\"); }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\n\t * @access protected\n\t */\n\t\n\tvar Service = exports.Service = function Service(_ref) {\n\t\tvar $publish = _ref.$publish;\n\t\n\t\t_classCallCheck(this, Service);\n\t\n\t\tthis.$publish = $publish;\n\t};\n\t/**\n\t * Data aggregation\n\t *\n\t * Provides data aggregation over time and across different items\n\t *  User devices push items data on developer-defined categories\n\t *  This service automatically aggregates the data\n\t * Raw data is not available for reading, only the generated aggregation result\n\t *\n\t * */\n\t/**\n\t * User API for item aggregation\n\t *\n\t * Users can push data and be notified of aggregated data.\n\t * This service does not allow you to read the data. To achieve that kind of behavior, you could configure a callback to store the data.\n\t * @access public\n\t * */\n\t\n\t\n\tvar Aggreg = exports.Aggreg = function (_Service) {\n\t\t_inherits(Aggreg, _Service);\n\t\n\t\tfunction Aggreg() {\n\t\t\t_classCallCheck(this, Aggreg);\n\t\n\t\t\treturn _possibleConstructorReturn(this, Object.getPrototypeOf(Aggreg).apply(this, arguments));\n\t\t}\n\t\n\t\t_createClass(Aggreg, [{\n\t\t\tkey: 'push',\n\t\n\t\t\t/**\n\t   * Pushes some data\n\t   *\n\t   * Pushes the given data.\n\t   * All the items are processed according to the defined rules.\n\t   * At least one push for a given item is needed during a time period to trigger processing and calling of the corresponding callback verb/macro.\n\t   * */\n\t\t\tvalue: function push(_ref2) {\n\t\t\t\tvar items = _ref2.items;\n\t\t\t\tvar owner = _ref2.owner;\n\t\t\t\tthis.$publish('push', { items: items, owner: owner });\n\t\t\t}\n\t\t}], [{\n\t\t\tkey: 'DEFAULT_DEPLOYMENT_ID',\n\t\n\t\t\t/**\n\t   * Get default deployment id associated to AggregService\n\t   * @return {string}\n\t   */\n\t\t\tget: function get() {\n\t\t\t\treturn 'aggreg_0';\n\t\t\t}\n\t\t}]);\n\t\n\t\treturn Aggreg;\n\t}(Service);\n\t/**\n\t * Data stacks\n\t *\n\t * Stacks are a per-user named persistent queue of data\n\t *  An administrator creates a stack service\n\t *  End-users can push data on an arbitrary number of their own arbitrary named stacks\n\t * */\n\t/**\n\t * Data stack user API\n\t *\n\t * Data is stored on a per user basis. However, notifications can be sent to a configurable set of listeners.\n\t * Stack names are arbitrary and do not need to be explicitly initialized.\n\t * @access public\n\t * */\n\t\n\t\n\tvar Stack = exports.Stack = function (_Service2) {\n\t\t_inherits(Stack, _Service2);\n\t\n\t\tfunction Stack() {\n\t\t\t_classCallCheck(this, Stack);\n\t\n\t\t\treturn _possibleConstructorReturn(this, Object.getPrototypeOf(Stack).apply(this, arguments));\n\t\t}\n\t\n\t\t_createClass(Stack, [{\n\t\t\tkey: 'getListeners',\n\t\n\t\t\t/**\n\t   * Lists the listeners\n\t   *\n\t   * Returns the whole list of listeners for the given stack.\n\t   * */\n\t\t\tvalue: function getListeners(_ref3) {\n\t\t\t\tvar owner = _ref3.owner;\n\t\t\t\tvar stack = _ref3.stack;\n\t\t\t\tthis.$publish('getListeners', { owner: owner, stack: stack });\n\t\t\t}\n\t\t\t/**\n\t   * Lists content\n\t   *\n\t   * Returns a paginated list of contents for the given stack.\n\t   * Content is sorted according to the statically configured order.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'list',\n\t\t\tvalue: function list(_ref4) {\n\t\t\t\tvar owner = _ref4.owner;\n\t\t\t\tvar page = _ref4.page;\n\t\t\t\tvar stack = _ref4.stack;\n\t\t\t\tthis.$publish('list', { owner: owner, page: page, stack: stack });\n\t\t\t}\n\t\t\t/**\n\t   * Empties a stack\n\t   *\n\t   * Removes all items from the given stack.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'purge',\n\t\t\tvalue: function purge(_ref5) {\n\t\t\t\tvar owner = _ref5.owner;\n\t\t\t\tvar stack = _ref5.stack;\n\t\t\t\tthis.$publish('purge', { owner: owner, stack: stack });\n\t\t\t}\n\t\t\t/**\n\t   * Pushes an item\n\t   *\n\t   * Pushes an item onto the given stack.\n\t   * The stack does not need to be created.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'push',\n\t\t\tvalue: function push(_ref6) {\n\t\t\t\tvar stack = _ref6.stack;\n\t\t\t\tvar data = _ref6.data;\n\t\t\t\tvar owner = _ref6.owner;\n\t\t\t\tthis.$publish('push', { stack: stack, data: data, owner: owner });\n\t\t\t}\n\t\t\t/**\n\t   * Removes items\n\t   *\n\t   * Removes the item with the given guid from the given stack.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'remove',\n\t\t\tvalue: function remove(_ref7) {\n\t\t\t\tvar guids = _ref7.guids;\n\t\t\t\tvar owner = _ref7.owner;\n\t\t\t\tvar stack = _ref7.stack;\n\t\t\t\tthis.$publish('remove', { guids: guids, owner: owner, stack: stack });\n\t\t\t}\n\t\t\t/**\n\t   * Sets the listeners\n\t   *\n\t   * Sets the listeners for the given stack.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'setListeners',\n\t\t\tvalue: function setListeners(_ref8) {\n\t\t\t\tvar listeners = _ref8.listeners;\n\t\t\t\tvar owner = _ref8.owner;\n\t\t\t\tvar stack = _ref8.stack;\n\t\t\t\tthis.$publish('setListeners', { listeners: listeners, owner: owner, stack: stack });\n\t\t\t}\n\t\t\t/**\n\t   * Updates an item\n\t   *\n\t   * Updates an existing item of the given stack.\n\t   * The item MUST exist prior to the call.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'update',\n\t\t\tvalue: function update(_ref9) {\n\t\t\t\tvar guid = _ref9.guid;\n\t\t\t\tvar stack = _ref9.stack;\n\t\t\t\tvar data = _ref9.data;\n\t\t\t\tvar owner = _ref9.owner;\n\t\t\t\tthis.$publish('update', { guid: guid, stack: stack, data: data, owner: owner });\n\t\t\t}\n\t\t}], [{\n\t\t\tkey: 'DEFAULT_DEPLOYMENT_ID',\n\t\n\t\t\t/**\n\t   * Get default deployment id associated to StackService\n\t   * @return {string}\n\t   */\n\t\t\tget: function get() {\n\t\t\t\treturn 'stack_0';\n\t\t\t}\n\t\t}]);\n\t\n\t\treturn Stack;\n\t}(Service);\n\t/**\n\t * Echo\n\t *\n\t * Echo\n\t * */\n\t/**\n\t * Echo service\n\t *\n\t * Simple echo service, for development purposes.\n\t * @access public\n\t * */\n\t\n\t\n\tvar Echo = exports.Echo = function (_Service3) {\n\t\t_inherits(Echo, _Service3);\n\t\n\t\tfunction Echo() {\n\t\t\t_classCallCheck(this, Echo);\n\t\n\t\t\treturn _possibleConstructorReturn(this, Object.getPrototypeOf(Echo).apply(this, arguments));\n\t\t}\n\t\n\t\t_createClass(Echo, [{\n\t\t\tkey: 'echo',\n\t\n\t\t\t/**\n\t   * Echoes an object\n\t   *\n\t   * Echoes an object: the server will echo that object on channel 'echo' for the current user.\n\t   * */\n\t\t\tvalue: function echo(_ref10) {\n\t\t\t\t_objectDestructuringEmpty(_ref10);\n\t\n\t\t\t\tthis.$publish('echo', {});\n\t\t\t}\n\t\t}], [{\n\t\t\tkey: 'DEFAULT_DEPLOYMENT_ID',\n\t\n\t\t\t/**\n\t   * Get default deployment id associated to EchoService\n\t   * @return {string}\n\t   */\n\t\t\tget: function get() {\n\t\t\t\treturn 'echo_0';\n\t\t\t}\n\t\t}]);\n\t\n\t\treturn Echo;\n\t}(Service);\n\t/**\n\t * Game engine\n\t *\n\t * Abstract Game Engine\n\t *  Concrete game engines are remote cometd clients or internal macros\n\t * */\n\t/**\n\t * Game Engine API\n\t *\n\t * The Game Engine API is for game engine clients, not end-users.\n\t * @access public\n\t * */\n\t\n\t\n\tvar GameEngine = exports.GameEngine = function (_Service4) {\n\t\t_inherits(GameEngine, _Service4);\n\t\n\t\tfunction GameEngine() {\n\t\t\t_classCallCheck(this, GameEngine);\n\t\n\t\t\treturn _possibleConstructorReturn(this, Object.getPrototypeOf(GameEngine).apply(this, arguments));\n\t\t}\n\t\n\t\t_createClass(GameEngine, [{\n\t\t\tkey: 'join_result',\n\t\n\t\t\t/**\n\t   * Notify the result for a join request\n\t   *\n\t   * A Game Engine notifies the STR of the result of a join request that it received on join_callback\n\t   * */\n\t\t\tvalue: function join_result(_ref11) {\n\t\t\t\tvar callerId = _ref11.callerId;\n\t\t\t\tvar error = _ref11.error;\n\t\t\t\tvar msgId = _ref11.msgId;\n\t\t\t\tvar payload = _ref11.payload;\n\t\t\t\tthis.$publish('join_result', { callerId: callerId, error: error, msgId: msgId, payload: payload });\n\t\t\t}\n\t\t\t/**\n\t   * Notify the result for an organization request\n\t   *\n\t   * A Game Engine notifies the STR of the result of an organization request that it received on organize_callback\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'organize_result',\n\t\t\tvalue: function organize_result(_ref12) {\n\t\t\t\tvar callerId = _ref12.callerId;\n\t\t\t\tvar error = _ref12.error;\n\t\t\t\tvar msgId = _ref12.msgId;\n\t\t\t\tvar payload = _ref12.payload;\n\t\t\t\tthis.$publish('organize_result', { callerId: callerId, error: error, msgId: msgId, payload: payload });\n\t\t\t}\n\t\t\t/**\n\t   * Registers a game engine\n\t   *\n\t   * A client registers itself to the STR as a Game Engine.\n\t   * The STR may, from now on, dispatch game of the given game type to said client.\n\t   * Unregistration is done automatically on logoff.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'register',\n\t\t\tvalue: function register(_ref13) {\n\t\t\t\tvar gameInfo = _ref13.gameInfo;\n\t\t\t\tvar location = _ref13.location;\n\t\t\t\tvar maxGames = _ref13.maxGames;\n\t\t\t\tthis.$publish('register', { gameInfo: gameInfo, location: location, maxGames: maxGames });\n\t\t\t}\n\t\t\t/**\n\t   * Notify the result for a start request\n\t   *\n\t   * A Game Engine notifies the STR of the result of a start request that it received on start_callback\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'start_result',\n\t\t\tvalue: function start_result(_ref14) {\n\t\t\t\tvar gameId = _ref14.gameId;\n\t\t\t\tthis.$publish('start_result', { gameId: gameId });\n\t\t\t}\n\t\t\t/**\n\t   * Notify a game event\n\t   *\n\t   * A Game Engine notifies the STR of some arbitrary game event.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'state',\n\t\t\tvalue: function state(_ref15) {\n\t\t\t\tvar data = _ref15.data;\n\t\t\t\tvar gameId = _ref15.gameId;\n\t\t\t\tvar status = _ref15.status;\n\t\t\t\tthis.$publish('state', { data: data, gameId: gameId, status: status });\n\t\t\t}\n\t\t\t/**\n\t   * Notify the result for an unjoin request\n\t   *\n\t   * A Game Engine notifies the STR of the result of an unjoin request that it received on unjoin_callback\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'unjoin_result',\n\t\t\tvalue: function unjoin_result(_ref16) {\n\t\t\t\tvar callerId = _ref16.callerId;\n\t\t\t\tvar error = _ref16.error;\n\t\t\t\tvar msgId = _ref16.msgId;\n\t\t\t\tvar payload = _ref16.payload;\n\t\t\t\tthis.$publish('unjoin_result', { callerId: callerId, error: error, msgId: msgId, payload: payload });\n\t\t\t}\n\t\t}], [{\n\t\t\tkey: 'DEFAULT_DEPLOYMENT_ID',\n\t\n\t\t\t/**\n\t   * Get default deployment id associated to GameEngineService\n\t   * @return {string}\n\t   */\n\t\t\tget: function get() {\n\t\t\t\treturn 'game_0';\n\t\t\t}\n\t\t}]);\n\t\n\t\treturn GameEngine;\n\t}(Service);\n\t/**\n\t * User API for games\n\t *\n\t * Users can list, start, join games, and play.\n\t * @access public\n\t * */\n\t\n\t\n\tvar Game = exports.Game = function (_Service5) {\n\t\t_inherits(Game, _Service5);\n\t\n\t\tfunction Game() {\n\t\t\t_classCallCheck(this, Game);\n\t\n\t\t\treturn _possibleConstructorReturn(this, Object.getPrototypeOf(Game).apply(this, arguments));\n\t\t}\n\t\n\t\t_createClass(Game, [{\n\t\t\tkey: 'available',\n\t\n\t\t\t/**\n\t   * Lists game types\n\t   *\n\t   * Returns the list of game types supported by the server and the currently registered game engines.\n\t   * */\n\t\t\tvalue: function available(_ref17) {\n\t\t\t\t_objectDestructuringEmpty(_ref17);\n\t\n\t\t\t\tthis.$publish('available', {});\n\t\t\t}\n\t\t\t/**A user joins a game*/\n\t\n\t\t}, {\n\t\t\tkey: 'join',\n\t\t\tvalue: function join(_ref18) {\n\t\t\t\tvar gameId = _ref18.gameId;\n\t\t\t\tvar role = _ref18.role;\n\t\t\t\tvar userId = _ref18.userId;\n\t\t\t\tvar userName = _ref18.userName;\n\t\t\t\tthis.$publish('join', { gameId: gameId, role: role, userId: userId, userName: userName });\n\t\t\t}\n\t\t\t/**Organizes a game*/\n\t\n\t\t}, {\n\t\t\tkey: 'organize',\n\t\t\tvalue: function organize(_ref19) {\n\t\t\t\tvar type = _ref19.type;\n\t\t\t\tvar owner = _ref19.owner;\n\t\t\t\tvar options = _ref19.options;\n\t\t\t\tthis.$publish('organize', { type: type, owner: owner, options: options });\n\t\t\t}\n\t\t\t/**Gives some command to the game engine*/\n\t\n\t\t}, {\n\t\t\tkey: 'play',\n\t\t\tvalue: function play(_ref20) {\n\t\t\t\tvar data = _ref20.data;\n\t\t\t\tvar gameId = _ref20.gameId;\n\t\t\t\tvar userId = _ref20.userId;\n\t\t\t\tthis.$publish('play', { data: data, gameId: gameId, userId: userId });\n\t\t\t}\n\t\t\t/**Starts a game*/\n\t\n\t\t}, {\n\t\t\tkey: 'start',\n\t\t\tvalue: function start(_ref21) {\n\t\t\t\tvar gameId = _ref21.gameId;\n\t\t\t\tthis.$publish('start', { gameId: gameId });\n\t\t\t}\n\t\t\t/**A user cancels joining a game*/\n\t\n\t\t}, {\n\t\t\tkey: 'unjoin',\n\t\t\tvalue: function unjoin(_ref22) {\n\t\t\t\tvar gameId = _ref22.gameId;\n\t\t\t\tvar role = _ref22.role;\n\t\t\t\tvar userId = _ref22.userId;\n\t\t\t\tvar userName = _ref22.userName;\n\t\t\t\tthis.$publish('unjoin', { gameId: gameId, role: role, userId: userId, userName: userName });\n\t\t\t}\n\t\t}], [{\n\t\t\tkey: 'DEFAULT_DEPLOYMENT_ID',\n\t\n\t\t\t/**\n\t   * Get default deployment id associated to GameService\n\t   * @return {string}\n\t   */\n\t\t\tget: function get() {\n\t\t\t\treturn 'game_0';\n\t\t\t}\n\t\t}]);\n\t\n\t\treturn Game;\n\t}(Service);\n\t/**\n\t * Generic Data Access\n\t *\n\t * Generic Data Access Service : NoSQL storage\n\t * */\n\t/**\n\t * GDA User API\n\t *\n\t * User API for Generic Data Access.\n\t * Data is stored on a per-user basis.\n\t * Users can put, get, list their data.\n\t * @access public\n\t * */\n\t\n\t\n\tvar Gda = exports.Gda = function (_Service6) {\n\t\t_inherits(Gda, _Service6);\n\t\n\t\tfunction Gda() {\n\t\t\t_classCallCheck(this, Gda);\n\t\n\t\t\treturn _possibleConstructorReturn(this, Object.getPrototypeOf(Gda).apply(this, arguments));\n\t\t}\n\t\n\t\t_createClass(Gda, [{\n\t\t\tkey: 'get',\n\t\n\t\t\t/**\n\t   * Asks for a data row\n\t   *\n\t   * Returns a full data row.\n\t   * */\n\t\t\tvalue: function get(_ref23) {\n\t\t\t\tvar key = _ref23.key;\n\t\t\t\tvar owner = _ref23.owner;\n\t\t\t\tvar table = _ref23.table;\n\t\t\t\tthis.$publish('get', { key: key, owner: owner, table: table });\n\t\t\t}\n\t\t\t/**\n\t   * Asks for a data cell\n\t   *\n\t   * Returns a precise list of cells from a column in a data row.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'getCells',\n\t\t\tvalue: function getCells(_ref24) {\n\t\t\t\tvar column = _ref24.column;\n\t\t\t\tvar key = _ref24.key;\n\t\t\t\tvar key2 = _ref24.key2;\n\t\t\t\tvar owner = _ref24.owner;\n\t\t\t\tvar table = _ref24.table;\n\t\t\t\tthis.$publish('getCells', { column: column, key: key, key2: key2, owner: owner, table: table });\n\t\t\t}\n\t\t\t/**\n\t   * Increments an integer value\n\t   *\n\t   * Increments a cell 64-bit signed integer value and returns the result in the data field.\n\t   * The increment is atomic : if you concurrently increment 10 times a value by 1, the final result will be the initial value plus 10. The actual individual resulting values seen by the 10 concurrent callers may vary discontinuously, with duplicates : at least one of them will see the final (+10) result.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'inc',\n\t\t\tvalue: function inc(_ref25) {\n\t\t\t\tvar table = _ref25.table;\n\t\t\t\tvar data = _ref25.data;\n\t\t\t\tvar key = _ref25.key;\n\t\t\t\tvar key2 = _ref25.key2;\n\t\t\t\tvar owner = _ref25.owner;\n\t\t\t\tvar column = _ref25.column;\n\t\t\t\tthis.$publish('inc', { table: table, data: data, key: key, key2: key2, owner: owner, column: column });\n\t\t\t}\n\t\t\t/**\n\t   * Asks for a list of rows\n\t   *\n\t   * Returns a paginated list of rows from the given table.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'list',\n\t\t\tvalue: function list(_ref26) {\n\t\t\t\tvar columns = _ref26.columns;\n\t\t\t\tvar owner = _ref26.owner;\n\t\t\t\tvar page = _ref26.page;\n\t\t\t\tvar table = _ref26.table;\n\t\t\t\tthis.$publish('list', { columns: columns, owner: owner, page: page, table: table });\n\t\t\t}\n\t\t\t/**\n\t   * Puts some data into a cell\n\t   *\n\t   * Creates or replaces the contents of a particular cell.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'put',\n\t\t\tvalue: function put(_ref27) {\n\t\t\t\tvar column = _ref27.column;\n\t\t\t\tvar data = _ref27.data;\n\t\t\t\tvar key = _ref27.key;\n\t\t\t\tvar key2 = _ref27.key2;\n\t\t\t\tvar owner = _ref27.owner;\n\t\t\t\tvar table = _ref27.table;\n\t\t\t\tthis.$publish('put', { column: column, data: data, key: key, key2: key2, owner: owner, table: table });\n\t\t\t}\n\t\t\t/**\n\t   * Puts several rows\n\t   *\n\t   * Creates or replaces the (maybe partial) contents of a collection of rows.\n\t   * This method only creates or replaces cells for non-null input values.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'puts',\n\t\t\tvalue: function puts(_ref28) {\n\t\t\t\tvar owner = _ref28.owner;\n\t\t\t\tvar rows = _ref28.rows;\n\t\t\t\tvar table = _ref28.table;\n\t\t\t\tthis.$publish('puts', { owner: owner, rows: rows, table: table });\n\t\t\t}\n\t\t\t/**\n\t   * Asks for a range of rows\n\t   *\n\t   * Returns a paginated range of rows from the given table.\n\t   * A range consists of consecutive rows from the start key (inclusive) to the stop key (exclusive).\n\t   * You can specify partial keys for the start and stop fields.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'range',\n\t\t\tvalue: function range(_ref29) {\n\t\t\t\tvar columns = _ref29.columns;\n\t\t\t\tvar owner = _ref29.owner;\n\t\t\t\tvar page = _ref29.page;\n\t\t\t\tvar start = _ref29.start;\n\t\t\t\tvar stop = _ref29.stop;\n\t\t\t\tvar table = _ref29.table;\n\t\t\t\tthis.$publish('range', { columns: columns, owner: owner, page: page, start: start, stop: stop, table: table });\n\t\t\t}\n\t\t\t/**\n\t   * Reduces a range of rows\n\t   *\n\t   * Returns a computed single reduced result from a range of rows from the given table.\n\t   * A range consists of consecutive rows from the start key (inclusive) to the stop key (exclusive).\n\t   * You can specify partial keys for the start and stop fields.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'reduce',\n\t\t\tvalue: function reduce(_ref30) {\n\t\t\t\t_objectDestructuringEmpty(_ref30);\n\t\n\t\t\t\tthis.$publish('reduce', {});\n\t\t\t}\n\t\t\t/**\n\t   * Removes one cell inside a column of a row\n\t   *\n\t   * Removes only one cell of the given column of the given row from the given table.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'removeCell',\n\t\t\tvalue: function removeCell(_ref31) {\n\t\t\t\tvar column = _ref31.column;\n\t\t\t\tvar key = _ref31.key;\n\t\t\t\tvar key2 = _ref31.key2;\n\t\t\t\tvar owner = _ref31.owner;\n\t\t\t\tvar table = _ref31.table;\n\t\t\t\tthis.$publish('removeCell', { column: column, key: key, key2: key2, owner: owner, table: table });\n\t\t\t}\n\t\t\t/**\n\t   * Removes one full column of a row\n\t   *\n\t   * Removes all cells of the given column of the given row from the given table.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'removeColumn',\n\t\t\tvalue: function removeColumn(_ref32) {\n\t\t\t\tvar column = _ref32.column;\n\t\t\t\tvar key = _ref32.key;\n\t\t\t\tvar owner = _ref32.owner;\n\t\t\t\tvar table = _ref32.table;\n\t\t\t\tthis.$publish('removeColumn', { column: column, key: key, owner: owner, table: table });\n\t\t\t}\n\t\t\t/**\n\t   * Removes a range of rows\n\t   *\n\t   * Removes the specified columns of the given range of rows from the given table.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'removeRange',\n\t\t\tvalue: function removeRange(_ref33) {\n\t\t\t\tvar columns = _ref33.columns;\n\t\t\t\tvar owner = _ref33.owner;\n\t\t\t\tvar start = _ref33.start;\n\t\t\t\tvar stop = _ref33.stop;\n\t\t\t\tvar table = _ref33.table;\n\t\t\t\tthis.$publish('removeRange', { columns: columns, owner: owner, start: start, stop: stop, table: table });\n\t\t\t}\n\t\t\t/**\n\t   * Removes one full row\n\t   *\n\t   * Removes all columns of the given row from the given table.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'removeRow',\n\t\t\tvalue: function removeRow(_ref34) {\n\t\t\t\tvar key = _ref34.key;\n\t\t\t\tvar owner = _ref34.owner;\n\t\t\t\tvar table = _ref34.table;\n\t\t\t\tthis.$publish('removeRow', { key: key, owner: owner, table: table });\n\t\t\t}\n\t\t}], [{\n\t\t\tkey: 'DEFAULT_DEPLOYMENT_ID',\n\t\n\t\t\t/**\n\t   * Get default deployment id associated to GdaService\n\t   * @return {string}\n\t   */\n\t\t\tget: function get() {\n\t\t\t\treturn 'gda_0';\n\t\t\t}\n\t\t}]);\n\t\n\t\treturn Gda;\n\t}(Service);\n\t/**\n\t * Groups Management\n\t *\n\t * Groups management for users, grants on resources, remote commands on devices\n\t *  This is where you can configure rights for any resource\n\t *\n\t * */\n\t/**\n\t * User API for remote control\n\t *\n\t * @access public\n\t * */\n\t\n\t\n\tvar Remoting = function (_Service7) {\n\t\t_inherits(Remoting, _Service7);\n\t\n\t\tfunction Remoting() {\n\t\t\t_classCallCheck(this, Remoting);\n\t\n\t\t\treturn _possibleConstructorReturn(this, Object.getPrototypeOf(Remoting).apply(this, arguments));\n\t\t}\n\t\n\t\t_createClass(Remoting, [{\n\t\t\tkey: 'addListener',\n\t\n\t\t\t/**\n\t   * Adds a listener\n\t   *\n\t   * A user requests notifications from a device owned by anyone who granted him the right authorizations.\n\t   * Whenever the device calls 'notify', notifications will be sent to the caller of this verb.\n\t   * */\n\t\t\tvalue: function addListener(_ref35) {\n\t\t\t\tvar cmd = _ref35.cmd;\n\t\t\t\tvar data = _ref35.data;\n\t\t\t\tvar from = _ref35.from;\n\t\t\t\tvar fromResource = _ref35.fromResource;\n\t\t\t\tvar owner = _ref35.owner;\n\t\t\t\tvar resource = _ref35.resource;\n\t\t\t\tthis.$publish('addListener', { cmd: cmd, data: data, from: from, fromResource: fromResource, owner: owner, resource: resource });\n\t\t\t}\n\t\t\t/**Response to 'getCapabilities'*/\n\t\n\t\t}, {\n\t\t\tkey: 'capabilities',\n\t\t\tvalue: function capabilities(_ref36) {\n\t\t\t\tvar answeringResource = _ref36.answeringResource;\n\t\t\t\tvar askingResource = _ref36.askingResource;\n\t\t\t\tvar _capabilities = _ref36.capabilities;\n\t\t\t\tthis.$publish('capabilities', { answeringResource: answeringResource, askingResource: askingResource, capabilities: _capabilities });\n\t\t\t}\n\t\t\t/**\n\t   * Executes a command\n\t   *\n\t   * A user executes a command on a device owned by anyone who granted him the right authorizations.\n\t   * The command is issued on channel 'command'\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'execute',\n\t\t\tvalue: function execute(_ref37) {\n\t\t\t\tvar resource = _ref37.resource;\n\t\t\t\tvar cmd = _ref37.cmd;\n\t\t\t\tvar data = _ref37.data;\n\t\t\t\tvar owner = _ref37.owner;\n\t\t\t\tthis.$publish('execute', { resource: resource, cmd: cmd, data: data, owner: owner });\n\t\t\t}\n\t\t\t/**\n\t   * Requests capabilities\n\t   *\n\t   * A user requests all his devices for the whole list of their capabilities.\n\t   * Devices are expected to answer on channel 'capabilities'\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'getCapabilities',\n\t\t\tvalue: function getCapabilities(_ref38) {\n\t\t\t\t_objectDestructuringEmpty(_ref38);\n\t\n\t\t\t\tthis.$publish('getCapabilities', {});\n\t\t\t}\n\t\t\t/**\n\t   * Notifies of some event\n\t   *\n\t   * A device notifies the registered users/devices on this channel.\n\t   * The server forwards the notification to said users.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'notify',\n\t\t\tvalue: function notify(_ref39) {\n\t\t\t\tvar cmd = _ref39.cmd;\n\t\t\t\tvar data = _ref39.data;\n\t\t\t\tvar from = _ref39.from;\n\t\t\t\tvar fromResource = _ref39.fromResource;\n\t\t\t\tvar owner = _ref39.owner;\n\t\t\t\tvar resource = _ref39.resource;\n\t\t\t\tthis.$publish('notify', { cmd: cmd, data: data, from: from, fromResource: fromResource, owner: owner, resource: resource });\n\t\t\t}\n\t\t\t/**\n\t   * Pings devices\n\t   *\n\t   * A user requests all devices (of all owners) on which he has authorizations to respond on channel 'pong'\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'ping',\n\t\t\tvalue: function ping(_ref40) {\n\t\t\t\tvar action = _ref40.action;\n\t\t\t\tthis.$publish('ping', { action: action });\n\t\t\t}\n\t\t\t/**Response to ping*/\n\t\n\t\t}, {\n\t\t\tkey: 'pong',\n\t\t\tvalue: function pong(_ref41) {\n\t\t\t\tvar action = _ref41.action;\n\t\t\t\tvar available = _ref41.available;\n\t\t\t\tvar owner = _ref41.owner;\n\t\t\t\tvar resource = _ref41.resource;\n\t\t\t\tvar uid = _ref41.uid;\n\t\t\t\tvar user = _ref41.user;\n\t\t\t\tthis.$publish('pong', { action: action, available: available, owner: owner, resource: resource, uid: uid, user: user });\n\t\t\t}\n\t\t\t/**\n\t   * Removes a listener\n\t   *\n\t   * A user stops requesting notifications from a device owned by anyone who granted him the right authorizations\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'removeListener',\n\t\t\tvalue: function removeListener(_ref42) {\n\t\t\t\tvar cmd = _ref42.cmd;\n\t\t\t\tvar data = _ref42.data;\n\t\t\t\tvar from = _ref42.from;\n\t\t\t\tvar fromResource = _ref42.fromResource;\n\t\t\t\tvar owner = _ref42.owner;\n\t\t\t\tvar resource = _ref42.resource;\n\t\t\t\tthis.$publish('removeListener', { cmd: cmd, data: data, from: from, fromResource: fromResource, owner: owner, resource: resource });\n\t\t\t}\n\t\t}], [{\n\t\t\tkey: 'DEFAULT_DEPLOYMENT_ID',\n\t\n\t\t\t/**\n\t   * Get default deployment id associated to RemotingService\n\t   * @return {string}\n\t   */\n\t\t\tget: function get() {\n\t\t\t\treturn 'groups_0';\n\t\t\t}\n\t\t}]);\n\t\n\t\treturn Remoting;\n\t}(Service);\n\t/**\n\t * User API for groups and rights.\n\t *\n\t * Groups are stored per user.\n\t * This means that two users can own a group with the same identifier. A couple (owner, group) is needed to uniquely identify a group inside a group management service.\n\t * The triplet (deploymentId, owner, group) is actually needed to fully qualify a group outside of the scope of this service.\n\t * @access public\n\t * */\n\t\n\t\n\texports.Remoting = Remoting;\n\t\n\tvar GroupManagement = exports.GroupManagement = function (_Service8) {\n\t\t_inherits(GroupManagement, _Service8);\n\t\n\t\tfunction GroupManagement() {\n\t\t\t_classCallCheck(this, GroupManagement);\n\t\n\t\t\treturn _possibleConstructorReturn(this, Object.getPrototypeOf(GroupManagement).apply(this, arguments));\n\t\t}\n\t\n\t\t_createClass(GroupManagement, [{\n\t\t\tkey: 'addMe',\n\t\n\t\t\t/**\n\t   * Adds me to a group\n\t   *\n\t   * Adds me (the caller) to a group.\n\t   * This verb exists so that group owners may grant the right to join their groups without granting the right to add other users to those groups.\n\t   * The 'user' field is implicitly set to the current user's key.\n\t   * */\n\t\t\tvalue: function addMe(_ref43) {\n\t\t\t\tvar group = _ref43.group;\n\t\t\t\tvar owner = _ref43.owner;\n\t\t\t\tthis.$publish('addMe', { group: group, owner: owner });\n\t\t\t}\n\t\t\t/**\n\t   * Adds a user to a group\n\t   *\n\t   * Adds the given user to the given group.\n\t   * Addition may fail if the given group does not already exist.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'addUser',\n\t\t\tvalue: function addUser(_ref44) {\n\t\t\t\tvar user = _ref44.user;\n\t\t\t\tvar group = _ref44.group;\n\t\t\t\tvar owner = _ref44.owner;\n\t\t\t\tthis.$publish('addUser', { user: user, group: group, owner: owner });\n\t\t\t}\n\t\t\t/**Adds users to a group*/\n\t\n\t\t}, {\n\t\t\tkey: 'addUsers',\n\t\t\tvalue: function addUsers(_ref45) {\n\t\t\t\tvar users = _ref45.users;\n\t\t\t\tvar group = _ref45.group;\n\t\t\t\tvar owner = _ref45.owner;\n\t\t\t\tthis.$publish('addUsers', { users: users, group: group, owner: owner });\n\t\t\t}\n\t\t\t/**\n\t   * Lists my owned groups, with details\n\t   *\n\t   * Returns the whole list of groups owned by the current user, with their members\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'allGroups',\n\t\t\tvalue: function allGroups(_ref46) {\n\t\t\t\tvar owner = _ref46.owner;\n\t\t\t\tthis.$publish('allGroups', { owner: owner });\n\t\t\t}\n\t\t\t/**\n\t   * Creates a group\n\t   *\n\t   * Creates a group owned by the current user.\n\t   * Group creation may fail if the group already exists.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'createGroup',\n\t\t\tvalue: function createGroup(_ref47) {\n\t\t\t\tvar group = _ref47.group;\n\t\t\t\tvar groupName = _ref47.groupName;\n\t\t\t\tvar owner = _ref47.owner;\n\t\t\t\tthis.$publish('createGroup', { group: group, groupName: groupName, owner: owner });\n\t\t\t}\n\t\t\t/**\n\t   * Removes a group\n\t   *\n\t   * Removes the given group owned by the current user or the given owner.\n\t   * Also removes all grants to that group.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'delGroup',\n\t\t\tvalue: function delGroup(_ref48) {\n\t\t\t\tvar group = _ref48.group;\n\t\t\t\tvar owner = _ref48.owner;\n\t\t\t\tthis.$publish('delGroup', { group: group, owner: owner });\n\t\t\t}\n\t\t\t/**Removes a user from a group*/\n\t\n\t\t}, {\n\t\t\tkey: 'delUser',\n\t\t\tvalue: function delUser(_ref49) {\n\t\t\t\tvar group = _ref49.group;\n\t\t\t\tvar owner = _ref49.owner;\n\t\t\t\tvar user = _ref49.user;\n\t\t\t\tthis.$publish('delUser', { group: group, owner: owner, user: user });\n\t\t\t}\n\t\t\t/**Removes users from a group*/\n\t\n\t\t}, {\n\t\t\tkey: 'delUsers',\n\t\t\tvalue: function delUsers(_ref50) {\n\t\t\t\tvar group = _ref50.group;\n\t\t\t\tvar groupName = _ref50.groupName;\n\t\t\t\tvar owner = _ref50.owner;\n\t\t\t\tvar users = _ref50.users;\n\t\t\t\tthis.$publish('delUsers', { group: group, groupName: groupName, owner: owner, users: users });\n\t\t\t}\n\t\t\t/**\n\t   * Tests for a group's existence\n\t   *\n\t   * Returns whether a group exists or not.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'exists',\n\t\t\tvalue: function exists(_ref51) {\n\t\t\t\tvar group = _ref51.group;\n\t\t\t\tvar owner = _ref51.owner;\n\t\t\t\tthis.$publish('exists', { group: group, owner: owner });\n\t\t\t}\n\t\t\t/**\n\t   * Grants a right to a group\n\t   *\n\t   * The granting API does not do any check when storing permissions.\n\t   * In particular when granting rights on a verb and resource of another API, the existence of said verb and resource is not checked.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'grant',\n\t\t\tvalue: function grant(_ref52) {\n\t\t\t\tvar action = _ref52.action;\n\t\t\t\tvar group = _ref52.group;\n\t\t\t\tvar owner = _ref52.owner;\n\t\t\t\tvar resource = _ref52.resource;\n\t\t\t\tthis.$publish('grant', { action: action, group: group, owner: owner, resource: resource });\n\t\t\t}\n\t\t\t/**\n\t   * Lists the group users\n\t   *\n\t   * Returns the whole list of users configured inside the given group.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'groupUsers',\n\t\t\tvalue: function groupUsers(_ref53) {\n\t\t\t\tvar group = _ref53.group;\n\t\t\t\tvar owner = _ref53.owner;\n\t\t\t\tthis.$publish('groupUsers', { group: group, owner: owner });\n\t\t\t}\n\t\t\t/**\n\t   * Lists my owned groups\n\t   *\n\t   * Returns the whole list of groups owned by the current user\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'groups',\n\t\t\tvalue: function groups(_ref54) {\n\t\t\t\tvar owner = _ref54.owner;\n\t\t\t\tthis.$publish('groups', { owner: owner });\n\t\t\t}\n\t\t\t/**\n\t   * Lists rights for a group\n\t   *\n\t   * This API lists explicitly configured rights.\n\t   * Effective rights include configured rights, implicit rights and inherited rights.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'listGrants',\n\t\t\tvalue: function listGrants(_ref55) {\n\t\t\t\tvar group = _ref55.group;\n\t\t\t\tvar owner = _ref55.owner;\n\t\t\t\tthis.$publish('listGrants', { group: group, owner: owner });\n\t\t\t}\n\t\t\t/**\n\t   * Lists presences for a group\n\t   *\n\t   * Returns the list of members of the given groups, along with their actual and current presence on the zetapush server.\n\t   * The current implementation does not include information about the particular devices users are connected with.\n\t   * If a user is connected twice with two different devices, two identical entries will be returned.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'listPresences',\n\t\t\tvalue: function listPresences(_ref56) {\n\t\t\t\tvar group = _ref56.group;\n\t\t\t\tvar owner = _ref56.owner;\n\t\t\t\tthis.$publish('listPresences', { group: group, owner: owner });\n\t\t\t}\n\t\t\t/**\n\t   * Tests membership\n\t   *\n\t   * Tests whether I (the caller) am a member of the given group.\n\t   * This verb exists so that users can determine if they are part of a group without being granted particular rights.\n\t   * The 'user' field is implicitly set to the current user's key.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'memberOf',\n\t\t\tvalue: function memberOf(_ref57) {\n\t\t\t\tvar hardFail = _ref57.hardFail;\n\t\t\t\tvar group = _ref57.group;\n\t\t\t\tvar owner = _ref57.owner;\n\t\t\t\tthis.$publish('memberOf', { hardFail: hardFail, group: group, owner: owner });\n\t\t\t}\n\t\t\t/**\n\t   * Grants rights to a group\n\t   *\n\t   * Grant several rights at once.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'mgrant',\n\t\t\tvalue: function mgrant(_ref58) {\n\t\t\t\tvar actions = _ref58.actions;\n\t\t\t\tvar group = _ref58.group;\n\t\t\t\tvar owner = _ref58.owner;\n\t\t\t\tvar resource = _ref58.resource;\n\t\t\t\tthis.$publish('mgrant', { actions: actions, group: group, owner: owner, resource: resource });\n\t\t\t}\n\t\t\t/**Revokes rights for a group*/\n\t\n\t\t}, {\n\t\t\tkey: 'mrevoke',\n\t\t\tvalue: function mrevoke(_ref59) {\n\t\t\t\tvar actions = _ref59.actions;\n\t\t\t\tvar group = _ref59.group;\n\t\t\t\tvar owner = _ref59.owner;\n\t\t\t\tvar resource = _ref59.resource;\n\t\t\t\tthis.$publish('mrevoke', { actions: actions, group: group, owner: owner, resource: resource });\n\t\t\t}\n\t\t\t/**\n\t   * Lists the groups I am part of\n\t   *\n\t   * Returns the whole list of groups the current user is part of.\n\t   * Groups may be owned by anyone, including the current user.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'myGroups',\n\t\t\tvalue: function myGroups(_ref60) {\n\t\t\t\tvar owner = _ref60.owner;\n\t\t\t\tthis.$publish('myGroups', { owner: owner });\n\t\t\t}\n\t\t\t/**Revokes a right for a group*/\n\t\n\t\t}, {\n\t\t\tkey: 'revoke',\n\t\t\tvalue: function revoke(_ref61) {\n\t\t\t\tvar action = _ref61.action;\n\t\t\t\tvar group = _ref61.group;\n\t\t\t\tvar owner = _ref61.owner;\n\t\t\t\tvar resource = _ref61.resource;\n\t\t\t\tthis.$publish('revoke', { action: action, group: group, owner: owner, resource: resource });\n\t\t\t}\n\t\t}], [{\n\t\t\tkey: 'DEFAULT_DEPLOYMENT_ID',\n\t\n\t\t\t/**\n\t   * Get default deployment id associated to GroupManagementService\n\t   * @return {string}\n\t   */\n\t\t\tget: function get() {\n\t\t\t\treturn 'groups_0';\n\t\t\t}\n\t\t}]);\n\t\n\t\treturn GroupManagement;\n\t}(Service);\n\t/**\n\t * HTTP client\n\t *\n\t * Web-service client\n\t *  An admin records URL templates that can be called by users\n\t *  Calls are not configurable by end-users\n\t *  However an admin may leverage the macro service to achieve URL, headers and body configurability\n\t * */\n\t/**\n\t * User API for http requests\n\t *\n\t * @access public\n\t * */\n\t\n\t\n\tvar Httpclient = exports.Httpclient = function (_Service9) {\n\t\t_inherits(Httpclient, _Service9);\n\t\n\t\tfunction Httpclient() {\n\t\t\t_classCallCheck(this, Httpclient);\n\t\n\t\t\treturn _possibleConstructorReturn(this, Object.getPrototypeOf(Httpclient).apply(this, arguments));\n\t\t}\n\t\n\t\t_createClass(Httpclient, [{\n\t\t\tkey: 'call',\n\t\n\t\t\t/**\n\t   * Makes a predefined request\n\t   *\n\t   * Lookups a predefined request by name, and executes it.\n\t   * */\n\t\t\tvalue: function call(_ref62) {\n\t\t\t\tvar name = _ref62.name;\n\t\t\t\tvar requestId = _ref62.requestId;\n\t\t\t\tthis.$publish('call', { name: name, requestId: requestId });\n\t\t\t}\n\t\t\t/**\n\t   * Makes a parameterized request\n\t   *\n\t   * Executes an HTTP request with the given url, method, headers and body.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'request',\n\t\t\tvalue: function request(_ref63) {\n\t\t\t\t_objectDestructuringEmpty(_ref63);\n\t\n\t\t\t\tthis.$publish('request', {});\n\t\t\t}\n\t\t}], [{\n\t\t\tkey: 'DEFAULT_DEPLOYMENT_ID',\n\t\n\t\t\t/**\n\t   * Get default deployment id associated to HttpclientService\n\t   * @return {string}\n\t   */\n\t\t\tget: function get() {\n\t\t\t\treturn 'httpclient_0';\n\t\t\t}\n\t\t}]);\n\t\n\t\treturn Httpclient;\n\t}(Service);\n\t/**\n\t * Macros\n\t *\n\t * Macro-command service\n\t *  An admin defines macro-commands that can sequentially call any number of other api verbs, loop on collections of data, make decisions, etc\n\t *\n\t *\n\t *  End-users play them, with contextual parameters\n\t * */\n\t/**\n\t * User API for macro execution\n\t *\n\t * Simple errors are reported as usual.\n\t * However, the macro execution verbs treat most errors in a particular way : instead of reporting errors on the usual 'error' channel, errors are put in the returned 'MacroCompletion' result.\n\t * This behavior can be tuned on a per-call basis with the hardFail parameter.\n\t * Note that some particular errors will always behave as if hardFail were true, because they are related to programming errors, or prevent processing from ending gracefully : STACK_OVERFLOW, NO_SUCH_FUNCTION, RAM_EXCEEDED, CYCLES_EXCEEDED, TIME_EXCEEDED, QUOTA_EXCEEDED, RATE_EXCEEDED, BAD_COMPARATOR_VALUE\n\t * @access public\n\t * */\n\t\n\t\n\tvar Macro = exports.Macro = function (_Service10) {\n\t\t_inherits(Macro, _Service10);\n\t\n\t\tfunction Macro() {\n\t\t\t_classCallCheck(this, Macro);\n\t\n\t\t\treturn _possibleConstructorReturn(this, Object.getPrototypeOf(Macro).apply(this, arguments));\n\t\t}\n\t\n\t\t_createClass(Macro, [{\n\t\t\tkey: 'call',\n\t\n\t\t\t/**\n\t   * Plays a previously recorded macro\n\t   *\n\t   * DO NOT use this verb from inside an enclosing macro when you need the result in order to proceed with the enclosing macro.\n\t   * You can override the default notification channel when defining the macro.\n\t   * */\n\t\t\tvalue: function call(_ref64) {\n\t\t\t\tvar debug = _ref64.debug;\n\t\t\t\tvar hardFail = _ref64.hardFail;\n\t\t\t\tvar name = _ref64.name;\n\t\t\t\tvar parameters = _ref64.parameters;\n\t\t\t\tthis.$publish('call', { debug: debug, hardFail: hardFail, name: name, parameters: parameters });\n\t\t\t}\n\t\t\t/**\n\t   * Plays a previously recorded macro and returns the result.\n\t   *\n\t   * Use this verb when you want to synchronously call a macro from inside another macro.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'func',\n\t\t\tvalue: function func(_ref65) {\n\t\t\t\t_objectDestructuringEmpty(_ref65);\n\t\n\t\t\t\tthis.$publish('func', {});\n\t\t\t}\n\t\t\t/**\n\t   * Similar to func, with the ability to impersonate any user at will.\n\t   *\n\t   * Use this verb when you do not want to use or cannot use the standard rights system and wish to bypass it completely.\n\t   * Use this verb sparingly, as it can give the caller any right on any resource.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'sudo',\n\t\t\tvalue: function sudo(_ref66) {\n\t\t\t\t_objectDestructuringEmpty(_ref66);\n\t\n\t\t\t\tthis.$publish('sudo', {});\n\t\t\t}\n\t\t}], [{\n\t\t\tkey: 'DEFAULT_DEPLOYMENT_ID',\n\t\n\t\t\t/**\n\t   * Get default deployment id associated to MacroService\n\t   * @return {string}\n\t   */\n\t\t\tget: function get() {\n\t\t\t\treturn 'macro_0';\n\t\t\t}\n\t\t}]);\n\t\n\t\treturn Macro;\n\t}(Service);\n\t/**\n\t * Mail sender\n\t *\n\t * Sends email through SMTP\n\t * */\n\t/**\n\t * Mail service user API\n\t *\n\t * This service is statically configured with an outgoing SMTP server.\n\t * Users call the API here to actually send emails.\n\t * @access public\n\t * */\n\t\n\t\n\tvar Sendmail = exports.Sendmail = function (_Service11) {\n\t\t_inherits(Sendmail, _Service11);\n\t\n\t\tfunction Sendmail() {\n\t\t\t_classCallCheck(this, Sendmail);\n\t\n\t\t\treturn _possibleConstructorReturn(this, Object.getPrototypeOf(Sendmail).apply(this, arguments));\n\t\t}\n\t\n\t\t_createClass(Sendmail, [{\n\t\t\tkey: 'send',\n\t\n\t\t\t/**\n\t   * Sends an email\n\t   *\n\t   * Sends an email with the given body to the intended recipients.\n\t   * */\n\t\t\tvalue: function send(_ref67) {\n\t\t\t\t_objectDestructuringEmpty(_ref67);\n\t\n\t\t\t\tthis.$publish('send', {});\n\t\t\t}\n\t\t}], [{\n\t\t\tkey: 'DEFAULT_DEPLOYMENT_ID',\n\t\n\t\t\t/**\n\t   * Get default deployment id associated to SendmailService\n\t   * @return {string}\n\t   */\n\t\t\tget: function get() {\n\t\t\t\treturn 'sendmail_0';\n\t\t\t}\n\t\t}]);\n\t\n\t\treturn Sendmail;\n\t}(Service);\n\t/**\n\t * Messaging service\n\t *\n\t * Messaging service\n\t * */\n\t/**\n\t * Messaging service\n\t *\n\t * Simple and flexible user-to-user or user-to-group messaging service.\n\t * @access public\n\t * */\n\t\n\t\n\tvar Messaging = exports.Messaging = function (_Service12) {\n\t\t_inherits(Messaging, _Service12);\n\t\n\t\tfunction Messaging() {\n\t\t\t_classCallCheck(this, Messaging);\n\t\n\t\t\treturn _possibleConstructorReturn(this, Object.getPrototypeOf(Messaging).apply(this, arguments));\n\t\t}\n\t\n\t\t_createClass(Messaging, [{\n\t\t\tkey: 'send',\n\t\n\t\t\t/**\n\t   * Sends a message to a target\n\t   *\n\t   * Sends the given message to the specified target on the given (optional) channel.\n\t   * The administratively given default channel name is used when none is provided in the message itself.\n\t   * */\n\t\t\tvalue: function send(_ref68) {\n\t\t\t\tvar target = _ref68.target;\n\t\t\t\tvar channel = _ref68.channel;\n\t\t\t\tvar data = _ref68.data;\n\t\t\t\tthis.$publish('send', { target: target, channel: channel, data: data });\n\t\t\t}\n\t\t}], [{\n\t\t\tkey: 'DEFAULT_DEPLOYMENT_ID',\n\t\n\t\t\t/**\n\t   * Get default deployment id associated to MessagingService\n\t   * @return {string}\n\t   */\n\t\t\tget: function get() {\n\t\t\t\treturn 'messaging_0';\n\t\t\t}\n\t\t}]);\n\t\n\t\treturn Messaging;\n\t}(Service);\n\t/**\n\t * Producer consumer\n\t *\n\t * Producer consumer service\n\t *  Users can submit tasks and other users consume them\n\t * */\n\t/**\n\t * Producer / consumer real-time API\n\t *\n\t * Task producers submits their tasks.\n\t * The server dispatches the tasks.\n\t * Consumers process them and report completion back to the server.\n\t * Tasks are global to the service (i.e. NOT per user).\n\t * @access public\n\t * */\n\t\n\t\n\tvar Queue = exports.Queue = function (_Service13) {\n\t\t_inherits(Queue, _Service13);\n\t\n\t\tfunction Queue() {\n\t\t\t_classCallCheck(this, Queue);\n\t\n\t\t\treturn _possibleConstructorReturn(this, Object.getPrototypeOf(Queue).apply(this, arguments));\n\t\t}\n\t\n\t\t_createClass(Queue, [{\n\t\t\tkey: 'call',\n\t\n\t\t\t/**\n\t   * Submits a task\n\t   *\n\t   * Producer API.\n\t   * A task producer submits the given task to the server.\n\t   * The server will find a tasker with processing capacity and dispatch the task.\n\t   * The task result will be returned to the caller.\n\t   * When called from inside a macro, the comsumer generated result is available for further use.\n\t   * */\n\t\t\tvalue: function call(_ref69) {\n\t\t\t\tvar description = _ref69.description;\n\t\t\t\tvar originBusinessId = _ref69.originBusinessId;\n\t\t\t\tvar originDeploymentId = _ref69.originDeploymentId;\n\t\t\t\tvar data = _ref69.data;\n\t\t\t\tvar owner = _ref69.owner;\n\t\t\t\tthis.$publish('call', { description: description, originBusinessId: originBusinessId, originDeploymentId: originDeploymentId, data: data, owner: owner });\n\t\t\t}\n\t\t\t/**\n\t   * Notifies completion of a task\n\t   *\n\t   * Consumer API.\n\t   * The tasker notifies completion of the given task to the server.\n\t   * The tasker can optionally include a result or an error code.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'done',\n\t\t\tvalue: function done(_ref70) {\n\t\t\t\tvar result = _ref70.result;\n\t\t\t\tvar success = _ref70.success;\n\t\t\t\tvar taskId = _ref70.taskId;\n\t\t\t\tthis.$publish('done', { result: result, success: success, taskId: taskId });\n\t\t\t}\n\t\t\t/**\n\t   * Registers a consumer\n\t   *\n\t   * Consumer API.\n\t   * Registers the current user resource as an available task consumer.\n\t   * Tasks will be then dispatched to that consumer.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'register',\n\t\t\tvalue: function register(_ref71) {\n\t\t\t\tvar capacity = _ref71.capacity;\n\t\t\t\tthis.$publish('register', { capacity: capacity });\n\t\t\t}\n\t\t\t/**\n\t   * Submits a task\n\t   *\n\t   * Producer API.\n\t   * A task producer submits the given task to the server.\n\t   * The server will find a tasker with processing capacity and dispatch the task.\n\t   * The task result will be ignored : the producer will not receive any notification of any kind, even in case of errors (including capacity exceeded errors).\n\t   * This verb will return immediately : you can use this API to asynchronously submit a task.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'submit',\n\t\t\tvalue: function submit(_ref72) {\n\t\t\t\tvar description = _ref72.description;\n\t\t\t\tvar originBusinessId = _ref72.originBusinessId;\n\t\t\t\tvar originDeploymentId = _ref72.originDeploymentId;\n\t\t\t\tvar data = _ref72.data;\n\t\t\t\tvar owner = _ref72.owner;\n\t\t\t\tthis.$publish('submit', { description: description, originBusinessId: originBusinessId, originDeploymentId: originDeploymentId, data: data, owner: owner });\n\t\t\t}\n\t\t\t/**\n\t   * Unregisters a consumer\n\t   *\n\t   * Consumer API.\n\t   * Unregisters the current user resource as an available task consumer.\n\t   * All non finished tasks are returned to the server.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'unregister',\n\t\t\tvalue: function unregister(_ref73) {\n\t\t\t\t_objectDestructuringEmpty(_ref73);\n\t\n\t\t\t\tthis.$publish('unregister', {});\n\t\t\t}\n\t\t}], [{\n\t\t\tkey: 'DEFAULT_DEPLOYMENT_ID',\n\t\n\t\t\t/**\n\t   * Get default deployment id associated to QueueService\n\t   * @return {string}\n\t   */\n\t\t\tget: function get() {\n\t\t\t\treturn 'queue_0';\n\t\t\t}\n\t\t}]);\n\t\n\t\treturn Queue;\n\t}(Service);\n\t/**\n\t * SMS via OVH\n\t *\n\t * SMS sender, to send text messages to mobile phones\n\t * This SMS sending service uses the OVH API\n\t *\n\t * */\n\t/**\n\t * SMS service\n\t *\n\t * User API for SMS.\n\t * @access public\n\t * */\n\t\n\t\n\tvar Sms_ovh = exports.Sms_ovh = function (_Service14) {\n\t\t_inherits(Sms_ovh, _Service14);\n\t\n\t\tfunction Sms_ovh() {\n\t\t\t_classCallCheck(this, Sms_ovh);\n\t\n\t\t\treturn _possibleConstructorReturn(this, Object.getPrototypeOf(Sms_ovh).apply(this, arguments));\n\t\t}\n\t\n\t\t_createClass(Sms_ovh, [{\n\t\t\tkey: 'send',\n\t\n\t\t\t/**\n\t   * Sends an SMS\n\t   *\n\t   * Sends the given message to the given recipients.\n\t   * */\n\t\t\tvalue: function send(_ref74) {\n\t\t\t\t_objectDestructuringEmpty(_ref74);\n\t\n\t\t\t\tthis.$publish('send', {});\n\t\t\t}\n\t\t}], [{\n\t\t\tkey: 'DEFAULT_DEPLOYMENT_ID',\n\t\n\t\t\t/**\n\t   * Get default deployment id associated to Sms_ovhService\n\t   * @return {string}\n\t   */\n\t\t\tget: function get() {\n\t\t\t\treturn 'sms_ovh_0';\n\t\t\t}\n\t\t}]);\n\t\n\t\treturn Sms_ovh;\n\t}(Service);\n\t/**\n\t * Scheduler\n\t *\n\t * Scheduler service\n\t *  End-users can schedule one-time or repetitive tasks using a classical cron syntax (with the year field) or a timestamp (milliseconds from the epoch)\n\t * */\n\t/**\n\t * User API for the Scheduler\n\t *\n\t * User endpoints for scheduling : users can schedule, list and delete tasks.\n\t * Tasks are stored on a per-user basis: a task will run with the priviledges of the user who stored it.\n\t * Tasks are run on the server and thus can call api verbs marked as server-only.\n\t * @access public\n\t * */\n\t\n\t\n\tvar Cron = exports.Cron = function (_Service15) {\n\t\t_inherits(Cron, _Service15);\n\t\n\t\tfunction Cron() {\n\t\t\t_classCallCheck(this, Cron);\n\t\n\t\t\treturn _possibleConstructorReturn(this, Object.getPrototypeOf(Cron).apply(this, arguments));\n\t\t}\n\t\n\t\t_createClass(Cron, [{\n\t\t\tkey: 'list',\n\t\n\t\t\t/**\n\t   * List the configured tasks\n\t   *\n\t   * Returns a paginated list of the asking user's tasks.\n\t   * */\n\t\t\tvalue: function list(_ref75) {\n\t\t\t\tvar owner = _ref75.owner;\n\t\t\t\tvar page = _ref75.page;\n\t\t\t\tvar start = _ref75.start;\n\t\t\t\tvar stop = _ref75.stop;\n\t\t\t\tthis.$publish('list', { owner: owner, page: page, start: start, stop: stop });\n\t\t\t}\n\t\t\t/**\n\t   * Schedules a task\n\t   *\n\t   * Schedules a task for later execution.\n\t   * If a task already exists with the same cronName, this new task completely replaces it.\n\t   * A task can be scheduled with a cron-like syntax for repetitive or one-shot execution.\n\t   * Wildcards are not allowed for minutes and hours.\n\t   * When scheduling for one-shot execution, the time must be at least two minutes into the future.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'schedule',\n\t\t\tvalue: function schedule(_ref76) {\n\t\t\t\t_objectDestructuringEmpty(_ref76);\n\t\n\t\t\t\tthis.$publish('schedule', {});\n\t\t\t}\n\t\t\t/**\n\t   * Removes a scheduled task\n\t   *\n\t   * Removes a previously scheduled task.\n\t   * Does absolutely nothing if asked to remove a non-existent task.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'unschedule',\n\t\t\tvalue: function unschedule(_ref77) {\n\t\t\t\tvar cronName = _ref77.cronName;\n\t\t\t\tvar owner = _ref77.owner;\n\t\t\t\tthis.$publish('unschedule', { cronName: cronName, owner: owner });\n\t\t\t}\n\t\t}], [{\n\t\t\tkey: 'DEFAULT_DEPLOYMENT_ID',\n\t\n\t\t\t/**\n\t   * Get default deployment id associated to CronService\n\t   * @return {string}\n\t   */\n\t\t\tget: function get() {\n\t\t\t\treturn 'cron_0';\n\t\t\t}\n\t\t}]);\n\t\n\t\treturn Cron;\n\t}(Service);\n\t/**\n\t * Search engine\n\t *\n\t * ElasticSearch engine, to index and search data\n\t *  An admin creates indices\n\t *  Users index and search documents\n\t *\n\t * */\n\t/**\n\t * ElasticSearch Service\n\t *\n\t * This API is a very thin wrapper around ElasticSearch's API.\n\t * @access public\n\t * */\n\t\n\t\n\tvar Search = function (_Service16) {\n\t\t_inherits(Search, _Service16);\n\t\n\t\tfunction Search() {\n\t\t\t_classCallCheck(this, Search);\n\t\n\t\t\treturn _possibleConstructorReturn(this, Object.getPrototypeOf(Search).apply(this, arguments));\n\t\t}\n\t\n\t\t_createClass(Search, [{\n\t\t\tkey: 'delete',\n\t\n\t\t\t/**\n\t   * Deletes data\n\t   *\n\t   * Deletes a document from the elasticsearch engine by id.\n\t   * */\n\t\t\tvalue: function _delete(_ref78) {\n\t\t\t\tvar id = _ref78.id;\n\t\t\t\tvar index = _ref78.index;\n\t\t\t\tvar type = _ref78.type;\n\t\t\t\tthis.$publish('delete', { id: id, index: index, type: type });\n\t\t\t}\n\t\t\t/**\n\t   * Gets data\n\t   *\n\t   * Retrieves a document from the elasticsearch engine by id.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'get',\n\t\t\tvalue: function get(_ref79) {\n\t\t\t\tvar id = _ref79.id;\n\t\t\t\tvar index = _ref79.index;\n\t\t\t\tvar type = _ref79.type;\n\t\t\t\tthis.$publish('get', { id: id, index: index, type: type });\n\t\t\t}\n\t\t\t/**\n\t   * Indexes data\n\t   *\n\t   * Inserts or updates a document into the elasticsearch engine.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'index',\n\t\t\tvalue: function index(_ref80) {\n\t\t\t\tvar data = _ref80.data;\n\t\t\t\tvar id = _ref80.id;\n\t\t\t\tvar _index = _ref80.index;\n\t\t\t\tvar type = _ref80.type;\n\t\t\t\tthis.$publish('index', { data: data, id: id, index: _index, type: type });\n\t\t\t}\n\t\t\t/**Searches for data*/\n\t\n\t\t}, {\n\t\t\tkey: 'search',\n\t\t\tvalue: function search(_ref81) {\n\t\t\t\tvar indices = _ref81.indices;\n\t\t\t\tvar page = _ref81.page;\n\t\t\t\tvar query = _ref81.query;\n\t\t\t\tvar sort = _ref81.sort;\n\t\t\t\tthis.$publish('search', { indices: indices, page: page, query: query, sort: sort });\n\t\t\t}\n\t\t}], [{\n\t\t\tkey: 'DEFAULT_DEPLOYMENT_ID',\n\t\n\t\t\t/**\n\t   * Get default deployment id associated to SearchService\n\t   * @return {string}\n\t   */\n\t\t\tget: function get() {\n\t\t\t\treturn 'search_0';\n\t\t\t}\n\t\t}]);\n\t\n\t\treturn Search;\n\t}(Service);\n\t/**\n\t * Template engine\n\t *\n\t * Template engine to produce documents from parameterized templates\n\t * <br>An admin creates templates\n\t * <br> Users produce documents\n\t * <br>The implementation uses the <a href='http://freemarker\n\t * org/'>freemarker</a> engine\n\t *\n\t * */\n\t/**\n\t * User API for templates\n\t *\n\t * Users use this API to evaluate pre-configured templates.\n\t * @access public\n\t * */\n\t\n\t\n\texports.Search = Search;\n\t\n\tvar Template = exports.Template = function (_Service17) {\n\t\t_inherits(Template, _Service17);\n\t\n\t\tfunction Template() {\n\t\t\t_classCallCheck(this, Template);\n\t\n\t\t\treturn _possibleConstructorReturn(this, Object.getPrototypeOf(Template).apply(this, arguments));\n\t\t}\n\t\n\t\t_createClass(Template, [{\n\t\t\tkey: 'evaluate',\n\t\n\t\t\t/**\n\t   * Evaluates a template\n\t   *\n\t   * Evaluates the given template and returns the result as a string.\n\t   * Templates are parsed the first time they are evaluated. Evaluation may fail early due to a parsing error.\n\t   * */\n\t\t\tvalue: function evaluate(_ref82) {\n\t\t\t\tvar data = _ref82.data;\n\t\t\t\tvar languageTag = _ref82.languageTag;\n\t\t\t\tvar name = _ref82.name;\n\t\t\t\tvar requestId = _ref82.requestId;\n\t\t\t\tthis.$publish('evaluate', { data: data, languageTag: languageTag, name: name, requestId: requestId });\n\t\t\t}\n\t\t}], [{\n\t\t\tkey: 'DEFAULT_DEPLOYMENT_ID',\n\t\n\t\t\t/**\n\t   * Get default deployment id associated to TemplateService\n\t   * @return {string}\n\t   */\n\t\t\tget: function get() {\n\t\t\t\treturn 'template_0';\n\t\t\t}\n\t\t}]);\n\t\n\t\treturn Template;\n\t}(Service);\n\t/**\n\t * Upload: S3\n\t *\n\t * Upload service with S3 storage\n\t * */\n\t/**\n\t * User API for file management\n\t *\n\t * User API for virtual file management and http file upload\n\t * This API contains all the verbs needed to browse, upload and remove files.\n\t * Files are stored on a per-user basis: each user has his or her own whole virtual filesystem.\n\t * Uploading a file is a 3-step process : request an upload URL, upload via HTTP, notify this service of completion.\n\t * @access public\n\t * */\n\t\n\t\n\tvar Zpfs_s3 = exports.Zpfs_s3 = function (_Service18) {\n\t\t_inherits(Zpfs_s3, _Service18);\n\t\n\t\tfunction Zpfs_s3() {\n\t\t\t_classCallCheck(this, Zpfs_s3);\n\t\n\t\t\treturn _possibleConstructorReturn(this, Object.getPrototypeOf(Zpfs_s3).apply(this, arguments));\n\t\t}\n\t\n\t\t_createClass(Zpfs_s3, [{\n\t\t\tkey: 'cp',\n\t\n\t\t\t/**\n\t   * Copies a file\n\t   *\n\t   * Copies a file or folder (recursively) to a new location.\n\t   * May fail if the target location is not empty.\n\t   * */\n\t\t\tvalue: function cp(_ref83) {\n\t\t\t\tvar oldPath = _ref83.oldPath;\n\t\t\t\tvar owner = _ref83.owner;\n\t\t\t\tvar path = _ref83.path;\n\t\t\t\tthis.$publish('cp', { oldPath: oldPath, owner: owner, path: path });\n\t\t\t}\n\t\t\t/**\n\t   * Returns disk usage\n\t   *\n\t   * Returns an recursively aggregated number of used bytes, starting at the given path.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'du',\n\t\t\tvalue: function du(_ref84) {\n\t\t\t\tvar owner = _ref84.owner;\n\t\t\t\tvar path = _ref84.path;\n\t\t\t\tthis.$publish('du', { owner: owner, path: path });\n\t\t\t}\n\t\t\t/**Requests an upload URL without constraints.*/\n\t\n\t\t}, {\n\t\t\tkey: 'freeUploadUrl',\n\t\t\tvalue: function freeUploadUrl(_ref85) {\n\t\t\t\t_objectDestructuringEmpty(_ref85);\n\t\n\t\t\t\tthis.$publish('freeUploadUrl', {});\n\t\t\t}\n\t\t\t/**\n\t   * Links a file\n\t   *\n\t   * Links a file or folder to another location.\n\t   * May fail if the target location is not empty.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'link',\n\t\t\tvalue: function link(_ref86) {\n\t\t\t\tvar oldPath = _ref86.oldPath;\n\t\t\t\tvar owner = _ref86.owner;\n\t\t\t\tvar path = _ref86.path;\n\t\t\t\tthis.$publish('link', { oldPath: oldPath, owner: owner, path: path });\n\t\t\t}\n\t\t\t/**\n\t   * Lists a folder content\n\t   *\n\t   * Returns a paginated list of the folder's content.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'ls',\n\t\t\tvalue: function ls(_ref87) {\n\t\t\t\tvar folder = _ref87.folder;\n\t\t\t\tvar owner = _ref87.owner;\n\t\t\t\tvar page = _ref87.page;\n\t\t\t\tthis.$publish('ls', { folder: folder, owner: owner, page: page });\n\t\t\t}\n\t\t\t/**\n\t   * Creates a folder\n\t   *\n\t   * Creates a new folder.\n\t   * May fail if the target location is not empty.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'mkdir',\n\t\t\tvalue: function mkdir(_ref88) {\n\t\t\t\tvar folder = _ref88.folder;\n\t\t\t\tvar owner = _ref88.owner;\n\t\t\t\tvar parents = _ref88.parents;\n\t\t\t\tthis.$publish('mkdir', { folder: folder, owner: owner, parents: parents });\n\t\t\t}\n\t\t\t/**\n\t   * Moves a file\n\t   *\n\t   * Moves a file or folder (recursively) to a new location.\n\t   * May fail if the target location is not empty.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'mv',\n\t\t\tvalue: function mv(_ref89) {\n\t\t\t\tvar oldPath = _ref89.oldPath;\n\t\t\t\tvar owner = _ref89.owner;\n\t\t\t\tvar path = _ref89.path;\n\t\t\t\tthis.$publish('mv', { oldPath: oldPath, owner: owner, path: path });\n\t\t\t}\n\t\t\t/**\n\t   * Notifies of upload completion\n\t   *\n\t   * The client application calls this verb to notify that it's done uploading to the cloud.\n\t   * Calling that verb MAY trigger additional events such as thumbnail/metadata creation.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'newFile',\n\t\t\tvalue: function newFile(_ref90) {\n\t\t\t\tvar guid = _ref90.guid;\n\t\t\t\tvar metadata = _ref90.metadata;\n\t\t\t\tvar owner = _ref90.owner;\n\t\t\t\tvar tags = _ref90.tags;\n\t\t\t\tthis.$publish('newFile', { guid: guid, metadata: metadata, owner: owner, tags: tags });\n\t\t\t}\n\t\t\t/**\n\t   * Requests an upload URL\n\t   *\n\t   * Requests an HTTP upload URL.\n\t   * The URL contains temporary credentials (typically valid for a few minutes) and is meant for immediate use.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'newUploadUrl',\n\t\t\tvalue: function newUploadUrl(_ref91) {\n\t\t\t\tvar contentType = _ref91.contentType;\n\t\t\t\tvar owner = _ref91.owner;\n\t\t\t\tvar path = _ref91.path;\n\t\t\t\tthis.$publish('newUploadUrl', { contentType: contentType, owner: owner, path: path });\n\t\t\t}\n\t\t\t/**\n\t   * Removes a file\n\t   *\n\t   * Removes a file or folder (recursively).\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'rm',\n\t\t\tvalue: function rm(_ref92) {\n\t\t\t\tvar owner = _ref92.owner;\n\t\t\t\tvar path = _ref92.path;\n\t\t\t\tthis.$publish('rm', { owner: owner, path: path });\n\t\t\t}\n\t\t\t/**\n\t   * Returns information about a file\n\t   *\n\t   * Returns information about a single file.\n\t   * The entry field will be null if the path does not exist\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'stat',\n\t\t\tvalue: function stat(_ref93) {\n\t\t\t\tvar owner = _ref93.owner;\n\t\t\t\tvar path = _ref93.path;\n\t\t\t\tthis.$publish('stat', { owner: owner, path: path });\n\t\t\t}\n\t\t\t/**Updates a file's metadata*/\n\t\n\t\t}, {\n\t\t\tkey: 'updateMeta',\n\t\t\tvalue: function updateMeta(_ref94) {\n\t\t\t\tvar metadata = _ref94.metadata;\n\t\t\t\tvar metadataFiles = _ref94.metadataFiles;\n\t\t\t\tvar owner = _ref94.owner;\n\t\t\t\tvar path = _ref94.path;\n\t\t\t\tthis.$publish('updateMeta', { metadata: metadata, metadataFiles: metadataFiles, owner: owner, path: path });\n\t\t\t}\n\t\t}], [{\n\t\t\tkey: 'DEFAULT_DEPLOYMENT_ID',\n\t\n\t\t\t/**\n\t   * Get default deployment id associated to Zpfs_s3Service\n\t   * @return {string}\n\t   */\n\t\t\tget: function get() {\n\t\t\t\treturn 'zpfs_s3_0';\n\t\t\t}\n\t\t}]);\n\t\n\t\treturn Zpfs_s3;\n\t}(Service);\n\t/**\n\t * Upload: local\n\t *\n\t * Upload service with local HDFS storage\n\t * */\n\t/**\n\t * User API for file management\n\t *\n\t * User API for virtual file management and http file upload\n\t * This API contains all the verbs needed to browse, upload and remove files.\n\t * Files are stored on a per-user basis: each user has his or her own whole virtual filesystem.\n\t * Uploading a file is a 3-step process : request an upload URL, upload via HTTP, notify this service of completion.\n\t * @access public\n\t * */\n\t\n\t\n\tvar Zpfs_hdfs = exports.Zpfs_hdfs = function (_Service19) {\n\t\t_inherits(Zpfs_hdfs, _Service19);\n\t\n\t\tfunction Zpfs_hdfs() {\n\t\t\t_classCallCheck(this, Zpfs_hdfs);\n\t\n\t\t\treturn _possibleConstructorReturn(this, Object.getPrototypeOf(Zpfs_hdfs).apply(this, arguments));\n\t\t}\n\t\n\t\t_createClass(Zpfs_hdfs, [{\n\t\t\tkey: 'cp',\n\t\n\t\t\t/**\n\t   * Copies a file\n\t   *\n\t   * Copies a file or folder (recursively) to a new location.\n\t   * May fail if the target location is not empty.\n\t   * */\n\t\t\tvalue: function cp(_ref95) {\n\t\t\t\tvar oldPath = _ref95.oldPath;\n\t\t\t\tvar owner = _ref95.owner;\n\t\t\t\tvar path = _ref95.path;\n\t\t\t\tthis.$publish('cp', { oldPath: oldPath, owner: owner, path: path });\n\t\t\t}\n\t\t\t/**\n\t   * Returns disk usage\n\t   *\n\t   * Returns an recursively aggregated number of used bytes, starting at the given path.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'du',\n\t\t\tvalue: function du(_ref96) {\n\t\t\t\tvar owner = _ref96.owner;\n\t\t\t\tvar path = _ref96.path;\n\t\t\t\tthis.$publish('du', { owner: owner, path: path });\n\t\t\t}\n\t\t\t/**Requests an upload URL without constraints.*/\n\t\n\t\t}, {\n\t\t\tkey: 'freeUploadUrl',\n\t\t\tvalue: function freeUploadUrl(_ref97) {\n\t\t\t\t_objectDestructuringEmpty(_ref97);\n\t\n\t\t\t\tthis.$publish('freeUploadUrl', {});\n\t\t\t}\n\t\t\t/**\n\t   * Links a file\n\t   *\n\t   * Links a file or folder to another location.\n\t   * May fail if the target location is not empty.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'link',\n\t\t\tvalue: function link(_ref98) {\n\t\t\t\tvar oldPath = _ref98.oldPath;\n\t\t\t\tvar owner = _ref98.owner;\n\t\t\t\tvar path = _ref98.path;\n\t\t\t\tthis.$publish('link', { oldPath: oldPath, owner: owner, path: path });\n\t\t\t}\n\t\t\t/**\n\t   * Lists a folder content\n\t   *\n\t   * Returns a paginated list of the folder's content.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'ls',\n\t\t\tvalue: function ls(_ref99) {\n\t\t\t\tvar folder = _ref99.folder;\n\t\t\t\tvar owner = _ref99.owner;\n\t\t\t\tvar page = _ref99.page;\n\t\t\t\tthis.$publish('ls', { folder: folder, owner: owner, page: page });\n\t\t\t}\n\t\t\t/**\n\t   * Creates a folder\n\t   *\n\t   * Creates a new folder.\n\t   * May fail if the target location is not empty.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'mkdir',\n\t\t\tvalue: function mkdir(_ref100) {\n\t\t\t\tvar folder = _ref100.folder;\n\t\t\t\tvar owner = _ref100.owner;\n\t\t\t\tvar parents = _ref100.parents;\n\t\t\t\tthis.$publish('mkdir', { folder: folder, owner: owner, parents: parents });\n\t\t\t}\n\t\t\t/**\n\t   * Moves a file\n\t   *\n\t   * Moves a file or folder (recursively) to a new location.\n\t   * May fail if the target location is not empty.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'mv',\n\t\t\tvalue: function mv(_ref101) {\n\t\t\t\tvar oldPath = _ref101.oldPath;\n\t\t\t\tvar owner = _ref101.owner;\n\t\t\t\tvar path = _ref101.path;\n\t\t\t\tthis.$publish('mv', { oldPath: oldPath, owner: owner, path: path });\n\t\t\t}\n\t\t\t/**\n\t   * Notifies of upload completion\n\t   *\n\t   * The client application calls this verb to notify that it's done uploading to the cloud.\n\t   * Calling that verb MAY trigger additional events such as thumbnail/metadata creation.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'newFile',\n\t\t\tvalue: function newFile(_ref102) {\n\t\t\t\tvar guid = _ref102.guid;\n\t\t\t\tvar metadata = _ref102.metadata;\n\t\t\t\tvar owner = _ref102.owner;\n\t\t\t\tvar tags = _ref102.tags;\n\t\t\t\tthis.$publish('newFile', { guid: guid, metadata: metadata, owner: owner, tags: tags });\n\t\t\t}\n\t\t\t/**\n\t   * Requests an upload URL\n\t   *\n\t   * Requests an HTTP upload URL.\n\t   * The URL contains temporary credentials (typically valid for a few minutes) and is meant for immediate use.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'newUploadUrl',\n\t\t\tvalue: function newUploadUrl(_ref103) {\n\t\t\t\tvar contentType = _ref103.contentType;\n\t\t\t\tvar owner = _ref103.owner;\n\t\t\t\tvar path = _ref103.path;\n\t\t\t\tthis.$publish('newUploadUrl', { contentType: contentType, owner: owner, path: path });\n\t\t\t}\n\t\t\t/**\n\t   * Removes a file\n\t   *\n\t   * Removes a file or folder (recursively).\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'rm',\n\t\t\tvalue: function rm(_ref104) {\n\t\t\t\tvar owner = _ref104.owner;\n\t\t\t\tvar path = _ref104.path;\n\t\t\t\tthis.$publish('rm', { owner: owner, path: path });\n\t\t\t}\n\t\t\t/**\n\t   * Returns information about a file\n\t   *\n\t   * Returns information about a single file.\n\t   * The entry field will be null if the path does not exist\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'stat',\n\t\t\tvalue: function stat(_ref105) {\n\t\t\t\tvar owner = _ref105.owner;\n\t\t\t\tvar path = _ref105.path;\n\t\t\t\tthis.$publish('stat', { owner: owner, path: path });\n\t\t\t}\n\t\t\t/**Updates a file's metadata*/\n\t\n\t\t}, {\n\t\t\tkey: 'updateMeta',\n\t\t\tvalue: function updateMeta(_ref106) {\n\t\t\t\tvar metadata = _ref106.metadata;\n\t\t\t\tvar metadataFiles = _ref106.metadataFiles;\n\t\t\t\tvar owner = _ref106.owner;\n\t\t\t\tvar path = _ref106.path;\n\t\t\t\tthis.$publish('updateMeta', { metadata: metadata, metadataFiles: metadataFiles, owner: owner, path: path });\n\t\t\t}\n\t\t}], [{\n\t\t\tkey: 'DEFAULT_DEPLOYMENT_ID',\n\t\n\t\t\t/**\n\t   * Get default deployment id associated to Zpfs_hdfsService\n\t   * @return {string}\n\t   */\n\t\t\tget: function get() {\n\t\t\t\treturn 'zpfs_hdfs_0';\n\t\t\t}\n\t\t}]);\n\t\n\t\treturn Zpfs_hdfs;\n\t}(Service);\n\t/**\n\t * Upload: pseudo-S3\n\t *\n\t * Upload service with pseudo-S3compatible storage\n\t * */\n\t/**\n\t * User API for file management\n\t *\n\t * User API for virtual file management and http file upload\n\t * This API contains all the verbs needed to browse, upload and remove files.\n\t * Files are stored on a per-user basis: each user has his or her own whole virtual filesystem.\n\t * Uploading a file is a 3-step process : request an upload URL, upload via HTTP, notify this service of completion.\n\t * @access public\n\t * */\n\t\n\t\n\tvar Zpfs_s3compat = exports.Zpfs_s3compat = function (_Service20) {\n\t\t_inherits(Zpfs_s3compat, _Service20);\n\t\n\t\tfunction Zpfs_s3compat() {\n\t\t\t_classCallCheck(this, Zpfs_s3compat);\n\t\n\t\t\treturn _possibleConstructorReturn(this, Object.getPrototypeOf(Zpfs_s3compat).apply(this, arguments));\n\t\t}\n\t\n\t\t_createClass(Zpfs_s3compat, [{\n\t\t\tkey: 'cp',\n\t\n\t\t\t/**\n\t   * Copies a file\n\t   *\n\t   * Copies a file or folder (recursively) to a new location.\n\t   * May fail if the target location is not empty.\n\t   * */\n\t\t\tvalue: function cp(_ref107) {\n\t\t\t\tvar oldPath = _ref107.oldPath;\n\t\t\t\tvar owner = _ref107.owner;\n\t\t\t\tvar path = _ref107.path;\n\t\t\t\tthis.$publish('cp', { oldPath: oldPath, owner: owner, path: path });\n\t\t\t}\n\t\t\t/**\n\t   * Returns disk usage\n\t   *\n\t   * Returns an recursively aggregated number of used bytes, starting at the given path.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'du',\n\t\t\tvalue: function du(_ref108) {\n\t\t\t\tvar owner = _ref108.owner;\n\t\t\t\tvar path = _ref108.path;\n\t\t\t\tthis.$publish('du', { owner: owner, path: path });\n\t\t\t}\n\t\t\t/**Requests an upload URL without constraints.*/\n\t\n\t\t}, {\n\t\t\tkey: 'freeUploadUrl',\n\t\t\tvalue: function freeUploadUrl(_ref109) {\n\t\t\t\t_objectDestructuringEmpty(_ref109);\n\t\n\t\t\t\tthis.$publish('freeUploadUrl', {});\n\t\t\t}\n\t\t\t/**\n\t   * Links a file\n\t   *\n\t   * Links a file or folder to another location.\n\t   * May fail if the target location is not empty.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'link',\n\t\t\tvalue: function link(_ref110) {\n\t\t\t\tvar oldPath = _ref110.oldPath;\n\t\t\t\tvar owner = _ref110.owner;\n\t\t\t\tvar path = _ref110.path;\n\t\t\t\tthis.$publish('link', { oldPath: oldPath, owner: owner, path: path });\n\t\t\t}\n\t\t\t/**\n\t   * Lists a folder content\n\t   *\n\t   * Returns a paginated list of the folder's content.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'ls',\n\t\t\tvalue: function ls(_ref111) {\n\t\t\t\tvar folder = _ref111.folder;\n\t\t\t\tvar owner = _ref111.owner;\n\t\t\t\tvar page = _ref111.page;\n\t\t\t\tthis.$publish('ls', { folder: folder, owner: owner, page: page });\n\t\t\t}\n\t\t\t/**\n\t   * Creates a folder\n\t   *\n\t   * Creates a new folder.\n\t   * May fail if the target location is not empty.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'mkdir',\n\t\t\tvalue: function mkdir(_ref112) {\n\t\t\t\tvar folder = _ref112.folder;\n\t\t\t\tvar owner = _ref112.owner;\n\t\t\t\tvar parents = _ref112.parents;\n\t\t\t\tthis.$publish('mkdir', { folder: folder, owner: owner, parents: parents });\n\t\t\t}\n\t\t\t/**\n\t   * Moves a file\n\t   *\n\t   * Moves a file or folder (recursively) to a new location.\n\t   * May fail if the target location is not empty.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'mv',\n\t\t\tvalue: function mv(_ref113) {\n\t\t\t\tvar oldPath = _ref113.oldPath;\n\t\t\t\tvar owner = _ref113.owner;\n\t\t\t\tvar path = _ref113.path;\n\t\t\t\tthis.$publish('mv', { oldPath: oldPath, owner: owner, path: path });\n\t\t\t}\n\t\t\t/**\n\t   * Notifies of upload completion\n\t   *\n\t   * The client application calls this verb to notify that it's done uploading to the cloud.\n\t   * Calling that verb MAY trigger additional events such as thumbnail/metadata creation.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'newFile',\n\t\t\tvalue: function newFile(_ref114) {\n\t\t\t\tvar guid = _ref114.guid;\n\t\t\t\tvar metadata = _ref114.metadata;\n\t\t\t\tvar owner = _ref114.owner;\n\t\t\t\tvar tags = _ref114.tags;\n\t\t\t\tthis.$publish('newFile', { guid: guid, metadata: metadata, owner: owner, tags: tags });\n\t\t\t}\n\t\t\t/**\n\t   * Requests an upload URL\n\t   *\n\t   * Requests an HTTP upload URL.\n\t   * The URL contains temporary credentials (typically valid for a few minutes) and is meant for immediate use.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'newUploadUrl',\n\t\t\tvalue: function newUploadUrl(_ref115) {\n\t\t\t\tvar contentType = _ref115.contentType;\n\t\t\t\tvar owner = _ref115.owner;\n\t\t\t\tvar path = _ref115.path;\n\t\t\t\tthis.$publish('newUploadUrl', { contentType: contentType, owner: owner, path: path });\n\t\t\t}\n\t\t\t/**\n\t   * Removes a file\n\t   *\n\t   * Removes a file or folder (recursively).\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'rm',\n\t\t\tvalue: function rm(_ref116) {\n\t\t\t\tvar owner = _ref116.owner;\n\t\t\t\tvar path = _ref116.path;\n\t\t\t\tthis.$publish('rm', { owner: owner, path: path });\n\t\t\t}\n\t\t\t/**\n\t   * Returns information about a file\n\t   *\n\t   * Returns information about a single file.\n\t   * The entry field will be null if the path does not exist\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'stat',\n\t\t\tvalue: function stat(_ref117) {\n\t\t\t\tvar owner = _ref117.owner;\n\t\t\t\tvar path = _ref117.path;\n\t\t\t\tthis.$publish('stat', { owner: owner, path: path });\n\t\t\t}\n\t\t\t/**Updates a file's metadata*/\n\t\n\t\t}, {\n\t\t\tkey: 'updateMeta',\n\t\t\tvalue: function updateMeta(_ref118) {\n\t\t\t\tvar metadata = _ref118.metadata;\n\t\t\t\tvar metadataFiles = _ref118.metadataFiles;\n\t\t\t\tvar owner = _ref118.owner;\n\t\t\t\tvar path = _ref118.path;\n\t\t\t\tthis.$publish('updateMeta', { metadata: metadata, metadataFiles: metadataFiles, owner: owner, path: path });\n\t\t\t}\n\t\t}], [{\n\t\t\tkey: 'DEFAULT_DEPLOYMENT_ID',\n\t\n\t\t\t/**\n\t   * Get default deployment id associated to Zpfs_s3compatService\n\t   * @return {string}\n\t   */\n\t\t\tget: function get() {\n\t\t\t\treturn 'zpfs_s3compat_0';\n\t\t\t}\n\t\t}]);\n\t\n\t\treturn Zpfs_s3compat;\n\t}(Service);\n\t/**\n\t * User directory service\n\t *\n\t * User directory service\n\t * */\n\t/**\n\t * User API for user information\n\t *\n\t * @access public\n\t * */\n\t\n\t\n\tvar Userdir = exports.Userdir = function (_Service21) {\n\t\t_inherits(Userdir, _Service21);\n\t\n\t\tfunction Userdir() {\n\t\t\t_classCallCheck(this, Userdir);\n\t\n\t\t\treturn _possibleConstructorReturn(this, Object.getPrototypeOf(Userdir).apply(this, arguments));\n\t\t}\n\t\n\t\t_createClass(Userdir, [{\n\t\t\tkey: 'search',\n\t\n\t\t\t/**Searches for users matching the request*/\n\t\t\tvalue: function search(_ref119) {\n\t\t\t\tvar page = _ref119.page;\n\t\t\t\tvar query = _ref119.query;\n\t\t\t\tvar requestId = _ref119.requestId;\n\t\t\t\tthis.$publish('search', { page: page, query: query, requestId: requestId });\n\t\t\t}\n\t\t\t/**Requests public data for the specified users*/\n\t\n\t\t}, {\n\t\t\tkey: 'userInfo',\n\t\t\tvalue: function userInfo(_ref120) {\n\t\t\t\tvar userKeys = _ref120.userKeys;\n\t\t\t\tthis.$publish('userInfo', { userKeys: userKeys });\n\t\t\t}\n\t\t}], [{\n\t\t\tkey: 'DEFAULT_DEPLOYMENT_ID',\n\t\n\t\t\t/**\n\t   * Get default deployment id associated to UserdirService\n\t   * @return {string}\n\t   */\n\t\t\tget: function get() {\n\t\t\t\treturn 'userdir_0';\n\t\t\t}\n\t\t}]);\n\t\n\t\treturn Userdir;\n\t}(Service);\n\t/**\n\t * Delegating authentication\n\t *\n\t * This authentication delegates authentication to an external auth provider\n\t * <br>When a zetapush client handshakes with a delegated authentication, the 'token' field given by the client is sent to the configured remote server as part of the URL\n\t * <br>The response must be in JSON format\n\t *  Each key of the response will be considered a user information field name\n\t *\n\t * */\n\t/**\n\t * End-user API for the delegating authentication\n\t *\n\t * Provisionning verbs.\n\t * @access public\n\t * */\n\t\n\t\n\tvar Delegating = exports.Delegating = function (_Service22) {\n\t\t_inherits(Delegating, _Service22);\n\t\n\t\tfunction Delegating() {\n\t\t\t_classCallCheck(this, Delegating);\n\t\n\t\t\treturn _possibleConstructorReturn(this, Object.getPrototypeOf(Delegating).apply(this, arguments));\n\t\t}\n\t\n\t\t_createClass(Delegating, [{\n\t\t\tkey: 'userInfo',\n\t\n\t\t\t/**\n\t   * Get user info\n\t   *\n\t   * Retrieves cached user info or (if missing) eagerly creates a zetapush key for the user.\n\t   * The returned field 'zetapushKey' is a unique and permanent ID identifying a user in a sandbox.\n\t   * */\n\t\t\tvalue: function userInfo(_ref121) {\n\t\t\t\t_objectDestructuringEmpty(_ref121);\n\t\n\t\t\t\tthis.$publish('userInfo', {});\n\t\t\t}\n\t\t}], [{\n\t\t\tkey: 'DEFAULT_DEPLOYMENT_ID',\n\t\n\t\t\t/**\n\t   * Get default deployment id associated to DelegatingService\n\t   * @return {string}\n\t   */\n\t\t\tget: function get() {\n\t\t\t\treturn 'delegating_0';\n\t\t\t}\n\t\t}]);\n\t\n\t\treturn Delegating;\n\t}(Service);\n\t/**\n\t * Local authentication\n\t *\n\t * Zetapush local authentication\n\t *  The configurer can choose the primary key and mandatory user fields for account creation\n\t *  The field 'zetapushKey' is generated by the server and MUST not be used : it contains the unique key of the user inside a sandbox (it can be obtained from inside a macro with the <b>__userKey</b> pseudo-constant)\n\t * */\n\t/**\n\t * End-user API for the simple local authentication\n\t *\n\t * These API verbs allow end-users to manage their account.\n\t * @access public\n\t * */\n\t\n\t\n\tvar Simple = exports.Simple = function (_Service23) {\n\t\t_inherits(Simple, _Service23);\n\t\n\t\tfunction Simple() {\n\t\t\t_classCallCheck(this, Simple);\n\t\n\t\t\treturn _possibleConstructorReturn(this, Object.getPrototypeOf(Simple).apply(this, arguments));\n\t\t}\n\t\n\t\t_createClass(Simple, [{\n\t\t\tkey: 'changePassword',\n\t\n\t\t\t/**\n\t   * Changes a password\n\t   *\n\t   * Changes a user password for this authentication realm.\n\t   * The user can be either implicit (the current user) or deduced from the token.\n\t   * The change is effective immediately. However, already logged in users might stay connected.\n\t   * */\n\t\t\tvalue: function changePassword(_ref122) {\n\t\t\t\t_objectDestructuringEmpty(_ref122);\n\t\n\t\t\t\tthis.$publish('changePassword', {});\n\t\t\t}\n\t\t\t/**\n\t   * Checks some account's existence\n\t   *\n\t   * Checks whether the given user already exists in this 'simple' authentication realm.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'checkUser',\n\t\t\tvalue: function checkUser(_ref123) {\n\t\t\t\t_objectDestructuringEmpty(_ref123);\n\t\n\t\t\t\tthis.$publish('checkUser', {});\n\t\t\t}\n\t\t\t/**\n\t   * Creates a user\n\t   *\n\t   * Creates a new user in this 'simple' authentication realm.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'createUser',\n\t\t\tvalue: function createUser(_ref124) {\n\t\t\t\t_objectDestructuringEmpty(_ref124);\n\t\n\t\t\t\tthis.$publish('createUser', {});\n\t\t\t}\n\t\t\t/**\n\t   * Deletes a user\n\t   *\n\t   * Deletes an existing user in this 'simple' authentication realm.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'deleteUser',\n\t\t\tvalue: function deleteUser(_ref125) {\n\t\t\t\t_objectDestructuringEmpty(_ref125);\n\t\n\t\t\t\tthis.$publish('deleteUser', {});\n\t\t\t}\n\t\t\t/**\n\t   * Requests a password reset\n\t   *\n\t   * Requests a password reset for the given unique key.\n\t   * The key must exist and must be given, as it cannot obviously be deduced from the currently logged in user.\n\t   * The returned token needs to be sent to the intended recipient only. The typical use case is to define a macro that requests a reset, generates a email template and emails the user. The macro can then be safely called by a weakly authenticated user.\n\t   * Requesting a reset does not invalidate the password.\n\t   * Requesting a reset again invalidates previous reset requests (only the last token is usable)\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'requestReset',\n\t\t\tvalue: function requestReset(_ref126) {\n\t\t\t\t_objectDestructuringEmpty(_ref126);\n\t\n\t\t\t\tthis.$publish('requestReset', {});\n\t\t\t}\n\t\t\t/**\n\t   * Updates a user\n\t   *\n\t   * Updates an existing user in this 'simple' authentication realm.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'updateUser',\n\t\t\tvalue: function updateUser(_ref127) {\n\t\t\t\t_objectDestructuringEmpty(_ref127);\n\t\n\t\t\t\tthis.$publish('updateUser', {});\n\t\t\t}\n\t\t}], [{\n\t\t\tkey: 'DEFAULT_DEPLOYMENT_ID',\n\t\n\t\t\t/**\n\t   * Get default deployment id associated to SimpleService\n\t   * @return {string}\n\t   */\n\t\t\tget: function get() {\n\t\t\t\treturn 'simple_0';\n\t\t\t}\n\t\t}]);\n\t\n\t\treturn Simple;\n\t}(Service);\n\t/**\n\t * Weak authentication\n\t *\n\t * The weak authentication allows for anonymous authentication of devices\n\t *  Such devices can display a qrcode to allow regular users to take control of them\n\t * */\n\t/**\n\t * User API for weak devices control\n\t *\n\t * User API for control and release of weakly authenticated user sessions.\n\t * @access public\n\t * */\n\t\n\t\n\tvar Weak = exports.Weak = function (_Service24) {\n\t\t_inherits(Weak, _Service24);\n\t\n\t\tfunction Weak() {\n\t\t\t_classCallCheck(this, Weak);\n\t\n\t\t\treturn _possibleConstructorReturn(this, Object.getPrototypeOf(Weak).apply(this, arguments));\n\t\t}\n\t\n\t\t_createClass(Weak, [{\n\t\t\tkey: 'control',\n\t\n\t\t\t/**\n\t   * Controls a session\n\t   *\n\t   * Takes control of a weak user session, identified by the given public token.\n\t   * The public token has been previously made available by the controlled device, for example by displaying a QRCode.\n\t   * Upon control notification, the client SDK of the controlled session is expected to re-handshake.\n\t   * */\n\t\t\tvalue: function control(_ref128) {\n\t\t\t\tvar fullRights = _ref128.fullRights;\n\t\t\t\tvar publicToken = _ref128.publicToken;\n\t\t\t\tthis.$publish('control', { fullRights: fullRights, publicToken: publicToken });\n\t\t\t}\n\t\t\t/**\n\t   * Releases a session\n\t   *\n\t   * Releases control of a weak user session, identified by the given public token.\n\t   * The weak user session must have been previously controlled by a call to 'control'.\n\t   * */\n\t\n\t\t}, {\n\t\t\tkey: 'release',\n\t\t\tvalue: function release(_ref129) {\n\t\t\t\tvar fullRights = _ref129.fullRights;\n\t\t\t\tvar publicToken = _ref129.publicToken;\n\t\t\t\tthis.$publish('release', { fullRights: fullRights, publicToken: publicToken });\n\t\t\t}\n\t\t}], [{\n\t\t\tkey: 'DEFAULT_DEPLOYMENT_ID',\n\t\n\t\t\t/**\n\t   * Get default deployment id associated to WeakService\n\t   * @return {string}\n\t   */\n\t\t\tget: function get() {\n\t\t\t\treturn 'weak_0';\n\t\t\t}\n\t\t}]);\n\t\n\t\treturn Weak;\n\t}(Service);\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\n\t * Define life cycle connection methods\n\t * @access public\n\t */\n\t\n\tvar ConnectionStatusListener = exports.ConnectionStatusListener = function () {\n\t  function ConnectionStatusListener() {\n\t    _classCallCheck(this, ConnectionStatusListener);\n\t  }\n\t\n\t  _createClass(ConnectionStatusListener, [{\n\t    key: \"onConnectionBroken\",\n\t\n\t    /**\n\t     * Callback fired when connection is broken\n\t     */\n\t    value: function onConnectionBroken() {}\n\t    /**\n\t     * Callback fired when connection is closed\n\t     */\n\t\n\t  }, {\n\t    key: \"onConnectionClosed\",\n\t    value: function onConnectionClosed() {}\n\t    /**\n\t     * Callback fired when connection is established\n\t     */\n\t\n\t  }, {\n\t    key: \"onConnectionEstablished\",\n\t    value: function onConnectionEstablished() {}\n\t    /**\n\t    * Callback fired when connection will close\n\t    */\n\t\n\t  }, {\n\t    key: \"onConnectionWillClose\",\n\t    value: function onConnectionWillClose() {}\n\t    /**\n\t     * Callback fired when an error occurs in handshake step\n\t     * @param {Object} error\n\t     */\n\t\n\t  }, {\n\t    key: \"onFailedHandshake\",\n\t    value: function onFailedHandshake(error) {}\n\t    /**\n\t     * Callback fired when a message is lost\n\t     */\n\t\n\t  }, {\n\t    key: \"onMessageLost\",\n\t    value: function onMessageLost() {}\n\t    /**\n\t     * Callback fired when handshake step succeed\n\t     * @param {Object} authentication\n\t     */\n\t\n\t  }, {\n\t    key: \"onSuccessfulHandshake\",\n\t    value: function onSuccessfulHandshake(authentication) {}\n\t  }]);\n\n\t  return ConnectionStatusListener;\n\t}();\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Client = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _index = __webpack_require__(7);\n\t\n\tvar _clientHelper = __webpack_require__(8);\n\t\n\tvar _connectionStatus = __webpack_require__(5);\n\t\n\tfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\n\t * Client config object.\n\t * @typedef {Object} ClientConfig\n\t * @property {string} apiUrl - Api Url\n\t * @property {string} sandboxId - Sandbox id\n\t * @property {boolean} forceHttps - Force end to end HTTPS connection\n\t * @property {function():AbstractHandshake} credentials - Return credentials properties\n\t * @property {string} resource - Client resource id\n\t */\n\t\n\t/**\n\t * ZetaPush Client to connect\n\t * @access public\n\t * @example\n\t * // Securized client with token based connection\n\t * const client = new ZetaPush.Client({\n\t *   sandboxId: '<YOUR-SANDBOX-ID>',\n\t *   credentials() {\n\t *     return ZetaPush.Authentication.weak({\n\t *       token: null\n\t  *    })\n\t *   }\n\t * })\n\t * @example\n\t * // Client with credentials based connection\n\t * const client = new ZetaPush.Client({\n\t *   sandboxId: '<YOUR-SANDBOX-ID>',\n\t *   credentials() {\n\t *     return ZetaPush.Authentication.simple({\n\t *       login: '<USER-LOGIN>',\n\t *       password: '<USER-PASSWORD>'\n\t  *    })\n\t *   }\n\t * })\n\t */\n\t\n\tvar Client = exports.Client = function () {\n\t  /**\n\t   * @param {ClientConfig} config\n\t   * Create a new ZetaPush client\n\t   */\n\t\n\t  function Client(_ref) {\n\t    var _ref$apiUrl = _ref.apiUrl;\n\t    var apiUrl = _ref$apiUrl === undefined ? _index.API_URL : _ref$apiUrl;\n\t    var sandboxId = _ref.sandboxId;\n\t    var _ref$forceHttps = _ref.forceHttps;\n\t    var forceHttps = _ref$forceHttps === undefined ? (0, _index.isHttpsProtocol)(location) : _ref$forceHttps;\n\t    var credentials = _ref.credentials;\n\t    var _ref$resource = _ref.resource;\n\t    var resource = _ref$resource === undefined ? null : _ref$resource;\n\t\n\t    _classCallCheck(this, Client);\n\t\n\t    /**\n\t     * @access private\n\t     * @type {ClientHelper}\n\t     */\n\t    this.helper = new _clientHelper.ClientHelper({\n\t      apiUrl: apiUrl,\n\t      sandboxId: sandboxId,\n\t      forceHttps: forceHttps,\n\t      credentials: credentials,\n\t      resource: resource\n\t    });\n\t  }\n\t  /**\n\t   * Is client connected to ZetaPush\n\t   * @return {boolean}\n\t   */\n\t\n\t\n\t  _createClass(Client, [{\n\t    key: 'isConnected',\n\t    value: function isConnected() {\n\t      return this.helper.isConnected();\n\t    }\n\t    /**\n\t     * Connect client to ZetaPush\n\t     */\n\t\n\t  }, {\n\t    key: 'connect',\n\t    value: function connect() {\n\t      this.helper.connect();\n\t    }\n\t    /**\n\t     * Disonnect client from ZetaPush\n\t     */\n\t\n\t  }, {\n\t    key: 'disconnect',\n\t    value: function disconnect() {\n\t      this.helper.disconnect();\n\t    }\n\t    /**\n\t     * Get the client sandbox id\n\t     * @return {string}\n\t     */\n\t\n\t  }, {\n\t    key: 'getSandboxId',\n\t    value: function getSandboxId() {\n\t      return this.helper.getSandboxId();\n\t    }\n\t    /**\n\t     * Get the client resource\n\t     * @return {string}\n\t     */\n\t\n\t  }, {\n\t    key: 'getResource',\n\t    value: function getResource() {\n\t      return this.helper.getResource();\n\t    }\n\t    /**\n\t     * Get the client user id\n\t     * @return {string}\n\t     */\n\t\n\t  }, {\n\t    key: 'getUserId',\n\t    value: function getUserId() {\n\t      return this.helper.getUserId();\n\t    }\n\t    /**\n\t     * Remove all subscriptions\n\t     * @param {Object} service\n\t     */\n\t\n\t  }, {\n\t    key: 'unsubscribe',\n\t    value: function unsubscribe(service) {\n\t      if (!service.$subscriptions) {\n\t        throw new TypeError('Missing $subscriptions property in service');\n\t      }\n\t      return this.helper.unsubscribe(service.$subscriptions);\n\t    }\n\t    /**\n\t     * Create a publish/subscribe for a service type\n\t     * @param {{type: class, deploymentId: string, listener: Object}} parameters\n\t     * @return {Object} service\n\t     */\n\t\n\t  }, {\n\t    key: 'createService',\n\t    value: function createService(_ref2) {\n\t      var type = _ref2.type;\n\t      var listener = _ref2.listener;\n\t      var _ref2$deploymentId = _ref2.deploymentId;\n\t      var deploymentId = _ref2$deploymentId === undefined ? type.DEFAULT_DEPLOYMENT_ID : _ref2$deploymentId;\n\t\n\t      return this.helper.createService({ deploymentId: deploymentId, listener: listener, type: type });\n\t    }\n\t    /**\n\t     * Set new client resource value\n\t     * @param {string} resource\n\t     */\n\t\n\t  }, {\n\t    key: 'setResource',\n\t    value: function setResource(resource) {\n\t      this.helper.setResource(resource);\n\t    }\n\t    /**\n\t     * Add a connection listener to handle life cycle connection events\n\t     * @param {ConnectionStatusListener} listener\n\t     * @return {number} handler\n\t     */\n\t\n\t  }, {\n\t    key: 'addConnectionStatusListener',\n\t    value: function addConnectionStatusListener(listener) {\n\t      return this.helper.addConnectionStatusListener(listener);\n\t    }\n\t    /**\n\t     * Remove a connection status listener\n\t     * @param {number} handler\n\t     */\n\t\n\t  }, {\n\t    key: 'removeConnectionStatusListener',\n\t    value: function removeConnectionStatusListener(handler) {\n\t      return this.helper.removeConnectionStatusListener(handler);\n\t    }\n\t    /**\n\t     * Set logging level\n\t     * Valid values are the strings 'error', 'warn', 'info' and 'debug', from\n\t     * less verbose to more verbose.\n\t     * @param {string} level\n\t     */\n\t\n\t  }, {\n\t    key: 'setLogLevel',\n\t    value: function setLogLevel(level) {\n\t      this.helper.setLogLevel(level);\n\t    }\n\t  }]);\n\t\n\t  return Client;\n\t}();\n\t\n\t/**\n\t * Add shorthand connection status method\n\t */\n\t\n\t\n\tObject.getOwnPropertyNames(_connectionStatus.ConnectionStatusListener.prototype).forEach(function (method) {\n\t  // Only implements unsupported methods\n\t  if (!Client.prototype.hasOwnProperty(method)) {\n\t    Client.prototype[method] = function addListener(listener) {\n\t      return this.addConnectionStatusListener(_defineProperty({}, method, listener));\n\t    };\n\t  }\n\t});\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/**\n\t * Match unsecure pattern web\n\t * @type {RegExp}\n\t */\n\tvar UNSECURE_PATTERN = /^http:\\/\\/|^\\/\\//;\n\t\n\t/**\n\t* Default ZetaPush API URL\n\t* @access private\n\t*/\n\tvar API_URL = exports.API_URL = 'https://api.zpush.io/';\n\t\n\t/**\n\t * @access private\n\t * @param {Array<Object>} list\n\t * @return {Object}\n\t */\n\tvar shuffle = exports.shuffle = function shuffle(list) {\n\t  var index = Math.floor(Math.random() * list.length);\n\t  return list[index];\n\t};\n\t\n\t/**\n\t * @access private\n\t * @param {string} url\n\t * @param {boolean} forceHttps\n\t * @return {string}\n\t */\n\tvar getSecureUrl = exports.getSecureUrl = function getSecureUrl(url, forceHttps) {\n\t  return forceHttps ? url.replace(UNSECURE_PATTERN, 'https://') : url;\n\t};\n\t\n\t/**\n\t * @access private\n\t * @param {{apiUrl: string, sandboxId: string, forceHttps: boolean}} parameters\n\t * @return {Promise}\n\t */\n\tvar getServers = exports.getServers = function getServers(_ref) {\n\t  var apiUrl = _ref.apiUrl;\n\t  var sandboxId = _ref.sandboxId;\n\t  var forceHttps = _ref.forceHttps;\n\t\n\t  var secureApiUrl = getSecureUrl(apiUrl, forceHttps);\n\t  var url = '' + secureApiUrl + sandboxId;\n\t  return fetch(url).then(function (response) {\n\t    return response.json();\n\t  }).then(function (_ref2) {\n\t    var servers = _ref2.servers;\n\t\n\t    // TODO: Replace by a server side implementation when available\n\t    return servers.map(function (server) {\n\t      return getSecureUrl(server, forceHttps);\n\t    });\n\t  });\n\t};\n\t\n\t/**\n\t * @access private\n\t * @return {boolean}\n\t */\n\tvar isHttpsProtocol = exports.isHttpsProtocol = function isHttpsProtocol() {\n\t  var _ref3 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t  var protocol = _ref3.protocol;\n\t\n\t  return 'https:' === protocol;\n\t};\n\t\n\t/**\n\t * @access  private\n\t * @return {boolean}\n\t */\n\tvar isPrototypeOf = exports.isPrototypeOf = function isPrototypeOf(derived, parent) {\n\t  var prototype = Object.getPrototypeOf(derived);\n\t  var is = false;\n\t  while (!(is || prototype === null)) {\n\t    is = prototype === parent;\n\t    prototype = Object.getPrototypeOf(prototype);\n\t  }\n\t  return is;\n\t};\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.ClientHelper = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _zetapushCometd = __webpack_require__(9);\n\t\n\tvar _cometd = __webpack_require__(18);\n\t\n\tvar _connectionStatus = __webpack_require__(5);\n\t\n\tvar _services = __webpack_require__(4);\n\t\n\tvar _index = __webpack_require__(7);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\n\t * CometD Messages enumeration\n\t */\n\tvar Message = {\n\t  RECONNECT_HANDSHAKE_VALUE: 'handshake',\n\t  RECONNECT_NONE_VALUE: 'none',\n\t  RECONNECT_RETRY_VALUE: 'retry'\n\t};\n\t\n\t/**\n\t * CometD Transports enumeration\n\t */\n\tvar Transport = {\n\t  LONG_POLLING: 'long-polling',\n\t  WEBSOCKET: 'websocket'\n\t};\n\t\n\t/**\n\t * Provide utilities and abstraction on CometD Transport layer\n\t * @access private\n\t */\n\t\n\tvar ClientHelper = exports.ClientHelper = function () {\n\t  /**\n\t   * Create a new ZetaPush client helper\n\t   */\n\t\n\t  function ClientHelper(_ref) {\n\t    var _this = this;\n\t\n\t    var apiUrl = _ref.apiUrl;\n\t    var sandboxId = _ref.sandboxId;\n\t    var _ref$forceHttps = _ref.forceHttps;\n\t    var forceHttps = _ref$forceHttps === undefined ? false : _ref$forceHttps;\n\t    var credentials = _ref.credentials;\n\t    var resource = _ref.resource;\n\t\n\t    _classCallCheck(this, ClientHelper);\n\t\n\t    /**\n\t     * @access private\n\t     * @type {string}\n\t     */\n\t    this.sandboxId = sandboxId;\n\t    /**\n\t     * @access private\n\t     * @type {function():AbstractHandshake}\n\t     */\n\t    this.credentials = credentials;\n\t    /**\n\t     * @access private\n\t     * @type {string}\n\t     */\n\t    this.resource = resource;\n\t    /**\n\t     * @access private\n\t     * @type {string}\n\t     */\n\t    this.userId = null;\n\t    /**\n\t     * @access private\n\t     * @type {Promise}\n\t     */\n\t    this.servers = (0, _index.getServers)({ apiUrl: apiUrl, sandboxId: sandboxId, forceHttps: forceHttps });\n\t    /**\n\t     * @access private\n\t     * @type {Array<Object>}\n\t     */\n\t    this.connectionListeners = [];\n\t    /**\n\t     * @access private\n\t     * @type {boolean}\n\t     */\n\t    this.connected = false;\n\t    /**\n\t     * @access private\n\t     * @type {boolean}\n\t     */\n\t    this.wasConnected = false;\n\t    /**\n\t     * @access private\n\t     * @type {string}\n\t     */\n\t    this.serverUrl = null;\n\t    /**\n\t     * @access private\n\t     * @type {Array<Object>}\n\t     */\n\t    this.subscribeQueue = [];\n\t    /**\n\t     * @access private\n\t     * @type {CometD}\n\t     */\n\t    this.cometd = new _zetapushCometd.CometD();\n\t    this.cometd.registerTransport(Transport.WEBSOCKET, new _zetapushCometd.WebSocketTransport());\n\t    this.cometd.registerTransport(Transport.LONG_POLLING, new _cometd.FetchLongPollingTransport());\n\t    this.cometd.onTransportException = function (cometd, transport) {\n\t      if (Transport.LONG_POLLING === transport) {\n\t        // Try to find an other available server\n\t        // Remove the current one from the _serverList array\n\t        _this.updateServerUrl();\n\t      }\n\t    };\n\t    this.cometd.addListener('/meta/handshake', function (_ref2) {\n\t      var ext = _ref2.ext;\n\t      var successful = _ref2.successful;\n\t      var advice = _ref2.advice;\n\t      var error = _ref2.error;\n\t\n\t      _this.cometd._debug('ClientHelper::/meta/handshake', { ext: ext, successful: successful, advice: advice, error: error });\n\t      if (successful) {\n\t        var _ext$authentication = ext.authentication;\n\t        var authentication = _ext$authentication === undefined ? null : _ext$authentication;\n\t\n\t        _this.initialized(authentication);\n\t      } else {\n\t        _this.handshakeFailure(error);\n\t      }\n\t    });\n\t\n\t    this.cometd.addListener('/meta/handshake', function (_ref3) {\n\t      var advice = _ref3.advice;\n\t      var error = _ref3.error;\n\t      var ext = _ref3.ext;\n\t      var successful = _ref3.successful;\n\t\n\t      _this.cometd._debug('ClientHelper::/meta/handshake', { ext: ext, successful: successful, advice: advice, error: error });\n\t      // AuthNegotiation\n\t      if (!successful) {\n\t        if ('undefined' === typeof advice) {\n\t          return;\n\t        }\n\t        if (Message.RECONNECT_NONE_VALUE === advice.reconnect) {\n\t          _this.authenticationFailed(error);\n\t        } else if (Message.RECONNECT_HANDSHAKE_VALUE === advice.reconnect) {\n\t          _this.negotiate(ext);\n\t        }\n\t      }\n\t    });\n\t\n\t    this.cometd.addListener('/meta/connect', function (_ref4) {\n\t      var advice = _ref4.advice;\n\t      var channel = _ref4.channel;\n\t      var successful = _ref4.successful;\n\t\n\t      _this.cometd._debug('ClientHelper::/meta/connect', { advice: advice, channel: channel, successful: successful });\n\t      // ConnectionListener\n\t      if (_this.cometd.isDisconnected()) {\n\t        _this.connected = false;\n\t        // Notify connection will close\n\t        _this.connectionWillClose();\n\t      } else {\n\t        _this.wasConnected = _this.connected;\n\t        _this.connected = successful;\n\t        if (!_this.wasConnected && _this.connected) {\n\t          _this.cometd.batch(_this, function () {\n\t            // Unqueue subscriptions\n\t            _this.subscribeQueue.forEach(function (_ref5) {\n\t              var prefix = _ref5.prefix;\n\t              var listener = _ref5.listener;\n\t              var subscriptions = _ref5.subscriptions;\n\t\n\t              _this.subscribe(prefix, listener, subscriptions);\n\t            });\n\t          });\n\t          // Notify connection is established\n\t          _this.connectionEstablished();\n\t        } else if (_this.wasConnected && !_this.connected) {\n\t          // Notify connection is broken\n\t          _this.connectionBroken();\n\t        }\n\t      }\n\t    });\n\t\n\t    this.cometd.addListener('/meta/disconnect', function (_ref6) {\n\t      var channel = _ref6.channel;\n\t      var successful = _ref6.successful;\n\t\n\t      _this.cometd._debug('ClientHelper::/meta/disconnect', { channel: channel, successful: successful });\n\t      if (_this.cometd.isDisconnected()) {\n\t        _this.connected = false;\n\t        // Notify connection is closed\n\t        _this.connectionClosed();\n\t      }\n\t    });\n\t  }\n\t  /**\n\t   * Is client connected to ZetaPush\n\t   * @return boolean\n\t   */\n\t\n\t\n\t  _createClass(ClientHelper, [{\n\t    key: 'isConnected',\n\t    value: function isConnected() {\n\t      return !this.cometd.isDisconnected();\n\t    }\n\t    /**\n\t     * Connect client using CometD Transport\n\t     */\n\t\n\t  }, {\n\t    key: 'connect',\n\t    value: function connect() {\n\t      var _this2 = this;\n\t\n\t      this.servers.then(function (servers) {\n\t        _this2.serverUrl = (0, _index.shuffle)(servers);\n\t\n\t        _this2.cometd.configure({\n\t          url: _this2.serverUrl + '/strd',\n\t          backoffIncrement: 1000,\n\t          maxBackoff: 60000,\n\t          appendMessageTypeToURL: false\n\t        });\n\t\n\t        _this2.cometd.handshake(_this2.getHandshakeFields());\n\t      });\n\t    }\n\t    /**\n\t     * Notify listeners when connection is established\n\t     */\n\t\n\t  }, {\n\t    key: 'connectionEstablished',\n\t    value: function connectionEstablished() {\n\t      this.connectionListeners.filter(function (_ref7) {\n\t        var enabled = _ref7.enabled;\n\t        return enabled;\n\t      }).forEach(function (_ref8) {\n\t        var listener = _ref8.listener;\n\t\n\t        listener.onConnectionEstablished();\n\t      });\n\t    }\n\t    /**\n\t     * Notify listeners when connection is broken\n\t     */\n\t\n\t  }, {\n\t    key: 'connectionBroken',\n\t    value: function connectionBroken() {\n\t      this.connectionListeners.filter(function (_ref9) {\n\t        var enabled = _ref9.enabled;\n\t        return enabled;\n\t      }).forEach(function (_ref10) {\n\t        var listener = _ref10.listener;\n\t\n\t        listener.onConnectionBroken();\n\t      });\n\t    }\n\t    /**\n\t     * Notify listeners when a message is lost\n\t     */\n\t\n\t  }, {\n\t    key: 'messageLost',\n\t    value: function messageLost(channel, data) {\n\t      this.connectionListeners.filter(function (_ref11) {\n\t        var enabled = _ref11.enabled;\n\t        return enabled;\n\t      }).forEach(function (_ref12) {\n\t        var listener = _ref12.listener;\n\t\n\t        listener.onMessageLost(channel, data);\n\t      });\n\t    }\n\t    /**\n\t     * Notify listeners when connection will close\n\t     */\n\t\n\t  }, {\n\t    key: 'connectionWillClose',\n\t    value: function connectionWillClose() {\n\t      this.connectionListeners.filter(function (_ref13) {\n\t        var enabled = _ref13.enabled;\n\t        return enabled;\n\t      }).forEach(function (_ref14) {\n\t        var listener = _ref14.listener;\n\t\n\t        listener.onConnectionWillClose();\n\t      });\n\t    }\n\t    /**\n\t     * Notify listeners when connection is closed\n\t     */\n\t\n\t  }, {\n\t    key: 'connectionClosed',\n\t    value: function connectionClosed() {\n\t      this.userId = null;\n\t      this.connectionListeners.filter(function (_ref15) {\n\t        var enabled = _ref15.enabled;\n\t        return enabled;\n\t      }).forEach(function (_ref16) {\n\t        var listener = _ref16.listener;\n\t\n\t        listener.onConnectionClosed();\n\t      });\n\t    }\n\t    /**\n\t     * Notify listeners when connection is established\n\t     */\n\t\n\t  }, {\n\t    key: 'initialized',\n\t    value: function initialized(authentication) {\n\t      if (authentication) {\n\t        this.userId = authentication.userId;\n\t      }\n\t      this.connectionListeners.filter(function (_ref17) {\n\t        var enabled = _ref17.enabled;\n\t        return enabled;\n\t      }).forEach(function (_ref18) {\n\t        var listener = _ref18.listener;\n\t\n\t        listener.onSuccessfulHandshake(authentication);\n\t      });\n\t    }\n\t    /**\n\t     * Notify listeners when handshake step succeed\n\t     */\n\t\n\t  }, {\n\t    key: 'authenticationFailed',\n\t    value: function authenticationFailed(error) {\n\t      this.userId = null;\n\t      this.connectionListeners.filter(function (_ref19) {\n\t        var enabled = _ref19.enabled;\n\t        return enabled;\n\t      }).forEach(function (_ref20) {\n\t        var listener = _ref20.listener;\n\t\n\t        listener.onFailedHandshake(error);\n\t      });\n\t    }\n\t    /**\n\t     * Manage handshake failure case\n\t     */\n\t\n\t  }, {\n\t    key: 'handshakeFailure',\n\t    value: function handshakeFailure() {\n\t      this.userId = null;\n\t    }\n\t    /**\n\t    * Remove current server url from the server list and shuffle for another one\n\t    */\n\t\n\t  }, {\n\t    key: 'updateServerUrl',\n\t    value: function updateServerUrl() {\n\t      var _this3 = this;\n\t\n\t      this.servers.then(function (servers) {\n\t        var index = servers.indexOf(_this3.serverUrl);\n\t        if (index > -1) {\n\t          servers.splice(index, 1);\n\t        }\n\t        if (servers.length === 0) {\n\t          // No more server available\n\t        } else {\n\t          _this3.serverUrl = (0, _index.shuffle)(servers);\n\t          _this3.cometd.configure({\n\t            url: _this3.serverUrl + '/strd'\n\t          });\n\t          setTimeout(function () {\n\t            _this3.cometd.handshake(_this3.getHandshakeFields());\n\t          }, 250);\n\t        }\n\t      });\n\t    }\n\t    /**\n\t     * Negociate authentication\n\t     */\n\t\n\t  }, {\n\t    key: 'negotiate',\n\t    value: function negotiate(ext) {\n\t      this.cometd._debug('ClientHelper::negotiate', ext);\n\t    }\n\t    /**\n\t     * Disconnect CometD client\n\t     */\n\t\n\t  }, {\n\t    key: 'disconnect',\n\t    value: function disconnect() {\n\t      this.cometd.disconnect(true);\n\t    }\n\t    /**\n\t     * Get CometD handshake parameters\n\t     * @return {Object}\n\t     */\n\t\n\t  }, {\n\t    key: 'getHandshakeFields',\n\t    value: function getHandshakeFields() {\n\t      var handshake = this.credentials();\n\t      return handshake.getHandshakeFields(this);\n\t    }\n\t    /**\n\t     * Set a new handshake factory methods\n\t     * @param {function():AbstractHandshake} credentials\n\t     */\n\t\n\t  }, {\n\t    key: 'setCredentials',\n\t    value: function setCredentials(credentials) {\n\t      this.credentials = credentials;\n\t    }\n\t    /**\n\t     * Get sandbox id\n\t     * @return {string}\n\t     */\n\t\n\t  }, {\n\t    key: 'getSandboxId',\n\t    value: function getSandboxId() {\n\t      return this.sandboxId;\n\t    }\n\t    /**\n\t     * Get resource\n\t     * @return {string}\n\t     */\n\t\n\t  }, {\n\t    key: 'getResource',\n\t    value: function getResource() {\n\t      return this.resource;\n\t    }\n\t    /**\n\t     * Get user id\n\t     * @return {string}\n\t     */\n\t\n\t  }, {\n\t    key: 'getUserId',\n\t    value: function getUserId() {\n\t      return this.userId;\n\t    }\n\t    /**\n\t     * Subsribe all methods defined in the listener for the given prefixed channel\n\t     * @param {string} prefix - Channel prefix\n\t     * @param {Object} listener\n\t     * @param {Object} subscriptions\n\t     * @return {Object} subscriptions\n\t     */\n\t\n\t  }, {\n\t    key: 'subscribe',\n\t    value: function subscribe(prefix, listener) {\n\t      var subscriptions = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\t\n\t      var _getQueuedSubscriptio = this.getQueuedSubscription(subscriptions);\n\t\n\t      var queued = _getQueuedSubscriptio.queued;\n\t\n\t      if (!queued) {\n\t        // Store arguments to renew subscriptions on connection\n\t        this.subscribeQueue.push({ prefix: prefix, listener: listener, subscriptions: subscriptions });\n\t      }\n\t      // Subscribe if user is connected\n\t      if (!this.cometd.isDisconnected()) {\n\t        for (var method in listener) {\n\t          if (listener.hasOwnProperty(method)) {\n\t            var channel = prefix + '/' + method;\n\t            subscriptions[method] = this.cometd.subscribe(channel, listener[method]);\n\t          }\n\t        }\n\t      }\n\t      return subscriptions;\n\t    }\n\t    /**\n\t     * Remove all subscriptions\n\t     * @param {Object} subscriptions\n\t     */\n\t\n\t  }, {\n\t    key: 'unsubscribe',\n\t    value: function unsubscribe() {\n\t      var subscriptions = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t      // Unsubscribe\n\t      for (var method in subscriptions) {\n\t        if (subscriptions.hasOwnProperty(method)) {\n\t          var subscription = subscriptions[method];\n\t          this.cometd.unsubscribe(subscription);\n\t        }\n\t      }\n\t      // Remove subscription from queue\n\t\n\t      var _getQueuedSubscriptio2 = this.getQueuedSubscription(subscriptions);\n\t\n\t      var index = _getQueuedSubscriptio2.index;\n\t      var queued = _getQueuedSubscriptio2.queued;\n\t\n\t      if (queued) {\n\t        this.subscribeQueue.splice(index, 1);\n\t      }\n\t    }\n\t    /**\n\t     * Get queued subscription index\n\t     * @return {Object} index\n\t     */\n\t\n\t  }, {\n\t    key: 'getQueuedSubscription',\n\t    value: function getQueuedSubscription() {\n\t      var subscriptions = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t      var index = this.subscribeQueue.findIndex(function (element) {\n\t        return subscriptions === element.subscriptions;\n\t      });\n\t      return {\n\t        index: index,\n\t        queued: -1 < index\n\t      };\n\t    }\n\t    /**\n\t     * Get a publisher for a macro service\n\t     * @param {string} prefix - Channel prefix\n\t     * @return {Function} publisher\n\t     */\n\t\n\t  }, {\n\t    key: 'getMacroPublisher',\n\t    value: function getMacroPublisher(prefix) {\n\t      var _this4 = this;\n\t\n\t      return function (name, parameters) {\n\t        var hardFail = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];\n\t        var debug = arguments.length <= 3 || arguments[3] === undefined ? 1 : arguments[3];\n\t\n\t        var channel = prefix + '/call';\n\t        _this4.publish(channel, {\n\t          name: name,\n\t          parameters: parameters,\n\t          hardFail: hardFail,\n\t          debug: debug\n\t        });\n\t      };\n\t    }\n\t    /**\n\t     * Get a publisher for a service\n\t     * @param {string} prefix - Channel prefix\n\t     * @return {Function} publisher\n\t     */\n\t\n\t  }, {\n\t    key: 'getServicePublisher',\n\t    value: function getServicePublisher(prefix) {\n\t      var _this5 = this;\n\t\n\t      return function (method, parameters) {\n\t        var channel = prefix + '/' + method;\n\t        _this5.publish(channel, parameters);\n\t      };\n\t    }\n\t    /**\n\t     * @param {{deploymentId: string, listener: Object, type: class}} parameters\n\t     * @return {Object} service\n\t     */\n\t\n\t  }, {\n\t    key: 'createService',\n\t    value: function createService(_ref21) {\n\t      var deploymentId = _ref21.deploymentId;\n\t      var listener = _ref21.listener;\n\t      var type = _ref21.type;\n\t\n\t      var isMacroType = (0, _index.isPrototypeOf)(type, _services.Macro);\n\t      var prefix = '/service/' + this.getSandboxId() + '/' + deploymentId;\n\t      var $publish = isMacroType ? this.getMacroPublisher(prefix) : this.getServicePublisher(prefix);\n\t      var service = new type({ $publish: $publish });\n\t      // Store subscription in service instance\n\t      service.$subscriptions = this.subscribe(prefix, listener);\n\t      return service;\n\t    }\n\t    /**\n\t     * Unsubcribe all subscriptions defined in given subscriptions object\n\t     * @param {Object} subscriptions\n\t     */\n\t\n\t  }, {\n\t    key: 'unsubscribe',\n\t    value: function unsubscribe(subscriptions) {\n\t      for (var method in subscriptions) {\n\t        if (subscriptions.hasOwnProperty(method)) {\n\t          this.cometd.unsubscribe(subscriptions[method]);\n\t        }\n\t      }\n\t    }\n\t    /**\n\t     * Add a connection listener to handle life cycle connection events\n\t     * @param {ConnectionStatusListener} listener\n\t     * @return {number} handler\n\t     */\n\t\n\t  }, {\n\t    key: 'addConnectionStatusListener',\n\t    value: function addConnectionStatusListener(listener) {\n\t      this.connectionListeners.push({\n\t        enabled: true,\n\t        listener: Object.assign(new _connectionStatus.ConnectionStatusListener(), listener)\n\t      });\n\t      return this.connectionListeners.length - 1;\n\t    }\n\t    /**\n\t     * Remove a connection status listener\n\t     */\n\t\n\t  }, {\n\t    key: 'removeConnectionStatusListener',\n\t    value: function removeConnectionStatusListener(handler) {\n\t      var listener = this.connectionListeners[handler];\n\t      if (listener) {\n\t        listener.enabled = false;\n\t      }\n\t    }\n\t    /**\n\t     * Wrap CometdD publish method\n\t     * @param {String} channel\n\t     * @param {Object} parameters\n\t     */\n\t\n\t  }, {\n\t    key: 'publish',\n\t    value: function publish(channel) {\n\t      var parameters = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\t\n\t      this.cometd.publish(channel, parameters);\n\t    }\n\t    /**\n\t     * Set logging level for CometD client\n\t     * Valid values are the strings 'error', 'warn', 'info' and 'debug', from\n\t     * less verbose to more verbose.\n\t     * @param {string} level\n\t     */\n\t\n\t  }, {\n\t    key: 'setLogLevel',\n\t    value: function setLogLevel(level) {\n\t      this.cometd.setLogLevel(level);\n\t    }\n\t  }]);\n\n\t  return ClientHelper;\n\t}();\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = {\n\t  CallbackPollingTransport: __webpack_require__(10),\n\t  CometD: __webpack_require__(14),\n\t  LongPollingTransport: __webpack_require__(16),\n\t  RequestTransport: __webpack_require__(13),\n\t  Transport: __webpack_require__(11),\n\t  TransportRegistry: __webpack_require__(15),\n\t  Utils: __webpack_require__(12),\n\t  WebSocketTransport: __webpack_require__(17)\n\t}\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Transport = __webpack_require__(11);\n\tvar RequestTransport = __webpack_require__(13);\n\t\n\tmodule.exports = function CallbackPollingTransport() {\n\t    var _super = new RequestTransport();\n\t    var _self = Transport.derive(_super);\n\t\n\t    _self.accept = function(version, crossDomain, url) {\n\t        return true;\n\t    };\n\t\n\t    _self.jsonpSend = function(packet) {\n\t        throw 'Abstract';\n\t    };\n\t\n\t    function _failTransportFn(envelope, request, x) {\n\t        var self = this;\n\t        return function() {\n\t            self.transportFailure(envelope, request, 'error', x);\n\t        };\n\t    }\n\t\n\t    _self.transportSend = function(envelope, request) {\n\t        var self = this;\n\t\n\t        // Microsoft Internet Explorer has a 2083 URL max length\n\t        // We must ensure that we stay within that length\n\t        var start = 0;\n\t        var length = envelope.messages.length;\n\t        var lengths = [];\n\t        while (length > 0) {\n\t            // Encode the messages because all brackets, quotes, commas, colons, etc\n\t            // present in the JSON will be URL encoded, taking many more characters\n\t            var json = JSON.stringify(envelope.messages.slice(start, start + length));\n\t            var urlLength = envelope.url.length + encodeURI(json).length;\n\t\n\t            var maxLength = this.getConfiguration().maxURILength;\n\t            if (urlLength > maxLength) {\n\t                if (length === 1) {\n\t                    var x = 'Bayeux message too big (' + urlLength + ' bytes, max is ' + maxLength + ') ' +\n\t                        'for transport ' + this.getType();\n\t                    // Keep the semantic of calling response callbacks asynchronously after the request\n\t                    self.setTimeout(_failTransportFn.call(this, envelope, request, x), 0);\n\t                    return;\n\t                }\n\t\n\t                --length;\n\t                continue;\n\t            }\n\t\n\t            lengths.push(length);\n\t            start += length;\n\t            length = envelope.messages.length - start;\n\t        }\n\t\n\t        // Here we are sure that the messages can be sent within the URL limit\n\t\n\t        var envelopeToSend = envelope;\n\t        if (lengths.length > 1) {\n\t            var begin = 0;\n\t            var end = lengths[0];\n\t            this._debug('Transport', this.getType(), 'split', envelope.messages.length, 'messages into', lengths.join(' + '));\n\t            envelopeToSend = this._mixin(false, {}, envelope);\n\t            envelopeToSend.messages = envelope.messages.slice(begin, end);\n\t            envelopeToSend.onSuccess = envelope.onSuccess;\n\t            envelopeToSend.onFailure = envelope.onFailure;\n\t\n\t            for (var i = 1; i < lengths.length; ++i) {\n\t                var nextEnvelope = this._mixin(false, {}, envelope);\n\t                begin = end;\n\t                end += lengths[i];\n\t                nextEnvelope.messages = envelope.messages.slice(begin, end);\n\t                nextEnvelope.onSuccess = envelope.onSuccess;\n\t                nextEnvelope.onFailure = envelope.onFailure;\n\t                this.send(nextEnvelope, request.metaConnect);\n\t            }\n\t        }\n\t\n\t        this._debug('Transport', this.getType(), 'sending request', request.id, 'envelope', envelopeToSend);\n\t\n\t        try {\n\t            var sameStack = true;\n\t            this.jsonpSend({\n\t                transport: this,\n\t                url: envelopeToSend.url,\n\t                sync: envelopeToSend.sync,\n\t                headers: this.getConfiguration().requestHeaders,\n\t                body: JSON.stringify(envelopeToSend.messages),\n\t                onSuccess: function(responses) {\n\t                    var success = false;\n\t                    try {\n\t                        var received = self.convertToMessages(responses);\n\t                        if (received.length === 0) {\n\t                            self.transportFailure(envelopeToSend, request, {\n\t                                httpCode: 204\n\t                            });\n\t                        } else {\n\t                            success = true;\n\t                            self.transportSuccess(envelopeToSend, request, received);\n\t                        }\n\t                    } catch (x) {\n\t                        self._debug(x);\n\t                        if (!success) {\n\t                            self.transportFailure(envelopeToSend, request, {\n\t                                exception: x\n\t                            });\n\t                        }\n\t                    }\n\t                },\n\t                onError: function(reason, exception) {\n\t                    var failure = {\n\t                        reason: reason,\n\t                        exception: exception\n\t                    };\n\t                    if (sameStack) {\n\t                        // Keep the semantic of calling response callbacks asynchronously after the request\n\t                        self.setTimeout(function() {\n\t                            self.transportFailure(envelopeToSend, request, failure);\n\t                        }, 0);\n\t                    } else {\n\t                        self.transportFailure(envelopeToSend, request, failure);\n\t                    }\n\t                }\n\t            });\n\t            sameStack = false;\n\t        } catch (xx) {\n\t            // Keep the semantic of calling response callbacks asynchronously after the request\n\t            self.setTimeout(function() {\n\t                self.transportFailure(envelopeToSend, request, {\n\t                    exception: xx\n\t                });\n\t            }, 0);\n\t        }\n\t    };\n\t\n\t    return _self;\n\t};\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Utils = __webpack_require__(12)\n\t\n\t/**\n\t * Base object with the common functionality for transports.\n\t */\n\tmodule.exports = function Transport() {\n\t    var _type;\n\t    var _cometd;\n\t    var _url;\n\t\n\t    /**\n\t     * Function invoked just after a transport has been successfully registered.\n\t     * @param type the type of transport (for example 'long-polling')\n\t     * @param cometd the cometd object this transport has been registered to\n\t     * @see #unregistered()\n\t     */\n\t    this.registered = function(type, cometd) {\n\t        _type = type;\n\t        _cometd = cometd;\n\t    };\n\t\n\t    /**\n\t     * Function invoked just after a transport has been successfully unregistered.\n\t     * @see #registered(type, cometd)\n\t     */\n\t    this.unregistered = function() {\n\t        _type = null;\n\t        _cometd = null;\n\t    };\n\t\n\t    this._debug = function() {\n\t        _cometd._debug.apply(_cometd, arguments);\n\t    };\n\t\n\t    this._mixin = function() {\n\t        return _cometd._mixin.apply(_cometd, arguments);\n\t    };\n\t\n\t    this.getConfiguration = function() {\n\t        return _cometd.getConfiguration();\n\t    };\n\t\n\t    this.getAdvice = function() {\n\t        return _cometd.getAdvice();\n\t    };\n\t\n\t    this.setTimeout = function(funktion, delay) {\n\t        return Utils.setTimeout(_cometd, funktion, delay);\n\t    };\n\t\n\t    this.clearTimeout = function(handle) {\n\t        Utils.clearTimeout(handle);\n\t    };\n\t\n\t    /**\n\t     * Converts the given response into an array of bayeux messages\n\t     * @param response the response to convert\n\t     * @return an array of bayeux messages obtained by converting the response\n\t     */\n\t    this.convertToMessages = function(response) {\n\t        if (Utils.isString(response)) {\n\t            try {\n\t                return JSON.parse(response);\n\t            } catch (x) {\n\t                this._debug('Could not convert to JSON the following string', '\"' + response + '\"');\n\t                throw x;\n\t            }\n\t        }\n\t        if (Utils.isArray(response)) {\n\t            return response;\n\t        }\n\t        if (response === undefined || response === null) {\n\t            return [];\n\t        }\n\t        if (response instanceof Object) {\n\t            return [response];\n\t        }\n\t        throw 'Conversion Error ' + response + ', typeof ' + (typeof response);\n\t    };\n\t\n\t    /**\n\t     * Returns whether this transport can work for the given version and cross domain communication case.\n\t     * @param version a string indicating the transport version\n\t     * @param crossDomain a boolean indicating whether the communication is cross domain\n\t     * @param url the URL to connect to\n\t     * @return true if this transport can work for the given version and cross domain communication case,\n\t     * false otherwise\n\t     */\n\t    this.accept = function(version, crossDomain, url) {\n\t        throw 'Abstract';\n\t    };\n\t\n\t    /**\n\t     * Returns the type of this transport.\n\t     * @see #registered(type, cometd)\n\t     */\n\t    this.getType = function() {\n\t        return _type;\n\t    };\n\t\n\t    this.getURL = function() {\n\t        return _url;\n\t    };\n\t\n\t    this.setURL = function(url) {\n\t        _url = url;\n\t    };\n\t\n\t    this.send = function(envelope, metaConnect) {\n\t        throw 'Abstract';\n\t    };\n\t\n\t    this.reset = function(init) {\n\t        this._debug('Transport', _type, 'reset', init ? 'initial' : 'retry');\n\t    };\n\t\n\t    this.abort = function() {\n\t        this._debug('Transport', _type, 'aborted');\n\t    };\n\t\n\t    this.toString = function() {\n\t        return this.getType();\n\t    };\n\t};\n\t\n\tmodule.exports.derive = function(baseObject) {\n\t    function F() {\n\t    }\n\t\n\t    F.prototype = baseObject;\n\t    return new F();\n\t};\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\texports.isString = function (value) {\n\t    if (value === undefined || value === null) {\n\t        return false;\n\t    }\n\t    return typeof value === 'string' || value instanceof String;\n\t};\n\t\n\texports.isArray = function (value) {\n\t    if (value === undefined || value === null) {\n\t        return false;\n\t    }\n\t    return value instanceof Array;\n\t};\n\t\n\t/**\n\t * Returns whether the given element is contained into the given array.\n\t * @param element the element to check presence for\n\t * @param array the array to check for the element presence\n\t * @return the index of the element, if present, or a negative index if the element is not present\n\t */\n\texports.inArray = function (element, array) {\n\t    for (var i = 0; i < array.length; ++i) {\n\t        if (element === array[i]) {\n\t            return i;\n\t        }\n\t    }\n\t    return -1;\n\t};\n\t\n\texports.setTimeout = function (cometd, funktion, delay) {\n\t    return setTimeout(function() {\n\t        try {\n\t            cometd._debug('Invoking timed function', funktion);\n\t            funktion();\n\t        } catch (x) {\n\t            cometd._debug('Exception invoking timed function', funktion, x);\n\t        }\n\t    }, delay);\n\t};\n\t\n\texports.clearTimeout = function (timeoutHandle) {\n\t    clearTimeout(timeoutHandle);\n\t};\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Transport = __webpack_require__(11)\n\tvar Utils = __webpack_require__(12)\n\t\n\t/**\n\t * Base object with the common functionality for transports based on requests.\n\t * The key responsibility is to allow at most 2 outstanding requests to the server,\n\t * to avoid that requests are sent behind a long poll.\n\t * To achieve this, we have one reserved request for the long poll, and all other\n\t * requests are serialized one after the other.\n\t */\n\tmodule.exports = function RequestTransport() {\n\t    var _super = new Transport();\n\t    var _self = Transport.derive(_super);\n\t    var _requestIds = 0;\n\t    var _metaConnectRequest = null;\n\t    var _requests = [];\n\t    var _envelopes = [];\n\t\n\t    function _coalesceEnvelopes(envelope) {\n\t        while (_envelopes.length > 0) {\n\t            var envelopeAndRequest = _envelopes[0];\n\t            var newEnvelope = envelopeAndRequest[0];\n\t            var newRequest = envelopeAndRequest[1];\n\t            if (newEnvelope.url === envelope.url &&\n\t                newEnvelope.sync === envelope.sync) {\n\t                _envelopes.shift();\n\t                envelope.messages = envelope.messages.concat(newEnvelope.messages);\n\t                this._debug('Coalesced', newEnvelope.messages.length, 'messages from request', newRequest.id);\n\t                continue;\n\t            }\n\t            break;\n\t        }\n\t    }\n\t\n\t    function _transportSend(envelope, request) {\n\t        this.transportSend(envelope, request);\n\t        request.expired = false;\n\t\n\t        if (!envelope.sync) {\n\t            var maxDelay = this.getConfiguration().maxNetworkDelay;\n\t            var delay = maxDelay;\n\t            if (request.metaConnect === true) {\n\t                delay += this.getAdvice().timeout;\n\t            }\n\t\n\t            this._debug('Transport', this.getType(), 'waiting at most', delay, 'ms for the response, maxNetworkDelay', maxDelay);\n\t\n\t            var self = this;\n\t            request.timeout = self.setTimeout(function() {\n\t                request.expired = true;\n\t                var errorMessage = 'Request ' + request.id + ' of transport ' + self.getType() + ' exceeded ' + delay + ' ms max network delay';\n\t                var failure = {\n\t                    reason: errorMessage\n\t                };\n\t                var xhr = request.xhr;\n\t                failure.httpCode = self.xhrStatus(xhr);\n\t                self.abortXHR(xhr);\n\t                self._debug(errorMessage);\n\t                self.complete(request, false, request.metaConnect);\n\t                envelope.onFailure(xhr, envelope.messages, failure);\n\t            }, delay);\n\t        }\n\t    }\n\t\n\t    function _queueSend(envelope) {\n\t        var requestId = ++_requestIds;\n\t        var request = {\n\t            id: requestId,\n\t            metaConnect: false,\n\t            envelope: envelope\n\t        };\n\t\n\t        // Consider the metaConnect requests which should always be present\n\t        if (_requests.length < this.getConfiguration().maxConnections - 1) {\n\t            _requests.push(request);\n\t            _transportSend.call(this, envelope, request);\n\t        } else {\n\t            this._debug('Transport', this.getType(), 'queueing request', requestId, 'envelope', envelope);\n\t            _envelopes.push([envelope, request]);\n\t        }\n\t    }\n\t\n\t    function _metaConnectComplete(request) {\n\t        var requestId = request.id;\n\t        this._debug('Transport', this.getType(), 'metaConnect complete, request', requestId);\n\t        if (_metaConnectRequest !== null && _metaConnectRequest.id !== requestId) {\n\t            throw 'Longpoll request mismatch, completing request ' + requestId;\n\t        }\n\t\n\t        // Reset metaConnect request\n\t        _metaConnectRequest = null;\n\t    }\n\t\n\t    function _complete(request, success) {\n\t        var index = Utils.inArray(request, _requests);\n\t        // The index can be negative if the request has been aborted\n\t        if (index >= 0) {\n\t            _requests.splice(index, 1);\n\t        }\n\t\n\t        if (_envelopes.length > 0) {\n\t            var envelopeAndRequest = _envelopes.shift();\n\t            var nextEnvelope = envelopeAndRequest[0];\n\t            var nextRequest = envelopeAndRequest[1];\n\t            this._debug('Transport dequeued request', nextRequest.id);\n\t            if (success) {\n\t                if (this.getConfiguration().autoBatch) {\n\t                    _coalesceEnvelopes.call(this, nextEnvelope);\n\t                }\n\t                _queueSend.call(this, nextEnvelope);\n\t                this._debug('Transport completed request', request.id, nextEnvelope);\n\t            } else {\n\t                // Keep the semantic of calling response callbacks asynchronously after the request\n\t                var self = this;\n\t                self.setTimeout(function() {\n\t                    self.complete(nextRequest, false, nextRequest.metaConnect);\n\t                    var failure = {\n\t                        reason: 'Previous request failed'\n\t                    };\n\t                    var xhr = nextRequest.xhr;\n\t                    failure.httpCode = self.xhrStatus(xhr);\n\t                    nextEnvelope.onFailure(xhr, nextEnvelope.messages, failure);\n\t                }, 0);\n\t            }\n\t        }\n\t    }\n\t\n\t    _self.complete = function(request, success, metaConnect) {\n\t        if (metaConnect) {\n\t            _metaConnectComplete.call(this, request);\n\t        } else {\n\t            _complete.call(this, request, success);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Performs the actual send depending on the transport type details.\n\t     * @param envelope the envelope to send\n\t     * @param request the request information\n\t     */\n\t    _self.transportSend = function(envelope, request) {\n\t        throw 'Abstract';\n\t    };\n\t\n\t    _self.transportSuccess = function(envelope, request, responses) {\n\t        if (!request.expired) {\n\t            this.clearTimeout(request.timeout);\n\t            this.complete(request, true, request.metaConnect);\n\t            if (responses && responses.length > 0) {\n\t                envelope.onSuccess(responses);\n\t            } else {\n\t                envelope.onFailure(request.xhr, envelope.messages, {\n\t                    httpCode: 204\n\t                });\n\t            }\n\t        }\n\t    };\n\t\n\t    _self.transportFailure = function(envelope, request, failure) {\n\t        if (!request.expired) {\n\t            this.clearTimeout(request.timeout);\n\t            this.complete(request, false, request.metaConnect);\n\t            envelope.onFailure(request.xhr, envelope.messages, failure);\n\t        }\n\t    };\n\t\n\t    function _metaConnectSend(envelope) {\n\t        if (_metaConnectRequest !== null) {\n\t            throw 'Concurrent metaConnect requests not allowed, request id=' + _metaConnectRequest.id + ' not yet completed';\n\t        }\n\t\n\t        var requestId = ++_requestIds;\n\t        this._debug('Transport', this.getType(), 'metaConnect send, request', requestId, 'envelope', envelope);\n\t        var request = {\n\t            id: requestId,\n\t            metaConnect: true,\n\t            envelope: envelope\n\t        };\n\t        _transportSend.call(this, envelope, request);\n\t        _metaConnectRequest = request;\n\t    }\n\t\n\t    _self.send = function(envelope, metaConnect) {\n\t        if (metaConnect) {\n\t            _metaConnectSend.call(this, envelope);\n\t        } else {\n\t            _queueSend.call(this, envelope);\n\t        }\n\t    };\n\t\n\t    _self.abort = function() {\n\t        _super.abort();\n\t        for (var i = 0; i < _requests.length; ++i) {\n\t            var request = _requests[i];\n\t            if (request) {\n\t                this._debug('Aborting request', request);\n\t                if (!this.abortXHR(request.xhr)) {\n\t                    this.transportFailure(request.envelope, request, {reason: 'abort'});\n\t                }\n\t            }\n\t        }\n\t        if (_metaConnectRequest) {\n\t            this._debug('Aborting metaConnect request', _metaConnectRequest);\n\t            if (!this.abortXHR(_metaConnectRequest.xhr)) {\n\t                this.transportFailure(_metaConnectRequest.envelope, _metaConnectRequest, {reason: 'abort'});\n\t            }\n\t        }\n\t        this.reset(true);\n\t    };\n\t\n\t    _self.reset = function(init) {\n\t        _super.reset(init);\n\t        _metaConnectRequest = null;\n\t        _requests = [];\n\t        _envelopes = [];\n\t    };\n\t\n\t    _self.abortXHR = function(xhr) {\n\t        if (xhr) {\n\t            try {\n\t                var state = xhr.readyState;\n\t                xhr.abort();\n\t                return state !== XMLHttpRequest.UNSENT;\n\t            } catch (x) {\n\t                this._debug(x);\n\t            }\n\t        }\n\t        return false;\n\t    };\n\t\n\t    _self.xhrStatus = function(xhr) {\n\t        if (xhr) {\n\t            try {\n\t                return xhr.status;\n\t            } catch (x) {\n\t                this._debug(x);\n\t            }\n\t        }\n\t        return -1;\n\t    };\n\t\n\t    return _self;\n\t};\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar TransportRegistry = __webpack_require__(15)\n\tvar Utils = __webpack_require__(12)\n\t/**\n\t * The constructor for a CometD object, identified by an optional name.\n\t * The default name is the string 'default'.\n\t * In the rare case a page needs more than one Bayeux conversation,\n\t * a new instance can be created via:\n\t * <pre>\n\t * var bayeuxUrl2 = ...;\n\t *\n\t * // Dojo style\n\t * var cometd2 = new dojox.CometD('another_optional_name');\n\t *\n\t * // jQuery style\n\t * var cometd2 = new $.CometD('another_optional_name');\n\t *\n\t * cometd2.init({url: bayeuxUrl2});\n\t * </pre>\n\t * @param name the optional name of this cometd object\n\t */\n\tmodule.exports = function CometD(name) {\n\t    var _cometd = this;\n\t    var _name = name || 'default';\n\t    var _crossDomain = false;\n\t    var _transports = new TransportRegistry();\n\t    var _transport;\n\t    var _status = 'disconnected';\n\t    var _messageId = 0;\n\t    var _clientId = null;\n\t    var _batch = 0;\n\t    var _messageQueue = [];\n\t    var _internalBatch = false;\n\t    var _listeners = {};\n\t    var _backoff = 0;\n\t    var _scheduledSend = null;\n\t    var _extensions = [];\n\t    var _advice = {};\n\t    var _handshakeProps;\n\t    var _handshakeCallback;\n\t    var _callbacks = {};\n\t    var _remoteCalls = {};\n\t    var _reestablish = false;\n\t    var _connected = false;\n\t    var _unconnectTime = 0;\n\t    var _handshakeMessages = 0;\n\t    var _config = {\n\t        protocol: null,\n\t        stickyReconnect: true,\n\t        connectTimeout: 0,\n\t        maxConnections: 2,\n\t        backoffIncrement: 1000,\n\t        maxBackoff: 60000,\n\t        logLevel: 'info',\n\t        reverseIncomingExtensions: true,\n\t        maxNetworkDelay: 10000,\n\t        requestHeaders: {},\n\t        appendMessageTypeToURL: true,\n\t        autoBatch: false,\n\t        urls: {},\n\t        maxURILength: 2000,\n\t        advice: {\n\t            timeout: 60000,\n\t            interval: 0,\n\t            reconnect: 'retry',\n\t            maxInterval: 0\n\t        }\n\t    };\n\t\n\t    function _fieldValue(object, name) {\n\t        try {\n\t            return object[name];\n\t        } catch (x) {\n\t            return undefined;\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Mixes in the given objects into the target object by copying the properties.\n\t     * @param deep if the copy must be deep\n\t     * @param target the target object\n\t     * @param objects the objects whose properties are copied into the target\n\t     */\n\t    this._mixin = function(deep, target, objects) {\n\t        var result = target || {};\n\t\n\t        // Skip first 2 parameters (deep and target), and loop over the others\n\t        for (var i = 2; i < arguments.length; ++i) {\n\t            var object = arguments[i];\n\t\n\t            if (object === undefined || object === null) {\n\t                continue;\n\t            }\n\t\n\t            for (var propName in object) {\n\t                if (object.hasOwnProperty(propName)) {\n\t                    var prop = _fieldValue(object, propName);\n\t                    var targ = _fieldValue(result, propName);\n\t\n\t                    // Avoid infinite loops\n\t                    if (prop === target) {\n\t                        continue;\n\t                    }\n\t                    // Do not mixin undefined values\n\t                    if (prop === undefined) {\n\t                        continue;\n\t                    }\n\t\n\t                    if (deep && typeof prop === 'object' && prop !== null) {\n\t                        if (prop instanceof Array) {\n\t                            result[propName] = this._mixin(deep, targ instanceof Array ? targ : [], prop);\n\t                        } else {\n\t                            var source = typeof targ === 'object' && !(targ instanceof Array) ? targ : {};\n\t                            result[propName] = this._mixin(deep, source, prop);\n\t                        }\n\t                    } else {\n\t                        result[propName] = prop;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t\n\t        return result;\n\t    };\n\t\n\t    function _isString(value) {\n\t        return Utils.isString(value);\n\t    }\n\t\n\t    function _isFunction(value) {\n\t        if (value === undefined || value === null) {\n\t            return false;\n\t        }\n\t        return typeof value === 'function';\n\t    }\n\t\n\t    function _zeroPad(value, length) {\n\t        var result = '';\n\t        while (--length > 0) {\n\t            if (value >= Math.pow(10, length)) {\n\t                break;\n\t            }\n\t            result += '0';\n\t        }\n\t        result += value;\n\t        return result;\n\t    }\n\t\n\t    function _log(level, args) {\n\t        if ('undefined' !== typeof console) {\n\t            var logger = console[level];\n\t            if (_isFunction(logger)) {\n\t                var now = new Date();\n\t                [].splice.call(args, 0, 0, _zeroPad(now.getHours(), 2) + ':' + _zeroPad(now.getMinutes(), 2) + ':' +\n\t                        _zeroPad(now.getSeconds(), 2) + '.' + _zeroPad(now.getMilliseconds(), 3));\n\t                logger.apply(console, args);\n\t            }\n\t        }\n\t    }\n\t\n\t    this._warn = function() {\n\t        _log('warn', arguments);\n\t    };\n\t\n\t    this._info = function() {\n\t        if (_config.logLevel !== 'warn') {\n\t            _log('info', arguments);\n\t        }\n\t    };\n\t\n\t    this._debug = function() {\n\t        if (_config.logLevel === 'debug') {\n\t            _log('debug', arguments);\n\t        }\n\t    };\n\t\n\t    function _splitURL(url) {\n\t        // [1] = protocol://,\n\t        // [2] = host:port,\n\t        // [3] = host,\n\t        // [4] = IPv6_host,\n\t        // [5] = IPv4_host,\n\t        // [6] = :port,\n\t        // [7] = port,\n\t        // [8] = uri,\n\t        // [9] = rest (query / fragment)\n\t        return /(^https?:\\/\\/)?(((\\[[^\\]]+\\])|([^:\\/\\?#]+))(:(\\d+))?)?([^\\?#]*)(.*)?/.exec(url);\n\t    }\n\t\n\t    /**\n\t     * Returns whether the given hostAndPort is cross domain.\n\t     * The default implementation checks against window.location.host\n\t     * but this function can be overridden to make it work in non-browser\n\t     * environments.\n\t     *\n\t     * @param hostAndPort the host and port in format host:port\n\t     * @return whether the given hostAndPort is cross domain\n\t     */\n\t    this._isCrossDomain = function(hostAndPort) {\n\t        return hostAndPort && hostAndPort !== window.location.host;\n\t    };\n\t\n\t    function _configure(configuration) {\n\t        _cometd._debug('Configuring cometd object with', configuration);\n\t        // Support old style param, where only the Bayeux server URL was passed\n\t        if (_isString(configuration)) {\n\t            configuration = { url: configuration };\n\t        }\n\t        if (!configuration) {\n\t            configuration = {};\n\t        }\n\t\n\t        _config = _cometd._mixin(false, _config, configuration);\n\t\n\t        var url = _cometd.getURL();\n\t        if (!url) {\n\t            throw 'Missing required configuration parameter \\'url\\' specifying the Bayeux server URL';\n\t        }\n\t\n\t        // Check if we're cross domain.\n\t        var urlParts = _splitURL(url);\n\t        var hostAndPort = urlParts[2];\n\t        var uri = urlParts[8];\n\t        var afterURI = urlParts[9];\n\t        _crossDomain = _cometd._isCrossDomain(hostAndPort);\n\t\n\t        // Check if appending extra path is supported\n\t        if (_config.appendMessageTypeToURL) {\n\t            if (afterURI !== undefined && afterURI.length > 0) {\n\t                _cometd._info('Appending message type to URI ' + uri + afterURI + ' is not supported, disabling \\'appendMessageTypeToURL\\' configuration');\n\t                _config.appendMessageTypeToURL = false;\n\t            } else {\n\t                var uriSegments = uri.split('/');\n\t                var lastSegmentIndex = uriSegments.length - 1;\n\t                if (uri.match(/\\/$/)) {\n\t                    lastSegmentIndex -= 1;\n\t                }\n\t                if (uriSegments[lastSegmentIndex].indexOf('.') >= 0) {\n\t                    // Very likely the CometD servlet's URL pattern is mapped to an extension, such as *.cometd\n\t                    // It will be difficult to add the extra path in this case\n\t                    _cometd._info('Appending message type to URI ' + uri + ' is not supported, disabling \\'appendMessageTypeToURL\\' configuration');\n\t                    _config.appendMessageTypeToURL = false;\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    function _removeListener(subscription) {\n\t        if (subscription) {\n\t            var subscriptions = _listeners[subscription.channel];\n\t            if (subscriptions && subscriptions[subscription.id]) {\n\t                delete subscriptions[subscription.id];\n\t                _cometd._debug('Removed', subscription.listener ? 'listener' : 'subscription', subscription);\n\t            }\n\t        }\n\t    }\n\t\n\t    function _removeSubscription(subscription) {\n\t        if (subscription && !subscription.listener) {\n\t            _removeListener(subscription);\n\t        }\n\t    }\n\t\n\t    function _clearSubscriptions() {\n\t        for (var channel in _listeners) {\n\t            if (_listeners.hasOwnProperty(channel)) {\n\t                var subscriptions = _listeners[channel];\n\t                if (subscriptions) {\n\t                    for (var i = 0; i < subscriptions.length; ++i) {\n\t                        _removeSubscription(subscriptions[i]);\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    function _setStatus(newStatus) {\n\t        if (_status !== newStatus) {\n\t            _cometd._debug('Status', _status, '->', newStatus);\n\t            _status = newStatus;\n\t        }\n\t    }\n\t\n\t    function _isDisconnected() {\n\t        return _status === 'disconnecting' || _status === 'disconnected';\n\t    }\n\t\n\t    function _nextMessageId() {\n\t        var result = ++_messageId;\n\t        return '' + result;\n\t    }\n\t\n\t    function _applyExtension(scope, callback, name, message, outgoing) {\n\t        try {\n\t            return callback.call(scope, message);\n\t        } catch (x) {\n\t            var handler = _cometd.onExtensionException;\n\t            if (_isFunction(handler)) {\n\t                _cometd._debug('Invoking extension exception handler', name, x);\n\t                try {\n\t                    handler.call(_cometd, x, name, outgoing, message);\n\t                } catch (xx) {\n\t                    _cometd._info('Exception during execution of extension exception handler', name, xx);\n\t                }\n\t            } else {\n\t                _cometd._info('Exception during execution of extension', name, x);\n\t            }\n\t            return message;\n\t        }\n\t    }\n\t\n\t    function _applyIncomingExtensions(message) {\n\t        for (var i = 0; i < _extensions.length; ++i) {\n\t            if (message === undefined || message === null) {\n\t                break;\n\t            }\n\t\n\t            var index = _config.reverseIncomingExtensions ? _extensions.length - 1 - i : i;\n\t            var extension = _extensions[index];\n\t            var callback = extension.extension.incoming;\n\t            if (_isFunction(callback)) {\n\t                var result = _applyExtension(extension.extension, callback, extension.name, message, false);\n\t                message = result === undefined ? message : result;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t\n\t    function _applyOutgoingExtensions(message) {\n\t        for (var i = 0; i < _extensions.length; ++i) {\n\t            if (message === undefined || message === null) {\n\t                break;\n\t            }\n\t\n\t            var extension = _extensions[i];\n\t            var callback = extension.extension.outgoing;\n\t            if (_isFunction(callback)) {\n\t                var result = _applyExtension(extension.extension, callback, extension.name, message, true);\n\t                message = result === undefined ? message : result;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t\n\t    function _notify(channel, message) {\n\t        var subscriptions = _listeners[channel];\n\t        if (subscriptions && subscriptions.length > 0) {\n\t            for (var i = 0; i < subscriptions.length; ++i) {\n\t                var subscription = subscriptions[i];\n\t                // Subscriptions may come and go, so the array may have 'holes'\n\t                if (subscription) {\n\t                    try {\n\t                        subscription.callback.call(subscription.scope, message);\n\t                    } catch (x) {\n\t                        var handler = _cometd.onListenerException;\n\t                        if (_isFunction(handler)) {\n\t                            _cometd._debug('Invoking listener exception handler', subscription, x);\n\t                            try {\n\t                                handler.call(_cometd, x, subscription, subscription.listener, message);\n\t                            } catch (xx) {\n\t                                _cometd._info('Exception during execution of listener exception handler', subscription, xx);\n\t                            }\n\t                        } else {\n\t                            _cometd._info('Exception during execution of listener', subscription, message, x);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    function _notifyListeners(channel, message) {\n\t        // Notify direct listeners\n\t        _notify(channel, message);\n\t\n\t        // Notify the globbing listeners\n\t        var channelParts = channel.split('/');\n\t        var last = channelParts.length - 1;\n\t        for (var i = last; i > 0; --i) {\n\t            var channelPart = channelParts.slice(0, i).join('/') + '/*';\n\t            // We don't want to notify /foo/* if the channel is /foo/bar/baz,\n\t            // so we stop at the first non recursive globbing\n\t            if (i === last) {\n\t                _notify(channelPart, message);\n\t            }\n\t            // Add the recursive globber and notify\n\t            channelPart += '*';\n\t            _notify(channelPart, message);\n\t        }\n\t    }\n\t\n\t    function _cancelDelayedSend() {\n\t        if (_scheduledSend !== null) {\n\t            Utils.clearTimeout(_scheduledSend);\n\t        }\n\t        _scheduledSend = null;\n\t    }\n\t\n\t    function _delayedSend(operation, delay) {\n\t        _cancelDelayedSend();\n\t        var time = _advice.interval + delay;\n\t        _cometd._debug('Function scheduled in', time, 'ms, interval =', _advice.interval, 'backoff =', _backoff, operation);\n\t        _scheduledSend = Utils.setTimeout(_cometd, operation, time);\n\t    }\n\t\n\t    // Needed to break cyclic dependencies between function definitions\n\t    var _handleMessages;\n\t    var _handleFailure;\n\t\n\t    /**\n\t     * Delivers the messages to the CometD server\n\t     * @param sync whether the send is synchronous\n\t     * @param messages the array of messages to send\n\t     * @param metaConnect true if this send is on /meta/connect\n\t     * @param extraPath an extra path to append to the Bayeux server URL\n\t     */\n\t    function _send(sync, messages, metaConnect, extraPath) {\n\t        // We must be sure that the messages have a clientId.\n\t        // This is not guaranteed since the handshake may take time to return\n\t        // (and hence the clientId is not known yet) and the application\n\t        // may create other messages.\n\t        for (var i = 0; i < messages.length; ++i) {\n\t            var message = messages[i];\n\t            var messageId = message.id;\n\t\n\t            if (_clientId) {\n\t                message.clientId = _clientId;\n\t            }\n\t\n\t            message = _applyOutgoingExtensions(message);\n\t            if (message !== undefined && message !== null) {\n\t                // Extensions may have modified the message id, but we need to own it.\n\t                message.id = messageId;\n\t                messages[i] = message;\n\t            } else {\n\t                delete _callbacks[messageId];\n\t                messages.splice(i--, 1);\n\t            }\n\t        }\n\t\n\t        if (messages.length === 0) {\n\t            return;\n\t        }\n\t\n\t        var url = _cometd.getURL();\n\t        if (_config.appendMessageTypeToURL) {\n\t            // If url does not end with '/', then append it\n\t            if (!url.match(/\\/$/)) {\n\t                url = url + '/';\n\t            }\n\t            if (extraPath) {\n\t                url = url + extraPath;\n\t            }\n\t        }\n\t\n\t        var envelope = {\n\t            url: url,\n\t            sync: sync,\n\t            messages: messages,\n\t            onSuccess: function(rcvdMessages) {\n\t                try {\n\t                    _handleMessages.call(_cometd, rcvdMessages);\n\t                } catch (x) {\n\t                    _cometd._info('Exception during handling of messages', x);\n\t                }\n\t            },\n\t            onFailure: function(conduit, messages, failure) {\n\t                try {\n\t                    var transport = _cometd.getTransport();\n\t                    failure.connectionType = transport ? transport.getType() : \"unknown\";\n\t                    _handleFailure.call(_cometd, conduit, messages, failure);\n\t                } catch (x) {\n\t                    _cometd._info('Exception during handling of failure', x);\n\t                }\n\t            }\n\t        };\n\t        _cometd._debug('Send', envelope);\n\t        _transport.send(envelope, metaConnect);\n\t    }\n\t\n\t    function _queueSend(message) {\n\t        if (_batch > 0 || _internalBatch === true) {\n\t            _messageQueue.push(message);\n\t        } else {\n\t            _send(false, [message], false);\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Sends a complete bayeux message.\n\t     * This method is exposed as a public so that extensions may use it\n\t     * to send bayeux message directly, for example in case of re-sending\n\t     * messages that have already been sent but that for some reason must\n\t     * be resent.\n\t     */\n\t    this.send = _queueSend;\n\t\n\t    function _resetBackoff() {\n\t        _backoff = 0;\n\t    }\n\t\n\t    function _increaseBackoff() {\n\t        if (_backoff < _config.maxBackoff) {\n\t            _backoff += _config.backoffIncrement;\n\t        }\n\t        return _backoff;\n\t    }\n\t\n\t    /**\n\t     * Starts a the batch of messages to be sent in a single request.\n\t     * @see #_endBatch(sendMessages)\n\t     */\n\t    function _startBatch() {\n\t        ++_batch;\n\t        _cometd._debug('Starting batch, depth', _batch);\n\t    }\n\t\n\t    function _flushBatch() {\n\t        var messages = _messageQueue;\n\t        _messageQueue = [];\n\t        if (messages.length > 0) {\n\t            _send(false, messages, false);\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Ends the batch of messages to be sent in a single request,\n\t     * optionally sending messages present in the message queue depending\n\t     * on the given argument.\n\t     * @see #_startBatch()\n\t     */\n\t    function _endBatch() {\n\t        --_batch;\n\t        _cometd._debug('Ending batch, depth', _batch);\n\t        if (_batch < 0) {\n\t            throw 'Calls to startBatch() and endBatch() are not paired';\n\t        }\n\t\n\t        if (_batch === 0 && !_isDisconnected() && !_internalBatch) {\n\t            _flushBatch();\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Sends the connect message\n\t     */\n\t    function _connect() {\n\t        if (!_isDisconnected()) {\n\t            var bayeuxMessage = {\n\t                id: _nextMessageId(),\n\t                channel: '/meta/connect',\n\t                connectionType: _transport.getType()\n\t            };\n\t\n\t            // In case of reload or temporary loss of connection\n\t            // we want the next successful connect to return immediately\n\t            // instead of being held by the server, so that connect listeners\n\t            // can be notified that the connection has been re-established\n\t            if (!_connected) {\n\t                bayeuxMessage.advice = { timeout: 0 };\n\t            }\n\t\n\t            _setStatus('connecting');\n\t            _cometd._debug('Connect sent', bayeuxMessage);\n\t            _send(false, [bayeuxMessage], true, 'connect');\n\t            _setStatus('connected');\n\t        }\n\t    }\n\t\n\t    function _delayedConnect(delay) {\n\t        _setStatus('connecting');\n\t        _delayedSend(function() {\n\t            _connect();\n\t        }, delay);\n\t    }\n\t\n\t    function _updateAdvice(newAdvice) {\n\t        if (newAdvice) {\n\t            _advice = _cometd._mixin(false, {}, _config.advice, newAdvice);\n\t            _cometd._debug('New advice', _advice);\n\t        }\n\t    }\n\t\n\t    function _disconnect(abort) {\n\t        _cancelDelayedSend();\n\t        if (abort && _transport) {\n\t            _transport.abort();\n\t        }\n\t        _clientId = null;\n\t        _setStatus('disconnected');\n\t        _batch = 0;\n\t        _resetBackoff();\n\t        _transport = null;\n\t\n\t        // Fail any existing queued message\n\t        if (_messageQueue.length > 0) {\n\t            var messages = _messageQueue;\n\t            _messageQueue = [];\n\t            _handleFailure.call(_cometd, undefined, messages, {\n\t                reason: 'Disconnected'\n\t            });\n\t        }\n\t    }\n\t\n\t    function _notifyTransportFailure(oldTransport, newTransport, failure) {\n\t        var handler = _cometd.onTransportException;\n\t        if (_isFunction(handler)) {\n\t            _cometd._debug('Invoking transport exception handler', oldTransport, newTransport, failure);\n\t            try {\n\t                handler.call(_cometd, failure, oldTransport, newTransport);\n\t            } catch (x) {\n\t                _cometd._info('Exception during execution of transport exception handler', x);\n\t            }\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Sends the initial handshake message\n\t     */\n\t    function _handshake(handshakeProps, handshakeCallback) {\n\t        if (_isFunction(handshakeProps)) {\n\t            handshakeCallback = handshakeProps;\n\t            handshakeProps = undefined;\n\t        }\n\t\n\t        _clientId = null;\n\t\n\t        _clearSubscriptions();\n\t\n\t        // Reset the transports if we're not retrying the handshake\n\t        if (_isDisconnected()) {\n\t            _transports.reset(true);\n\t            _updateAdvice(_config.advice);\n\t        } else {\n\t            // We are retrying the handshake, either because another handshake failed\n\t            // and we're backing off, or because the server timed us out and asks us to\n\t            // re-handshake: in both cases, make sure that if the handshake succeeds\n\t            // the next action is a connect.\n\t            _updateAdvice(_cometd._mixin(false, _advice, {reconnect: 'retry'}));\n\t        }\n\t\n\t        _batch = 0;\n\t\n\t        // Mark the start of an internal batch.\n\t        // This is needed because handshake and connect are async.\n\t        // It may happen that the application calls init() then subscribe()\n\t        // and the subscribe message is sent before the connect message, if\n\t        // the subscribe message is not held until the connect message is sent.\n\t        // So here we start a batch to hold temporarily any message until\n\t        // the connection is fully established.\n\t        _internalBatch = true;\n\t\n\t        // Save the properties provided by the user, so that\n\t        // we can reuse them during automatic re-handshake\n\t        _handshakeProps = handshakeProps;\n\t        _handshakeCallback = handshakeCallback;\n\t\n\t        var version = '1.0';\n\t\n\t        // Figure out the transports to send to the server\n\t        var url = _cometd.getURL();\n\t        var transportTypes = _transports.findTransportTypes(version, _crossDomain, url);\n\t\n\t        var bayeuxMessage = {\n\t            id: _nextMessageId(),\n\t            version: version,\n\t            minimumVersion: version,\n\t            channel: '/meta/handshake',\n\t            supportedConnectionTypes: transportTypes,\n\t            advice: {\n\t                timeout: _advice.timeout,\n\t                interval: _advice.interval\n\t            }\n\t        };\n\t        // Do not allow the user to override important fields.\n\t        var message = _cometd._mixin(false, {}, _handshakeProps, bayeuxMessage);\n\t\n\t        // Save the callback.\n\t        _cometd._putCallback(message.id, handshakeCallback);\n\t\n\t        // Pick up the first available transport as initial transport\n\t        // since we don't know if the server supports it\n\t        if (!_transport) {\n\t            _transport = _transports.negotiateTransport(transportTypes, version, _crossDomain, url);\n\t            if (!_transport) {\n\t                var failure = 'Could not find initial transport among: ' + _transports.getTransportTypes();\n\t                _cometd._warn(failure);\n\t                throw failure;\n\t            }\n\t        }\n\t\n\t        _cometd._debug('Initial transport is', _transport.getType());\n\t\n\t        // We started a batch to hold the application messages,\n\t        // so here we must bypass it and send immediately.\n\t        _setStatus('handshaking');\n\t        _cometd._debug('Handshake sent', message);\n\t        _send(false, [message], false, 'handshake');\n\t    }\n\t\n\t    function _delayedHandshake(delay) {\n\t        _setStatus('handshaking');\n\t\n\t        // We will call _handshake() which will reset _clientId, but we want to avoid\n\t        // that between the end of this method and the call to _handshake() someone may\n\t        // call publish() (or other methods that call _queueSend()).\n\t        _internalBatch = true;\n\t\n\t        _delayedSend(function() {\n\t            _handshake(_handshakeProps, _handshakeCallback);\n\t        }, delay);\n\t    }\n\t\n\t    function _notifyCallback(callback, message) {\n\t        try {\n\t            callback.call(_cometd, message);\n\t        } catch (x) {\n\t            var handler = _cometd.onCallbackException;\n\t            if (_isFunction(handler)) {\n\t                _cometd._debug('Invoking callback exception handler', x);\n\t                try {\n\t                    handler.call(_cometd, x, message);\n\t                } catch (xx) {\n\t                    _cometd._info('Exception during execution of callback exception handler', xx);\n\t                }\n\t            } else {\n\t                _cometd._info('Exception during execution of message callback', x);\n\t            }\n\t        }\n\t    }\n\t\n\t    this._getCallback = function(messageId) {\n\t        return _callbacks[messageId];\n\t    };\n\t\n\t    this._putCallback = function(messageId, callback) {\n\t        var result = this._getCallback(messageId);\n\t        if (_isFunction(callback)) {\n\t            _callbacks[messageId] = callback;\n\t        }\n\t        return result;\n\t    };\n\t\n\t    function _handleCallback(message) {\n\t        var callback = _cometd._getCallback([message.id]);\n\t        if (_isFunction(callback)) {\n\t            delete _callbacks[message.id];\n\t            _notifyCallback(callback, message);\n\t        }\n\t    }\n\t\n\t    function _handleRemoteCall(message) {\n\t        var context = _remoteCalls[message.id];\n\t        delete _remoteCalls[message.id];\n\t        _cometd._debug('Handling remote call response for', message, 'with context', context);\n\t        if (context) {\n\t            // Clear the timeout, if present.\n\t            var timeout = context.timeout;\n\t            if (timeout) {\n\t                Utils.clearTimeout(timeout);\n\t            }\n\t\n\t            var callback = context.callback;\n\t            if (_isFunction(callback)) {\n\t                _notifyCallback(callback, message);\n\t                return true;\n\t            }\n\t        }\n\t        return false;\n\t    }\n\t\n\t    function _failHandshake(message) {\n\t        _handleCallback(message);\n\t        _notifyListeners('/meta/handshake', message);\n\t        _notifyListeners('/meta/unsuccessful', message);\n\t\n\t        // Only try again if we haven't been disconnected and\n\t        // the advice permits us to retry the handshake\n\t        var retry = !_isDisconnected() && _advice.reconnect !== 'none';\n\t        if (retry) {\n\t            _increaseBackoff();\n\t            _delayedHandshake();\n\t        } else {\n\t            _disconnect(true);\n\t        }\n\t    }\n\t\n\t    function _handshakeResponse(message) {\n\t        if (message.successful) {\n\t            // Save clientId, figure out transport, then follow the advice to connect\n\t            _clientId = message.clientId;\n\t\n\t            var url = _cometd.getURL();\n\t            var newTransport = _transports.negotiateTransport(message.supportedConnectionTypes, message.version, _crossDomain, url);\n\t            if (newTransport === null) {\n\t                var failure = 'Could not negotiate transport with server; client=[' +\n\t                    _transports.findTransportTypes(message.version, _crossDomain, url) +\n\t                    '], server=[' + message.supportedConnectionTypes + ']';\n\t                var oldTransport = _cometd.getTransport();\n\t                _notifyTransportFailure(oldTransport.getType(), null, {\n\t                    reason: failure,\n\t                    connectionType: oldTransport.getType(),\n\t                    transport: oldTransport\n\t                });\n\t                _cometd._warn(failure);\n\t                _disconnect(true);\n\t                return;\n\t            } else if (_transport !== newTransport) {\n\t                _cometd._debug('Transport', _transport.getType(), '->', newTransport.getType());\n\t                _transport = newTransport;\n\t            }\n\t\n\t            // End the internal batch and allow held messages from the application\n\t            // to go to the server (see _handshake() where we start the internal batch).\n\t            _internalBatch = false;\n\t            _flushBatch();\n\t\n\t            // Here the new transport is in place, as well as the clientId, so\n\t            // the listeners can perform a publish() if they want.\n\t            // Notify the listeners before the connect below.\n\t            message.reestablish = _reestablish;\n\t            _reestablish = true;\n\t\n\t            _handleCallback(message);\n\t            _notifyListeners('/meta/handshake', message);\n\t\n\t            var action = _isDisconnected() ? 'none' : _advice.reconnect;\n\t            switch (action) {\n\t                case 'retry':\n\t                    _resetBackoff();\n\t                    _delayedConnect();\n\t                    break;\n\t                case 'none':\n\t                    _disconnect(true);\n\t                    break;\n\t                default:\n\t                    throw 'Unrecognized advice action ' + action;\n\t            }\n\t        } else {\n\t            _failHandshake(message);\n\t        }\n\t    }\n\t\n\t    function _handshakeFailure(message) {\n\t        var version = '1.0';\n\t        var url = _cometd.getURL();\n\t        var oldTransport = _cometd.getTransport();\n\t        var transportTypes = _transports.findTransportTypes(version, _crossDomain, url);\n\t        var newTransport = _transports.negotiateTransport(transportTypes, version, _crossDomain, url);\n\t        if (!newTransport) {\n\t            _notifyTransportFailure(oldTransport.getType(), null, message.failure);\n\t            _cometd._warn('Could not negotiate transport; client=[' + transportTypes + ']');\n\t            _disconnect(true);\n\t            _failHandshake(message);\n\t        } else {\n\t            _cometd._debug('Transport', oldTransport.getType(), '->', newTransport.getType());\n\t            _notifyTransportFailure(oldTransport.getType(), newTransport.getType(), message.failure);\n\t            _failHandshake(message);\n\t            _transport = newTransport;\n\t        }\n\t    }\n\t\n\t    function _failConnect(message) {\n\t        // Notify the listeners after the status change but before the next action\n\t        _notifyListeners('/meta/connect', message);\n\t        _notifyListeners('/meta/unsuccessful', message);\n\t\n\t        // This may happen when the server crashed, the current clientId\n\t        // will be invalid, and the server will ask to handshake again\n\t        // Listeners can call disconnect(), so check the state after they run\n\t        var action = _isDisconnected() ? 'none' : _advice.reconnect;\n\t        switch (action) {\n\t            case 'retry':\n\t                _delayedConnect();\n\t                _increaseBackoff();\n\t                break;\n\t            case 'handshake':\n\t                // The current transport may be failed (e.g. network disconnection)\n\t                // Reset the transports so the new handshake picks up the right one\n\t                _transports.reset(true);\n\t                _resetBackoff();\n\t                _delayedHandshake();\n\t                break;\n\t            case 'none':\n\t                _disconnect(true);\n\t                break;\n\t            default:\n\t                throw 'Unrecognized advice action' + action;\n\t        }\n\t    }\n\t\n\t    function _connectResponse(message) {\n\t        _connected = message.successful;\n\t\n\t        if (_connected) {\n\t            _notifyListeners('/meta/connect', message);\n\t\n\t            // Normally, the advice will say \"reconnect: 'retry', interval: 0\"\n\t            // and the server will hold the request, so when a response returns\n\t            // we immediately call the server again (long polling)\n\t            // Listeners can call disconnect(), so check the state after they run\n\t            var action = _isDisconnected() ? 'none' : _advice.reconnect;\n\t            switch (action) {\n\t                case 'retry':\n\t                    _resetBackoff();\n\t                    _delayedConnect();\n\t                    break;\n\t                case 'none':\n\t                    // Wait for the /meta/disconnect to arrive.\n\t                    _disconnect(false);\n\t                    break;\n\t                default:\n\t                    throw 'Unrecognized advice action ' + action;\n\t            }\n\t        } else {\n\t            _failConnect(message);\n\t        }\n\t    }\n\t\n\t    function _connectFailure(message) {\n\t        _connected = false;\n\t        _failConnect(message);\n\t    }\n\t\n\t    function _failDisconnect(message) {\n\t        _disconnect(true);\n\t        _handleCallback(message);\n\t        _notifyListeners('/meta/disconnect', message);\n\t        _notifyListeners('/meta/unsuccessful', message);\n\t    }\n\t\n\t    function _disconnectResponse(message) {\n\t        if (message.successful) {\n\t            // Wait for the /meta/connect to arrive.\n\t            _disconnect(false);\n\t            _handleCallback(message);\n\t            _notifyListeners('/meta/disconnect', message);\n\t        } else {\n\t            _failDisconnect(message);\n\t        }\n\t    }\n\t\n\t    function _disconnectFailure(message) {\n\t        _failDisconnect(message);\n\t    }\n\t\n\t    function _failSubscribe(message) {\n\t        var subscriptions = _listeners[message.subscription];\n\t        if (subscriptions) {\n\t            for (var i = subscriptions.length - 1; i >= 0; --i) {\n\t                var subscription = subscriptions[i];\n\t                if (subscription && !subscription.listener) {\n\t                    delete subscriptions[i];\n\t                    _cometd._debug('Removed failed subscription', subscription);\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        _handleCallback(message);\n\t        _notifyListeners('/meta/subscribe', message);\n\t        _notifyListeners('/meta/unsuccessful', message);\n\t    }\n\t\n\t    function _subscribeResponse(message) {\n\t        if (message.successful) {\n\t            _handleCallback(message);\n\t            _notifyListeners('/meta/subscribe', message);\n\t        } else {\n\t            _failSubscribe(message);\n\t        }\n\t    }\n\t\n\t    function _subscribeFailure(message) {\n\t        _failSubscribe(message);\n\t    }\n\t\n\t    function _failUnsubscribe(message) {\n\t        _handleCallback(message);\n\t        _notifyListeners('/meta/unsubscribe', message);\n\t        _notifyListeners('/meta/unsuccessful', message);\n\t    }\n\t\n\t    function _unsubscribeResponse(message) {\n\t        if (message.successful) {\n\t            _handleCallback(message);\n\t            _notifyListeners('/meta/unsubscribe', message);\n\t        } else {\n\t            _failUnsubscribe(message);\n\t        }\n\t    }\n\t\n\t    function _unsubscribeFailure(message) {\n\t        _failUnsubscribe(message);\n\t    }\n\t\n\t    function _failMessage(message) {\n\t        if (!_handleRemoteCall(message)) {\n\t            _handleCallback(message);\n\t            _notifyListeners('/meta/publish', message);\n\t            _notifyListeners('/meta/unsuccessful', message);\n\t        }\n\t    }\n\t\n\t    function _messageResponse(message) {\n\t        if (message.data !== undefined) {\n\t            if (!_handleRemoteCall(message)) {\n\t                _notifyListeners(message.channel, message);\n\t                if (_handshakeMessages > 0) {\n\t                    --_handshakeMessages;\n\t                    if (_handshakeMessages === 0) {\n\t                        _cometd._debug('Processed last handshake-delivered message');\n\t                        _delayedConnect(0);\n\t                    }\n\t                }\n\t            }\n\t        } else {\n\t            if (message.successful === undefined) {\n\t                _cometd._warn('Unknown Bayeux Message', message);\n\t            } else {\n\t                if (message.successful) {\n\t                    _handleCallback(message);\n\t                    _notifyListeners('/meta/publish', message);\n\t                } else {\n\t                    _failMessage(message);\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    function _messageFailure(failure) {\n\t        _failMessage(failure);\n\t    }\n\t\n\t    function _receive(message) {\n\t        _unconnectTime = 0;\n\t\n\t        message = _applyIncomingExtensions(message);\n\t        if (message === undefined || message === null) {\n\t            return;\n\t        }\n\t\n\t        _updateAdvice(message.advice);\n\t\n\t        var channel = message.channel;\n\t        switch (channel) {\n\t            case '/meta/handshake':\n\t                _handshakeResponse(message);\n\t                break;\n\t            case '/meta/connect':\n\t                _connectResponse(message);\n\t                break;\n\t            case '/meta/disconnect':\n\t                _disconnectResponse(message);\n\t                break;\n\t            case '/meta/subscribe':\n\t                _subscribeResponse(message);\n\t                break;\n\t            case '/meta/unsubscribe':\n\t                _unsubscribeResponse(message);\n\t                break;\n\t            default:\n\t                _messageResponse(message);\n\t                break;\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Receives a message.\n\t     * This method is exposed as a public so that extensions may inject\n\t     * messages simulating that they had been received.\n\t     */\n\t    this.receive = _receive;\n\t\n\t    _handleMessages = function(rcvdMessages) {\n\t        _cometd._debug('Received', rcvdMessages);\n\t\n\t        for (var i = 0; i < rcvdMessages.length; ++i) {\n\t            var message = rcvdMessages[i];\n\t            _receive(message);\n\t        }\n\t    };\n\t\n\t    _handleFailure = function(conduit, messages, failure) {\n\t        _cometd._debug('handleFailure', conduit, messages, failure);\n\t\n\t        failure.transport = conduit;\n\t        for (var i = 0; i < messages.length; ++i) {\n\t            var message = messages[i];\n\t            var failureMessage = {\n\t                id: message.id,\n\t                successful: false,\n\t                channel: message.channel,\n\t                failure: failure\n\t            };\n\t            failure.message = message;\n\t            switch (message.channel) {\n\t                case '/meta/handshake':\n\t                    _handshakeFailure(failureMessage);\n\t                    break;\n\t                case '/meta/connect':\n\t                    _connectFailure(failureMessage);\n\t                    break;\n\t                case '/meta/disconnect':\n\t                    _disconnectFailure(failureMessage);\n\t                    break;\n\t                case '/meta/subscribe':\n\t                    failureMessage.subscription = message.subscription;\n\t                    _subscribeFailure(failureMessage);\n\t                    break;\n\t                case '/meta/unsubscribe':\n\t                    failureMessage.subscription = message.subscription;\n\t                    _unsubscribeFailure(failureMessage);\n\t                    break;\n\t                default:\n\t                    _messageFailure(failureMessage);\n\t                    break;\n\t            }\n\t        }\n\t    };\n\t\n\t    function _hasSubscriptions(channel) {\n\t        var subscriptions = _listeners[channel];\n\t        if (subscriptions) {\n\t            for (var i = 0; i < subscriptions.length; ++i) {\n\t                if (subscriptions[i]) {\n\t                    return true;\n\t                }\n\t            }\n\t        }\n\t        return false;\n\t    }\n\t\n\t    function _resolveScopedCallback(scope, callback) {\n\t        var delegate = {\n\t            scope: scope,\n\t            method: callback\n\t        };\n\t        if (_isFunction(scope)) {\n\t            delegate.scope = undefined;\n\t            delegate.method = scope;\n\t        } else {\n\t            if (_isString(callback)) {\n\t                if (!scope) {\n\t                    throw 'Invalid scope ' + scope;\n\t                }\n\t                delegate.method = scope[callback];\n\t                if (!_isFunction(delegate.method)) {\n\t                    throw 'Invalid callback ' + callback + ' for scope ' + scope;\n\t                }\n\t            } else if (!_isFunction(callback)) {\n\t                throw 'Invalid callback ' + callback;\n\t            }\n\t        }\n\t        return delegate;\n\t    }\n\t\n\t    function _addListener(channel, scope, callback, isListener) {\n\t        // The data structure is a map<channel, subscription[]>, where each subscription\n\t        // holds the callback to be called and its scope.\n\t\n\t        var delegate = _resolveScopedCallback(scope, callback);\n\t        _cometd._debug('Adding', isListener ? 'listener' : 'subscription', 'on', channel, 'with scope', delegate.scope, 'and callback', delegate.method);\n\t\n\t        var subscription = {\n\t            channel: channel,\n\t            scope: delegate.scope,\n\t            callback: delegate.method,\n\t            listener: isListener\n\t        };\n\t\n\t        var subscriptions = _listeners[channel];\n\t        if (!subscriptions) {\n\t            subscriptions = [];\n\t            _listeners[channel] = subscriptions;\n\t        }\n\t\n\t        // Pushing onto an array appends at the end and returns the id associated with the element increased by 1.\n\t        // Note that if:\n\t        // a.push('a'); var hb=a.push('b'); delete a[hb-1]; var hc=a.push('c');\n\t        // then:\n\t        // hc==3, a.join()=='a',,'c', a.length==3\n\t        subscription.id = subscriptions.push(subscription) - 1;\n\t\n\t        _cometd._debug('Added', isListener ? 'listener' : 'subscription', subscription);\n\t\n\t        // For backward compatibility: we used to return [channel, subscription.id]\n\t        subscription[0] = channel;\n\t        subscription[1] = subscription.id;\n\t\n\t        return subscription;\n\t    }\n\t\n\t    //\n\t    // PUBLIC API\n\t    //\n\t\n\t    /**\n\t     * Registers the given transport under the given transport type.\n\t     * The optional index parameter specifies the \"priority\" at which the\n\t     * transport is registered (where 0 is the max priority).\n\t     * If a transport with the same type is already registered, this function\n\t     * does nothing and returns false.\n\t     * @param type the transport type\n\t     * @param transport the transport object\n\t     * @param index the index at which this transport is to be registered\n\t     * @return true if the transport has been registered, false otherwise\n\t     * @see #unregisterTransport(type)\n\t     */\n\t    this.registerTransport = function(type, transport, index) {\n\t        var result = _transports.add(type, transport, index);\n\t        if (result) {\n\t            this._debug('Registered transport', type);\n\t\n\t            if (_isFunction(transport.registered)) {\n\t                transport.registered(type, this);\n\t            }\n\t        }\n\t        return result;\n\t    };\n\t\n\t    /**\n\t     * Unregisters the transport with the given transport type.\n\t     * @param type the transport type to unregister\n\t     * @return the transport that has been unregistered,\n\t     * or null if no transport was previously registered under the given transport type\n\t     */\n\t    this.unregisterTransport = function(type) {\n\t        var transport = _transports.remove(type);\n\t        if (transport !== null) {\n\t            this._debug('Unregistered transport', type);\n\t\n\t            if (_isFunction(transport.unregistered)) {\n\t                transport.unregistered();\n\t            }\n\t        }\n\t        return transport;\n\t    };\n\t\n\t    this.unregisterTransports = function() {\n\t        _transports.clear();\n\t    };\n\t\n\t    /**\n\t     * @return an array of all registered transport types\n\t     */\n\t    this.getTransportTypes = function() {\n\t        return _transports.getTransportTypes();\n\t    };\n\t\n\t    this.findTransport = function(name) {\n\t        return _transports.find(name);\n\t    };\n\t\n\t    /**\n\t     * @returns the TransportRegistry object\n\t     */\n\t    this.getTransportRegistry = function() {\n\t        return _transports;\n\t    };\n\t\n\t    /**\n\t     * Configures the initial Bayeux communication with the Bayeux server.\n\t     * Configuration is passed via an object that must contain a mandatory field <code>url</code>\n\t     * of type string containing the URL of the Bayeux server.\n\t     * @param configuration the configuration object\n\t     */\n\t    this.configure = function(configuration) {\n\t        _configure.call(this, configuration);\n\t    };\n\t\n\t    /**\n\t     * Configures and establishes the Bayeux communication with the Bayeux server\n\t     * via a handshake and a subsequent connect.\n\t     * @param configuration the configuration object\n\t     * @param handshakeProps an object to be merged with the handshake message\n\t     * @see #configure(configuration)\n\t     * @see #handshake(handshakeProps)\n\t     */\n\t    this.init = function(configuration, handshakeProps) {\n\t        this.configure(configuration);\n\t        this.handshake(handshakeProps);\n\t    };\n\t\n\t    /**\n\t     * Establishes the Bayeux communication with the Bayeux server\n\t     * via a handshake and a subsequent connect.\n\t     * @param handshakeProps an object to be merged with the handshake message\n\t     * @param handshakeCallback a function to be invoked when the handshake is acknowledged\n\t     */\n\t    this.handshake = function(handshakeProps, handshakeCallback) {\n\t        _setStatus('disconnected');\n\t        _reestablish = false;\n\t        _handshake(handshakeProps, handshakeCallback);\n\t    };\n\t\n\t    /**\n\t     * Disconnects from the Bayeux server.\n\t     * It is possible to suggest to attempt a synchronous disconnect, but this feature\n\t     * may only be available in certain transports (for example, long-polling may support\n\t     * it, callback-polling certainly does not).\n\t     * @param sync whether attempt to perform a synchronous disconnect\n\t     * @param disconnectProps an object to be merged with the disconnect message\n\t     * @param disconnectCallback a function to be invoked when the disconnect is acknowledged\n\t     */\n\t    this.disconnect = function(sync, disconnectProps, disconnectCallback) {\n\t        if (_isDisconnected()) {\n\t            return;\n\t        }\n\t\n\t        if (typeof sync !== 'boolean') {\n\t            disconnectCallback = disconnectProps;\n\t            disconnectProps = sync;\n\t            sync = false;\n\t        }\n\t        if (_isFunction(disconnectProps)) {\n\t            disconnectCallback = disconnectProps;\n\t            disconnectProps = undefined;\n\t        }\n\t\n\t        var bayeuxMessage = {\n\t            id: _nextMessageId(),\n\t            channel: '/meta/disconnect'\n\t        };\n\t        // Do not allow the user to override important fields.\n\t        var message = this._mixin(false, {}, disconnectProps, bayeuxMessage);\n\t\n\t        // Save the callback.\n\t        _cometd._putCallback(message.id, disconnectCallback);\n\t\n\t        _setStatus('disconnecting');\n\t        _send(sync === true, [message], false, 'disconnect');\n\t    };\n\t\n\t    /**\n\t     * Marks the start of a batch of application messages to be sent to the server\n\t     * in a single request, obtaining a single response containing (possibly) many\n\t     * application reply messages.\n\t     * Messages are held in a queue and not sent until {@link #endBatch()} is called.\n\t     * If startBatch() is called multiple times, then an equal number of endBatch()\n\t     * calls must be made to close and send the batch of messages.\n\t     * @see #endBatch()\n\t     */\n\t    this.startBatch = function() {\n\t        _startBatch();\n\t    };\n\t\n\t    /**\n\t     * Marks the end of a batch of application messages to be sent to the server\n\t     * in a single request.\n\t     * @see #startBatch()\n\t     */\n\t    this.endBatch = function() {\n\t        _endBatch();\n\t    };\n\t\n\t    /**\n\t     * Executes the given callback in the given scope, surrounded by a {@link #startBatch()}\n\t     * and {@link #endBatch()} calls.\n\t     * @param scope the scope of the callback, may be omitted\n\t     * @param callback the callback to be executed within {@link #startBatch()} and {@link #endBatch()} calls\n\t     */\n\t    this.batch = function(scope, callback) {\n\t        var delegate = _resolveScopedCallback(scope, callback);\n\t        this.startBatch();\n\t        try {\n\t            delegate.method.call(delegate.scope);\n\t            this.endBatch();\n\t        } catch (x) {\n\t            this._info('Exception during execution of batch', x);\n\t            this.endBatch();\n\t            throw x;\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Adds a listener for bayeux messages, performing the given callback in the given scope\n\t     * when a message for the given channel arrives.\n\t     * @param channel the channel the listener is interested to\n\t     * @param scope the scope of the callback, may be omitted\n\t     * @param callback the callback to call when a message is sent to the channel\n\t     * @returns the subscription handle to be passed to {@link #removeListener(object)}\n\t     * @see #removeListener(subscription)\n\t     */\n\t    this.addListener = function(channel, scope, callback) {\n\t        if (arguments.length < 2) {\n\t            throw 'Illegal arguments number: required 2, got ' + arguments.length;\n\t        }\n\t        if (!_isString(channel)) {\n\t            throw 'Illegal argument type: channel must be a string';\n\t        }\n\t\n\t        return _addListener(channel, scope, callback, true);\n\t    };\n\t\n\t    /**\n\t     * Removes the subscription obtained with a call to {@link #addListener(string, object, function)}.\n\t     * @param subscription the subscription to unsubscribe.\n\t     * @see #addListener(channel, scope, callback)\n\t     */\n\t    this.removeListener = function(subscription) {\n\t        // Beware of subscription.id == 0, which is falsy => cannot use !subscription.id\n\t        if (!subscription || !subscription.channel || !(\"id\" in subscription)) {\n\t            throw 'Invalid argument: expected subscription, not ' + subscription;\n\t        }\n\t\n\t        _removeListener(subscription);\n\t    };\n\t\n\t    /**\n\t     * Removes all listeners registered with {@link #addListener(channel, scope, callback)} or\n\t     * {@link #subscribe(channel, scope, callback)}.\n\t     */\n\t    this.clearListeners = function() {\n\t        _listeners = {};\n\t    };\n\t\n\t    /**\n\t     * Subscribes to the given channel, performing the given callback in the given scope\n\t     * when a message for the channel arrives.\n\t     * @param channel the channel to subscribe to\n\t     * @param scope the scope of the callback, may be omitted\n\t     * @param callback the callback to call when a message is sent to the channel\n\t     * @param subscribeProps an object to be merged with the subscribe message\n\t     * @param subscribeCallback a function to be invoked when the subscription is acknowledged\n\t     * @return the subscription handle to be passed to {@link #unsubscribe(object)}\n\t     */\n\t    this.subscribe = function(channel, scope, callback, subscribeProps, subscribeCallback) {\n\t        if (arguments.length < 2) {\n\t            throw 'Illegal arguments number: required 2, got ' + arguments.length;\n\t        }\n\t        if (!_isString(channel)) {\n\t            throw 'Illegal argument type: channel must be a string';\n\t        }\n\t        if (_isDisconnected()) {\n\t            throw 'Illegal state: already disconnected';\n\t        }\n\t\n\t        // Normalize arguments\n\t        if (_isFunction(scope)) {\n\t            subscribeCallback = subscribeProps;\n\t            subscribeProps = callback;\n\t            callback = scope;\n\t            scope = undefined;\n\t        }\n\t        if (_isFunction(subscribeProps)) {\n\t            subscribeCallback = subscribeProps;\n\t            subscribeProps = undefined;\n\t        }\n\t\n\t        // Only send the message to the server if this client has not yet subscribed to the channel\n\t        var send = !_hasSubscriptions(channel);\n\t\n\t        var subscription = _addListener(channel, scope, callback, false);\n\t\n\t        if (send) {\n\t            // Send the subscription message after the subscription registration to avoid\n\t            // races where the server would send a message to the subscribers, but here\n\t            // on the client the subscription has not been added yet to the data structures\n\t            var bayeuxMessage = {\n\t                id: _nextMessageId(),\n\t                channel: '/meta/subscribe',\n\t                subscription: channel\n\t            };\n\t            // Do not allow the user to override important fields.\n\t            var message = this._mixin(false, {}, subscribeProps, bayeuxMessage);\n\t\n\t            // Save the callback.\n\t            _cometd._putCallback(message.id, subscribeCallback);\n\t\n\t            _queueSend(message);\n\t        }\n\t\n\t        return subscription;\n\t    };\n\t\n\t    /**\n\t     * Unsubscribes the subscription obtained with a call to {@link #subscribe(string, object, function)}.\n\t     * @param subscription the subscription to unsubscribe.\n\t     * @param unsubscribeProps an object to be merged with the unsubscribe message\n\t     * @param unsubscribeCallback a function to be invoked when the unsubscription is acknowledged\n\t     */\n\t    this.unsubscribe = function(subscription, unsubscribeProps, unsubscribeCallback) {\n\t        if (arguments.length < 1) {\n\t            throw 'Illegal arguments number: required 1, got ' + arguments.length;\n\t        }\n\t        if (_isDisconnected()) {\n\t            throw 'Illegal state: already disconnected';\n\t        }\n\t\n\t        if (_isFunction(unsubscribeProps)) {\n\t            unsubscribeCallback = unsubscribeProps;\n\t            unsubscribeProps = undefined;\n\t        }\n\t\n\t        // Remove the local listener before sending the message\n\t        // This ensures that if the server fails, this client does not get notifications\n\t        this.removeListener(subscription);\n\t\n\t        var channel = subscription.channel;\n\t        // Only send the message to the server if this client unsubscribes the last subscription\n\t        if (!_hasSubscriptions(channel)) {\n\t            var bayeuxMessage = {\n\t                id: _nextMessageId(),\n\t                channel: '/meta/unsubscribe',\n\t                subscription: channel\n\t            };\n\t            // Do not allow the user to override important fields.\n\t            var message = this._mixin(false, {}, unsubscribeProps, bayeuxMessage);\n\t\n\t            // Save the callback.\n\t            _cometd._putCallback(message.id, unsubscribeCallback);\n\t\n\t            _queueSend(message);\n\t        }\n\t    };\n\t\n\t    this.resubscribe = function(subscription, subscribeProps) {\n\t        _removeSubscription(subscription);\n\t        if (subscription) {\n\t            return this.subscribe(subscription.channel, subscription.scope, subscription.callback, subscribeProps);\n\t        }\n\t        return undefined;\n\t    };\n\t\n\t    /**\n\t     * Removes all subscriptions added via {@link #subscribe(channel, scope, callback, subscribeProps)},\n\t     * but does not remove the listeners added via {@link addListener(channel, scope, callback)}.\n\t     */\n\t    this.clearSubscriptions = function() {\n\t        _clearSubscriptions();\n\t    };\n\t\n\t    /**\n\t     * Publishes a message on the given channel, containing the given content.\n\t     * @param channel the channel to publish the message to\n\t     * @param content the content of the message\n\t     * @param publishProps an object to be merged with the publish message\n\t     * @param publishCallback a function to be invoked when the publish is acknowledged by the server\n\t     */\n\t    this.publish = function(channel, content, publishProps, publishCallback) {\n\t        if (arguments.length < 1) {\n\t            throw 'Illegal arguments number: required 1, got ' + arguments.length;\n\t        }\n\t        if (!_isString(channel)) {\n\t            throw 'Illegal argument type: channel must be a string';\n\t        }\n\t        if (/^\\/meta\\//.test(channel)) {\n\t            throw 'Illegal argument: cannot publish to meta channels';\n\t        }\n\t        if (_isDisconnected()) {\n\t            throw 'Illegal state: already disconnected';\n\t        }\n\t\n\t        if (_isFunction(content)) {\n\t            publishCallback = content;\n\t            content = publishProps = {};\n\t        } else if (_isFunction(publishProps)) {\n\t            publishCallback = publishProps;\n\t            publishProps = {};\n\t        }\n\t\n\t        var bayeuxMessage = {\n\t            id: _nextMessageId(),\n\t            channel: channel,\n\t            data: content\n\t        };\n\t        // Do not allow the user to override important fields.\n\t        var message = this._mixin(false, {}, publishProps, bayeuxMessage);\n\t\n\t        // Save the callback.\n\t        _cometd._putCallback(message.id, publishCallback);\n\t\n\t        _queueSend(message);\n\t    };\n\t\n\t    this.remoteCall = function(target, content, timeout, callback) {\n\t        if (arguments.length < 1) {\n\t            throw 'Illegal arguments number: required 1, got ' + arguments.length;\n\t        }\n\t        if (!_isString(target)) {\n\t            throw 'Illegal argument type: target must be a string';\n\t        }\n\t        if (_isDisconnected()) {\n\t            throw 'Illegal state: already disconnected';\n\t        }\n\t\n\t        if (_isFunction(content)) {\n\t            callback = content;\n\t            content = {};\n\t            timeout = _config.maxNetworkDelay;\n\t        } else if (_isFunction(timeout)) {\n\t            callback = timeout;\n\t            timeout = _config.maxNetworkDelay;\n\t        }\n\t\n\t        if (typeof timeout !== 'number') {\n\t            throw 'Illegal argument type: timeout must be a number';\n\t        }\n\t\n\t        if (!target.match(/^\\//)) {\n\t            target = '/' + target;\n\t        }\n\t        var channel = '/service' + target;\n\t\n\t        var bayeuxMessage = {\n\t            id: _nextMessageId(),\n\t            channel: channel,\n\t            data: content\n\t        };\n\t\n\t        var context = {\n\t            callback: callback\n\t        };\n\t        if (timeout > 0) {\n\t            context.timeout = Utils.setTimeout(_cometd, function() {\n\t                _cometd._debug('Timing out remote call', bayeuxMessage, 'after', timeout, 'ms');\n\t                _failMessage({\n\t                    id: bayeuxMessage.id,\n\t                    error: '406::timeout',\n\t                    successful: false,\n\t                    failure: {\n\t                        message : bayeuxMessage,\n\t                        reason: 'Remote Call Timeout'\n\t                    }\n\t                });\n\t            }, timeout);\n\t            _cometd._debug('Scheduled remote call timeout', bayeuxMessage, 'in', timeout, 'ms');\n\t        }\n\t        _remoteCalls[bayeuxMessage.id] = context;\n\t\n\t        _queueSend(bayeuxMessage);\n\t    };\n\t\n\t    /**\n\t     * Returns a string representing the status of the bayeux communication with the Bayeux server.\n\t     */\n\t    this.getStatus = function() {\n\t        return _status;\n\t    };\n\t\n\t    /**\n\t     * Returns whether this instance has been disconnected.\n\t     */\n\t    this.isDisconnected = _isDisconnected;\n\t\n\t    /**\n\t     * Sets the backoff period used to increase the backoff time when retrying an unsuccessful or failed message.\n\t     * Default value is 1 second, which means if there is a persistent failure the retries will happen\n\t     * after 1 second, then after 2 seconds, then after 3 seconds, etc. So for example with 15 seconds of\n\t     * elapsed time, there will be 5 retries (at 1, 3, 6, 10 and 15 seconds elapsed).\n\t     * @param period the backoff period to set\n\t     * @see #getBackoffIncrement()\n\t     */\n\t    this.setBackoffIncrement = function(period) {\n\t        _config.backoffIncrement = period;\n\t    };\n\t\n\t    /**\n\t     * Returns the backoff period used to increase the backoff time when retrying an unsuccessful or failed message.\n\t     * @see #setBackoffIncrement(period)\n\t     */\n\t    this.getBackoffIncrement = function() {\n\t        return _config.backoffIncrement;\n\t    };\n\t\n\t    /**\n\t     * Returns the backoff period to wait before retrying an unsuccessful or failed message.\n\t     */\n\t    this.getBackoffPeriod = function() {\n\t        return _backoff;\n\t    };\n\t\n\t    /**\n\t     * Increases the backoff period up to the maximum value configured.\n\t     * @returns the backoff period after increment\n\t     * @see getBackoffIncrement\n\t     */\n\t    this.increaseBackoffPeriod = function() {\n\t        return _increaseBackoff();\n\t    };\n\t\n\t    /**\n\t     * Resets the backoff period to zero.\n\t     */\n\t    this.resetBackoffPeriod = function() {\n\t        _resetBackoff();\n\t    };\n\t\n\t    /**\n\t     * Sets the log level for console logging.\n\t     * Valid values are the strings 'error', 'warn', 'info' and 'debug', from\n\t     * less verbose to more verbose.\n\t     * @param level the log level string\n\t     */\n\t    this.setLogLevel = function(level) {\n\t        _config.logLevel = level;\n\t    };\n\t\n\t    /**\n\t     * Registers an extension whose callbacks are called for every incoming message\n\t     * (that comes from the server to this client implementation) and for every\n\t     * outgoing message (that originates from this client implementation for the\n\t     * server).\n\t     * The format of the extension object is the following:\n\t     * <pre>\n\t     * {\n\t     *     incoming: function(message) { ... },\n\t     *     outgoing: function(message) { ... }\n\t     * }\n\t     * </pre>\n\t     * Both properties are optional, but if they are present they will be called\n\t     * respectively for each incoming message and for each outgoing message.\n\t     * @param name the name of the extension\n\t     * @param extension the extension to register\n\t     * @return true if the extension was registered, false otherwise\n\t     * @see #unregisterExtension(name)\n\t     */\n\t    this.registerExtension = function(name, extension) {\n\t        if (arguments.length < 2) {\n\t            throw 'Illegal arguments number: required 2, got ' + arguments.length;\n\t        }\n\t        if (!_isString(name)) {\n\t            throw 'Illegal argument type: extension name must be a string';\n\t        }\n\t\n\t        var existing = false;\n\t        for (var i = 0; i < _extensions.length; ++i) {\n\t            var existingExtension = _extensions[i];\n\t            if (existingExtension.name === name) {\n\t                existing = true;\n\t                break;\n\t            }\n\t        }\n\t        if (!existing) {\n\t            _extensions.push({\n\t                name: name,\n\t                extension: extension\n\t            });\n\t            this._debug('Registered extension', name);\n\t\n\t            // Callback for extensions\n\t            if (_isFunction(extension.registered)) {\n\t                extension.registered(name, this);\n\t            }\n\t\n\t            return true;\n\t        } else {\n\t            this._info('Could not register extension with name', name, 'since another extension with the same name already exists');\n\t            return false;\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Unregister an extension previously registered with\n\t     * {@link #registerExtension(name, extension)}.\n\t     * @param name the name of the extension to unregister.\n\t     * @return true if the extension was unregistered, false otherwise\n\t     */\n\t    this.unregisterExtension = function(name) {\n\t        if (!_isString(name)) {\n\t            throw 'Illegal argument type: extension name must be a string';\n\t        }\n\t\n\t        var unregistered = false;\n\t        for (var i = 0; i < _extensions.length; ++i) {\n\t            var extension = _extensions[i];\n\t            if (extension.name === name) {\n\t                _extensions.splice(i, 1);\n\t                unregistered = true;\n\t                this._debug('Unregistered extension', name);\n\t\n\t                // Callback for extensions\n\t                var ext = extension.extension;\n\t                if (_isFunction(ext.unregistered)) {\n\t                    ext.unregistered();\n\t                }\n\t\n\t                break;\n\t            }\n\t        }\n\t        return unregistered;\n\t    };\n\t\n\t    /**\n\t     * Find the extension registered with the given name.\n\t     * @param name the name of the extension to find\n\t     * @return the extension found or null if no extension with the given name has been registered\n\t     */\n\t    this.getExtension = function(name) {\n\t        for (var i = 0; i < _extensions.length; ++i) {\n\t            var extension = _extensions[i];\n\t            if (extension.name === name) {\n\t                return extension.extension;\n\t            }\n\t        }\n\t        return null;\n\t    };\n\t\n\t    /**\n\t     * Returns the name assigned to this CometD object, or the string 'default'\n\t     * if no name has been explicitly passed as parameter to the constructor.\n\t     */\n\t    this.getName = function() {\n\t        return _name;\n\t    };\n\t\n\t    /**\n\t     * Returns the clientId assigned by the Bayeux server during handshake.\n\t     */\n\t    this.getClientId = function() {\n\t        return _clientId;\n\t    };\n\t\n\t    /**\n\t     * Returns the URL of the Bayeux server.\n\t     */\n\t    this.getURL = function() {\n\t        if (_transport) {\n\t            var url = _transport.getURL();\n\t            if (url) {\n\t                return url;\n\t            }\n\t            url = _config.urls[_transport.getType()];\n\t            if (url) {\n\t                return url;\n\t            }\n\t        }\n\t        return _config.url;\n\t    };\n\t\n\t    this.getTransport = function() {\n\t        return _transport;\n\t    };\n\t\n\t    this.getConfiguration = function() {\n\t        return this._mixin(true, {}, _config);\n\t    };\n\t\n\t    this.getAdvice = function() {\n\t        return this._mixin(true, {}, _advice);\n\t    };\n\t};\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\t/**\n\t * A registry for transports used by the CometD object.\n\t */\n\tmodule.exports = function TransportRegistry() {\n\t    var _types = [];\n\t    var _transports = {};\n\t\n\t    this.getTransportTypes = function() {\n\t        return _types.slice(0);\n\t    };\n\t\n\t    this.findTransportTypes = function(version, crossDomain, url) {\n\t        var result = [];\n\t        for (var i = 0; i < _types.length; ++i) {\n\t            var type = _types[i];\n\t            if (_transports[type].accept(version, crossDomain, url) === true) {\n\t                result.push(type);\n\t            }\n\t        }\n\t        return result;\n\t    };\n\t\n\t    this.negotiateTransport = function(types, version, crossDomain, url) {\n\t        for (var i = 0; i < _types.length; ++i) {\n\t            var type = _types[i];\n\t            for (var j = 0; j < types.length; ++j) {\n\t                if (type === types[j]) {\n\t                    var transport = _transports[type];\n\t                    if (transport.accept(version, crossDomain, url) === true) {\n\t                        return transport;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return null;\n\t    };\n\t\n\t    this.add = function(type, transport, index) {\n\t        var existing = false;\n\t        for (var i = 0; i < _types.length; ++i) {\n\t            if (_types[i] === type) {\n\t                existing = true;\n\t                break;\n\t            }\n\t        }\n\t\n\t        if (!existing) {\n\t            if (typeof index !== 'number') {\n\t                _types.push(type);\n\t            } else {\n\t                _types.splice(index, 0, type);\n\t            }\n\t            _transports[type] = transport;\n\t        }\n\t\n\t        return !existing;\n\t    };\n\t\n\t    this.find = function(type) {\n\t        for (var i = 0; i < _types.length; ++i) {\n\t            if (_types[i] === type) {\n\t                return _transports[type];\n\t            }\n\t        }\n\t        return null;\n\t    };\n\t\n\t    this.remove = function(type) {\n\t        for (var i = 0; i < _types.length; ++i) {\n\t            if (_types[i] === type) {\n\t                _types.splice(i, 1);\n\t                var transport = _transports[type];\n\t                delete _transports[type];\n\t                return transport;\n\t            }\n\t        }\n\t        return null;\n\t    };\n\t\n\t    this.clear = function() {\n\t        _types = [];\n\t        _transports = {};\n\t    };\n\t\n\t    this.reset = function(init) {\n\t        for (var i = 0; i < _types.length; ++i) {\n\t            _transports[_types[i]].reset(init);\n\t        }\n\t    };\n\t};\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Transport = __webpack_require__(11);\n\tvar RequestTransport = __webpack_require__(13);\n\t\n\tmodule.exports = function LongPollingTransport() {\n\t    var _super = new RequestTransport();\n\t    var _self = Transport.derive(_super);\n\t    // By default, support cross domain\n\t    var _supportsCrossDomain = true;\n\t\n\t    _self.accept = function(version, crossDomain, url) {\n\t        return _supportsCrossDomain || !crossDomain;\n\t    };\n\t\n\t    _self.xhrSend = function(packet) {\n\t        throw 'Abstract';\n\t    };\n\t\n\t    _self.transportSend = function(envelope, request) {\n\t        this._debug('Transport', this.getType(), 'sending request', request.id, 'envelope', envelope);\n\t\n\t        var self = this;\n\t        try {\n\t            var sameStack = true;\n\t            request.xhr = this.xhrSend({\n\t                transport: this,\n\t                url: envelope.url,\n\t                sync: envelope.sync,\n\t                headers: this.getConfiguration().requestHeaders,\n\t                body: JSON.stringify(envelope.messages),\n\t                onSuccess: function(response) {\n\t                    self._debug('Transport', self.getType(), 'received response', response);\n\t                    var success = false;\n\t                    try {\n\t                        var received = self.convertToMessages(response);\n\t                        if (received.length === 0) {\n\t                            _supportsCrossDomain = false;\n\t                            self.transportFailure(envelope, request, {\n\t                                httpCode: 204\n\t                            });\n\t                        } else {\n\t                            success = true;\n\t                            self.transportSuccess(envelope, request, received);\n\t                        }\n\t                    } catch (x) {\n\t                        self._debug(x);\n\t                        if (!success) {\n\t                            _supportsCrossDomain = false;\n\t                            var failure = {\n\t                                exception: x\n\t                            };\n\t                            failure.httpCode = self.xhrStatus(request.xhr);\n\t                            self.transportFailure(envelope, request, failure);\n\t                        }\n\t                    }\n\t                },\n\t                onError: function(reason, exception) {\n\t                    self._debug('Transport', self.getType(), 'received error', reason, exception);\n\t                    _supportsCrossDomain = false;\n\t                    var failure = {\n\t                        reason: reason,\n\t                        exception: exception\n\t                    };\n\t                    failure.httpCode = self.xhrStatus(request.xhr);\n\t                    if (sameStack) {\n\t                        // Keep the semantic of calling response callbacks asynchronously after the request\n\t                        self.setTimeout(function() {\n\t                            self.transportFailure(envelope, request, failure);\n\t                        }, 0);\n\t                    } else {\n\t                        self.transportFailure(envelope, request, failure);\n\t                    }\n\t                }\n\t            });\n\t            sameStack = false;\n\t        } catch (x) {\n\t            _supportsCrossDomain = false;\n\t            // Keep the semantic of calling response callbacks asynchronously after the request\n\t            self.setTimeout(function() {\n\t                self.transportFailure(envelope, request, {\n\t                    exception: x\n\t                });\n\t            }, 0);\n\t        }\n\t    };\n\t\n\t    _self.reset = function(init) {\n\t        _super.reset(init);\n\t        _supportsCrossDomain = true;\n\t    };\n\t\n\t    return _self;\n\t};\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Transport = __webpack_require__(11)\n\tvar Utils = __webpack_require__(12)\n\t\n\tmodule.exports = function WebSocketTransport() {\n\t    var _super = new Transport();\n\t    var _self = Transport.derive(_super);\n\t    var _cometd;\n\t    // By default WebSocket is supported\n\t    var _webSocketSupported = true;\n\t    // Whether we were able to establish a WebSocket connection\n\t    var _webSocketConnected = false;\n\t    var _stickyReconnect = true;\n\t    // The context contains the envelopes that have been sent\n\t    // and the timeouts for the messages that have been sent.\n\t    var _context = null;\n\t    var _connecting = null;\n\t    var _connected = false;\n\t    var _successCallback = null;\n\t\n\t    _self.reset = function(init) {\n\t        _super.reset(init);\n\t        _webSocketSupported = true;\n\t        if (init) {\n\t            _webSocketConnected = false;\n\t        }\n\t        _stickyReconnect = true;\n\t        _context = null;\n\t        _connecting = null;\n\t        _connected = false;\n\t    };\n\t\n\t    function _forceClose(context, event) {\n\t        if (context) {\n\t            this.webSocketClose(context, event.code, event.reason);\n\t            // Force immediate failure of pending messages to trigger reconnect.\n\t            // This is needed because the server may not reply to our close()\n\t            // and therefore the onclose function is never called.\n\t            this.onClose(context, event);\n\t        }\n\t    }\n\t\n\t    function _sameContext(context) {\n\t        return context === _connecting || context === _context;\n\t    }\n\t\n\t    function _storeEnvelope(context, envelope, metaConnect) {\n\t        var messageIds = [];\n\t        for (var i = 0; i < envelope.messages.length; ++i) {\n\t            var message = envelope.messages[i];\n\t            if (message.id) {\n\t                messageIds.push(message.id);\n\t            }\n\t        }\n\t        context.envelopes[messageIds.join(',')] = [envelope, metaConnect];\n\t        this._debug('Transport', this.getType(), 'stored envelope, envelopes', context.envelopes);\n\t    }\n\t\n\t    function _websocketConnect(context) {\n\t        // We may have multiple attempts to open a WebSocket\n\t        // connection, for example a /meta/connect request that\n\t        // may take time, along with a user-triggered publish.\n\t        // Early return if we are already connecting.\n\t        if (_connecting) {\n\t            return;\n\t        }\n\t\n\t        // Mangle the URL, changing the scheme from 'http' to 'ws'.\n\t        var url = _cometd.getURL().replace(/^http/, 'ws');\n\t        this._debug('Transport', this.getType(), 'connecting to URL', url);\n\t\n\t        try {\n\t            var protocol = _cometd.getConfiguration().protocol;\n\t            context.webSocket = protocol ? new WebSocket(url, protocol) : new WebSocket(url);\n\t            _connecting = context;\n\t        } catch (x) {\n\t            _webSocketSupported = false;\n\t            this._debug('Exception while creating WebSocket object', x);\n\t            throw x;\n\t        }\n\t\n\t        // By default use sticky reconnects.\n\t        _stickyReconnect = _cometd.getConfiguration().stickyReconnect !== false;\n\t\n\t        var self = this;\n\t        var connectTimeout = _cometd.getConfiguration().connectTimeout;\n\t        if (connectTimeout > 0) {\n\t            context.connectTimer = self.setTimeout(function() {\n\t                _cometd._debug('Transport', self.getType(), 'timed out while connecting to URL', url, ':', connectTimeout, 'ms');\n\t                // The connection was not opened, close anyway.\n\t                _forceClose.call(self, context, {code: 1000, reason: 'Connect Timeout'});\n\t            }, connectTimeout);\n\t        }\n\t\n\t        var onopen = function() {\n\t            _cometd._debug('WebSocket onopen', context);\n\t            if (context.connectTimer) {\n\t                self.clearTimeout(context.connectTimer);\n\t            }\n\t\n\t            if (_sameContext(context)) {\n\t                _connecting = null;\n\t                _context = context;\n\t                _webSocketConnected = true;\n\t                self.onOpen(context);\n\t            } else {\n\t                // We have a valid connection already, close this one.\n\t                _cometd._warn('Closing extra WebSocket connection', this, 'active connection', _context);\n\t                _forceClose.call(self, context, {code: 1000, reason: 'Extra Connection'});\n\t            }\n\t        };\n\t\n\t        // This callback is invoked when the server sends the close frame.\n\t        // The close frame for a connection may arrive *after* another\n\t        // connection has been opened, so we must make sure that actions\n\t        // are performed only if it's the same connection.\n\t        var onclose = function(event) {\n\t            event = event || {code: 1000};\n\t            _cometd._debug('WebSocket onclose', context, event, 'connecting', _connecting, 'current', _context);\n\t\n\t            if (context.connectTimer) {\n\t                self.clearTimeout(context.connectTimer);\n\t            }\n\t\n\t            self.onClose(context, event);\n\t        };\n\t\n\t        var onmessage = function(wsMessage) {\n\t            _cometd._debug('WebSocket onmessage', wsMessage, context);\n\t            self.onMessage(context, wsMessage);\n\t        };\n\t\n\t        context.webSocket.onopen = onopen;\n\t        context.webSocket.onclose = onclose;\n\t        context.webSocket.onerror = function() {\n\t            // Clients should call onclose(), but if they do not we do it here for safety.\n\t            onclose({code: 1000, reason: 'Error'});\n\t        };\n\t        context.webSocket.onmessage = onmessage;\n\t\n\t        this._debug('Transport', this.getType(), 'configured callbacks on', context);\n\t    }\n\t\n\t    function _webSocketSend(context, envelope, metaConnect) {\n\t        var json = JSON.stringify(envelope.messages);\n\t        context.webSocket.send(json);\n\t        this._debug('Transport', this.getType(), 'sent', envelope, 'metaConnect =', metaConnect);\n\t\n\t        // Manage the timeout waiting for the response.\n\t        var maxDelay = this.getConfiguration().maxNetworkDelay;\n\t        var delay = maxDelay;\n\t        if (metaConnect) {\n\t            delay += this.getAdvice().timeout;\n\t            _connected = true;\n\t        }\n\t\n\t        var self = this;\n\t        var messageIds = [];\n\t        for (var i = 0; i < envelope.messages.length; ++i) {\n\t            (function() {\n\t                var message = envelope.messages[i];\n\t                if (message.id) {\n\t                    messageIds.push(message.id);\n\t                    context.timeouts[message.id] = self.setTimeout(function() {\n\t                        _cometd._debug('Transport', self.getType(), 'timing out message', message.id, 'after', delay, 'on', context);\n\t                        _forceClose.call(self, context, {code: 1000, reason: 'Message Timeout'});\n\t                    }, delay);\n\t                }\n\t            })();\n\t        }\n\t\n\t        this._debug('Transport', this.getType(), 'waiting at most', delay, 'ms for messages', messageIds, 'maxNetworkDelay', maxDelay, ', timeouts:', context.timeouts);\n\t    }\n\t\n\t    _self._notifySuccess = function(fn, messages) {\n\t        fn.call(this, messages);\n\t    };\n\t\n\t    _self._notifyFailure = function(fn, context, messages, failure) {\n\t        fn.call(this, context, messages, failure);\n\t    };\n\t\n\t    function _send(context, envelope, metaConnect) {\n\t        try {\n\t            if (context === null) {\n\t                context = _connecting || {\n\t                        envelopes: {},\n\t                        timeouts: {}\n\t                    };\n\t                _storeEnvelope.call(this, context, envelope, metaConnect);\n\t                _websocketConnect.call(this, context);\n\t            } else {\n\t                _storeEnvelope.call(this, context, envelope, metaConnect);\n\t                _webSocketSend.call(this, context, envelope, metaConnect);\n\t            }\n\t        } catch (x) {\n\t            // Keep the semantic of calling response callbacks asynchronously after the request.\n\t            var self = this;\n\t            self.setTimeout(function() {\n\t                _forceClose.call(self, context, {\n\t                    code: 1000,\n\t                    reason: 'Exception',\n\t                    exception: x\n\t                });\n\t            }, 0);\n\t        }\n\t    }\n\t\n\t    _self.onOpen = function(context) {\n\t        var envelopes = context.envelopes;\n\t        this._debug('Transport', this.getType(), 'opened', context, 'pending messages', envelopes);\n\t        for (var key in envelopes) {\n\t            if (envelopes.hasOwnProperty(key)) {\n\t                var element = envelopes[key];\n\t                var envelope = element[0];\n\t                var metaConnect = element[1];\n\t                // Store the success callback, which is independent from the envelope,\n\t                // so that it can be used to notify arrival of messages.\n\t                _successCallback = envelope.onSuccess;\n\t                _webSocketSend.call(this, context, envelope, metaConnect);\n\t            }\n\t        }\n\t    };\n\t\n\t    _self.onMessage = function(context, wsMessage) {\n\t        this._debug('Transport', this.getType(), 'received websocket message', wsMessage, context);\n\t\n\t        var close = false;\n\t        var messages = this.convertToMessages(wsMessage.data);\n\t        var messageIds = [];\n\t        for (var i = 0; i < messages.length; ++i) {\n\t            var message = messages[i];\n\t\n\t            // Detect if the message is a response to a request we made.\n\t            // If it's a meta message, for sure it's a response; otherwise it's\n\t            // a publish message and publish responses don't have the data field.\n\t            if (/^\\/meta\\//.test(message.channel) || message.data === undefined) {\n\t                if (message.id) {\n\t                    messageIds.push(message.id);\n\t\n\t                    var timeout = context.timeouts[message.id];\n\t                    if (timeout) {\n\t                        this.clearTimeout(timeout);\n\t                        delete context.timeouts[message.id];\n\t                        this._debug('Transport', this.getType(), 'removed timeout for message', message.id, ', timeouts', context.timeouts);\n\t                    }\n\t                }\n\t            }\n\t\n\t            if ('/meta/connect' === message.channel) {\n\t                _connected = false;\n\t            }\n\t            if ('/meta/disconnect' === message.channel && !_connected) {\n\t                close = true;\n\t            }\n\t        }\n\t\n\t        // Remove the envelope corresponding to the messages.\n\t        var removed = false;\n\t        var envelopes = context.envelopes;\n\t        for (var j = 0; j < messageIds.length; ++j) {\n\t            var id = messageIds[j];\n\t            for (var key in envelopes) {\n\t                if (envelopes.hasOwnProperty(key)) {\n\t                    var ids = key.split(',');\n\t                    var index = Utils.inArray(id, ids);\n\t                    if (index >= 0) {\n\t                        removed = true;\n\t                        ids.splice(index, 1);\n\t                        var envelope = envelopes[key][0];\n\t                        var metaConnect = envelopes[key][1];\n\t                        delete envelopes[key];\n\t                        if (ids.length > 0) {\n\t                            envelopes[ids.join(',')] = [envelope, metaConnect];\n\t                        }\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        if (removed) {\n\t            this._debug('Transport', this.getType(), 'removed envelope, envelopes', envelopes);\n\t        }\n\t\n\t        this._notifySuccess(_successCallback, messages);\n\t\n\t        if (close) {\n\t            this.webSocketClose(context, 1000, 'Disconnect');\n\t        }\n\t    };\n\t\n\t    _self.onClose = function(context, event) {\n\t        this._debug('Transport', this.getType(), 'closed', context, event);\n\t\n\t        if (_sameContext(context)) {\n\t            // Remember if we were able to connect.\n\t            // This close event could be due to server shutdown,\n\t            // and if it restarts we want to try websocket again.\n\t            _webSocketSupported = _stickyReconnect && _webSocketConnected;\n\t            _connecting = null;\n\t            _context = null;\n\t        }\n\t\n\t        var timeouts = context.timeouts;\n\t        context.timeouts = {};\n\t        for (var id in timeouts) {\n\t            if (timeouts.hasOwnProperty(id)) {\n\t                this.clearTimeout(timeouts[id]);\n\t            }\n\t        }\n\t\n\t        var envelopes = context.envelopes;\n\t        context.envelopes = {};\n\t        for (var key in envelopes) {\n\t            if (envelopes.hasOwnProperty(key)) {\n\t                var envelope = envelopes[key][0];\n\t                var metaConnect = envelopes[key][1];\n\t                if (metaConnect) {\n\t                    _connected = false;\n\t                }\n\t                var failure = {\n\t                    websocketCode: event.code,\n\t                    reason: event.reason\n\t                };\n\t                if (event.exception) {\n\t                    failure.exception = event.exception;\n\t                }\n\t                this._notifyFailure(envelope.onFailure, context, envelope.messages, failure);\n\t            }\n\t        }\n\t    };\n\t\n\t    _self.registered = function(type, cometd) {\n\t        _super.registered(type, cometd);\n\t        _cometd = cometd;\n\t    };\n\t\n\t    _self.accept = function(version, crossDomain, url) {\n\t        this._debug('Transport', this.getType(), 'accept, supported:', _webSocketSupported);\n\t        // Using !! to return a boolean (and not the WebSocket object).\n\t        return _webSocketSupported && !('undefined' === typeof WebSocket) && _cometd.websocketEnabled !== false;\n\t    };\n\t\n\t    _self.send = function(envelope, metaConnect) {\n\t        this._debug('Transport', this.getType(), 'sending', envelope, 'metaConnect =', metaConnect);\n\t        _send.call(this, _context, envelope, metaConnect);\n\t    };\n\t\n\t    _self.webSocketClose = function(context, code, reason) {\n\t        try {\n\t            if (context.webSocket) {\n\t                context.webSocket.close(code, reason);\n\t            }\n\t        } catch (x) {\n\t            this._debug(x);\n\t        }\n\t    };\n\t\n\t    _self.abort = function() {\n\t        _super.abort();\n\t        _forceClose.call(this, _context, {code: 1000, reason: 'Abort'});\n\t        this.reset(true);\n\t    };\n\t\n\t    return _self;\n\t};\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.FetchLongPollingTransport = FetchLongPollingTransport;\n\t\n\tvar _zetapushCometd = __webpack_require__(9);\n\t\n\t/**\n\t * Implements LongPollingTransport using borwser fetch() API\n\t * @access private\n\t * @return {FetchLongPollingTransport}\n\t */\n\tfunction FetchLongPollingTransport() {\n\t  var _super = new _zetapushCometd.LongPollingTransport();\n\t  var that = _zetapushCometd.Transport.derive(_super);\n\t\n\t  /**\n\t   * Implements transport via fetch() API\n\t   * @param {Object} packet\n\t   */\n\t  that.xhrSend = function (packet) {\n\t    fetch(packet.url, {\n\t      method: 'post',\n\t      body: packet.body,\n\t      headers: Object.assign(packet.headers, {\n\t        'Content-Type': 'application/json;charset=UTF-8'\n\t      })\n\t    }).then(function (response) {\n\t      return response.json();\n\t    }).then(packet.onSuccess).catch(packet.onError);\n\t  };\n\t\n\t  return that;\n\t}\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.WeakClient = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _client = __webpack_require__(6);\n\t\n\tvar _handshake = __webpack_require__(3);\n\t\n\tvar _tokenPersistence = __webpack_require__(20);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * WeakClient config object.\n\t * @typedef {Object} WeakClientConfig\n\t * @property {string} apiUrl - Api Url\n\t * @property {string} deploymentId - Authentication deployment id\n\t * @property {string} sandboxId - Sandbox id\n\t * @property {boolean} forceHttps - Force end to end HTTPS connection\n\t * @property {string} resource - Client resource id\n\t */\n\t\n\t/**\n\t * @access public\n\t * @extends {Client}\n\t * @example\n\t * // Create a new WeakClient\n\t * const client = new ZetaPush.WeakClient({\n\t *   sandboxId: '<YOUR-SANDBOX-ID>'\n\t * })\n\t */\n\t\n\tvar WeakClient = exports.WeakClient = function (_Client) {\n\t  _inherits(WeakClient, _Client);\n\t\n\t  /**\n\t   * Create a new ZetaPush smart client\n\t   * @param {WeakClientConfig} config\n\t   */\n\t\n\t  function WeakClient(_ref) {\n\t    var apiUrl = _ref.apiUrl;\n\t    var sandboxId = _ref.sandboxId;\n\t    var deploymentId = _ref.deploymentId;\n\t    var forceHttps = _ref.forceHttps;\n\t    var resource = _ref.resource;\n\t\n\t    _classCallCheck(this, WeakClient);\n\t\n\t    var credentials = function credentials() {\n\t      var token = _this.getToken();\n\t      var handshake = _handshake.Authentication.weak({\n\t        deploymentId: deploymentId,\n\t        token: token\n\t      });\n\t      return handshake;\n\t    };\n\t    /**\n\t     * Call Client constructor with specific parameters\n\t     */\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(WeakClient).call(this, { apiUrl: apiUrl, sandboxId: sandboxId, forceHttps: forceHttps, credentials: credentials, resource: resource }));\n\t\n\t    var onSuccessfulHandshake = function onSuccessfulHandshake(_ref2) {\n\t      var publicToken = _ref2.publicToken;\n\t      var userId = _ref2.userId;\n\t      var token = _ref2.token;\n\t\n\t      if (token) {\n\t        _this.strategy.set({ token: token });\n\t      }\n\t    };\n\t    _this.addConnectionStatusListener({ onSuccessfulHandshake: onSuccessfulHandshake });\n\t    /**\n\t     * @access private\n\t     * @type {TokenPersistenceStrategy}\n\t     */\n\t    _this.strategy = new _tokenPersistence.LocalStorageTokenPersistenceStrategy();\n\t    return _this;\n\t  }\n\t  /**\n\t   * @return {string} The stored token\n\t   */\n\t\n\t\n\t  _createClass(WeakClient, [{\n\t    key: 'getToken',\n\t    value: function getToken() {\n\t      return this.strategy.get();\n\t    }\n\t  }]);\n\n\t  return WeakClient;\n\t}(_client.Client);\n\n/***/ },\n/* 20 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\n\t * @type {string}\n\t */\n\tvar ZETAPUSH_TOKEN_KEY = 'zetapush.token';\n\t\n\t/**\n\t * Provide abstraction for token persistence\n\t * @access protected\n\t */\n\t\n\tvar AbstractTokenPersistenceStrategy = exports.AbstractTokenPersistenceStrategy = function () {\n\t  /**\n\t   * @param {{key: string}} parameters\n\t   */\n\t\n\t  function AbstractTokenPersistenceStrategy() {\n\t    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t    var _ref$key = _ref.key;\n\t    var key = _ref$key === undefined ? ZETAPUSH_TOKEN_KEY : _ref$key;\n\t\n\t    _classCallCheck(this, AbstractTokenPersistenceStrategy);\n\t\n\t    /**\n\t     * @access private\n\t     * @type {string}\n\t     */\n\t    this.key = key;\n\t  }\n\t  /**\n\t   * @abstract\n\t   * @return {string} The stored token\n\t   */\n\t\n\t\n\t  _createClass(AbstractTokenPersistenceStrategy, [{\n\t    key: 'get',\n\t    value: function get() {}\n\t    /**\n\t     * @abstract\n\t     * @param {{token: string}} parameters\n\t     */\n\t\n\t  }, {\n\t    key: 'set',\n\t    value: function set(_ref2) {\n\t      var token = _ref2.token;\n\t    }\n\t  }]);\n\t\n\t  return AbstractTokenPersistenceStrategy;\n\t}();\n\t\n\t/**\n\t * @access protected\n\t * @extends {AbstractTokenPersistenceStrategy}\n\t */\n\t\n\t\n\tvar LocalStorageTokenPersistenceStrategy = exports.LocalStorageTokenPersistenceStrategy = function (_AbstractTokenPersist) {\n\t  _inherits(LocalStorageTokenPersistenceStrategy, _AbstractTokenPersist);\n\t\n\t  function LocalStorageTokenPersistenceStrategy() {\n\t    _classCallCheck(this, LocalStorageTokenPersistenceStrategy);\n\t\n\t    return _possibleConstructorReturn(this, Object.getPrototypeOf(LocalStorageTokenPersistenceStrategy).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(LocalStorageTokenPersistenceStrategy, [{\n\t    key: 'get',\n\t\n\t    /**\n\t     * @override\n\t     * @return {string} The stored token\n\t     */\n\t    value: function get() {\n\t      return localStorage.getItem(this.key);\n\t    }\n\t    /**\n\t     * @override\n\t     * @param {{token: string}} parameters\n\t     */\n\t\n\t  }, {\n\t    key: 'set',\n\t    value: function set(_ref3) {\n\t      var token = _ref3.token;\n\t\n\t      localStorage.setItem(this.key, token);\n\t    }\n\t  }]);\n\t\n\t  return LocalStorageTokenPersistenceStrategy;\n\t}(AbstractTokenPersistenceStrategy);\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** zetapush.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 8e1340a2436acd855a18\n **/","(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var list = this.map[name]\n    if (!list) {\n      list = []\n      this.map[name] = list\n    }\n    list.push(value)\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    var values = this.map[normalizeName(name)]\n    return values ? values[0] : null\n  }\n\n  Headers.prototype.getAll = function(name) {\n    return this.map[normalizeName(name)] || []\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = [normalizeValue(value)]\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    Object.getOwnPropertyNames(this.map).forEach(function(name) {\n      this.map[name].forEach(function(value) {\n        callback.call(thisArg, value, name, this)\n      }, this)\n    }, this)\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    reader.readAsArrayBuffer(blob)\n    return fileReaderReady(reader)\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    reader.readAsText(blob)\n    return fileReaderReady(reader)\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (!body) {\n        this._bodyText = ''\n      } else if (support.arrayBuffer && ArrayBuffer.prototype.isPrototypeOf(body)) {\n        // Only support ArrayBuffers for POST method.\n        // Receiving ArrayBuffers happens via Blobs, instead.\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        return this.blob().then(readBlobAsArrayBuffer)\n      }\n\n      this.text = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return readBlobAsText(this._bodyBlob)\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as text')\n        } else {\n          return Promise.resolve(this._bodyText)\n        }\n      }\n    } else {\n      this.text = function() {\n        var rejected = consumed(this)\n        return rejected ? rejected : Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n    if (Request.prototype.isPrototypeOf(input)) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = input\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this)\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function headers(xhr) {\n    var head = new Headers()\n    var pairs = (xhr.getAllResponseHeaders() || '').trim().split('\\n')\n    pairs.forEach(function(header) {\n      var split = header.trim().split(':')\n      var key = split.shift().trim()\n      var value = split.join(':').trim()\n      head.append(key, value)\n    })\n    return head\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = options.status\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = options.statusText\n    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request\n      if (Request.prototype.isPrototypeOf(input) && !init) {\n        request = input\n      } else {\n        request = new Request(input, init)\n      }\n\n      var xhr = new XMLHttpRequest()\n\n      function responseURL() {\n        if ('responseURL' in xhr) {\n          return xhr.responseURL\n        }\n\n        // Avoid security warnings on getResponseHeader when not allowed by CORS\n        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n          return xhr.getResponseHeader('X-Request-URL')\n        }\n\n        return\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: headers(xhr),\n          url: responseURL()\n        }\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/whatwg-fetch/fetch.js\n ** module id = 1\n ** module chunks = 0\n **/","import * as services from './services/index'\n\nexport { Authentication } from './authentication/handshake'\nexport { ConnectionStatusListener } from './connection/connection-status'\nexport { Client } from './client'\nexport { WeakClient } from './weak-client'\nexport { services }\n\n/**\n * SDK Version\n * @type {string}\n */\nexport const VERSION = '2.0.0-rc.1'\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/index.js\n **/","import { Delegating, Simple, Weak } from '../services'\n\n/**\n * ZetaPush deployables names\n */\nconst DeployableNames = {\n  AUTH_SIMPLE: 'simple',\n  AUTH_WEAK: 'weak',\n  AUTH_DELEGATING: 'delegating'\n}\n\n/**\n * Provide abstraction over CometD handshake data structure\n * @access public\n */\nexport class AbstractHandshake {\n  /**\n   * Create a new handshake manager\n   * @param {{authType: string, sandboxId: string, deploymentId: string}} parameters\n   */\n  constructor({ authType, sandboxId, deploymentId }) {\n    /**\n     * @access protected\n     * @type {string}\n     */\n    this.authType = authType\n    /**\n     * @access protected\n     * @type {string}\n     */\n    this.sandboxId = sandboxId\n    /**\n     * @access protected\n     * @type {string}\n     */\n    this.deploymentId = deploymentId\n  }\n  /**\n   * @param {ClientHelper} client\n   * @return {Object}\n   */\n  getHandshakeFields(client) {\n    const authentication = {\n      data: this.authData,\n      type: `${client.getSandboxId()}.${this.deploymentId}.${this.authType}`,\n      version: this.authVersion\n    }\n    if (client.getResource()) {\n      authentication.resource = client.getResource()\n    }\n    return {\n      ext: {\n        authentication\n      }\n    }\n  }\n  /**\n   * Get auth version\n   * @return {string}\n   */\n  get authVersion() {\n    return 'none'\n  }\n\n}\n\n/**\n * Provide abstraction over CometD token base handshake data structure\n * @access public\n * @extends {AbstractHandshake}\n */\nexport class TokenHandshake extends AbstractHandshake {\n  /**\n   * @param {{authType: string, deploymentId: string, token: string}} parameters\n   */\n  constructor({ authType, deploymentId, token }) {\n    super({ deploymentId, authType })\n    /**\n     * @access private\n     * @type {string}\n     */\n    this.token = token\n  }\n  /**\n   * @return {token: string}\n   */\n  get authData() {\n    const { token } = this\n    return {\n      token\n    }\n  }\n\n}\n\n/**\n * Provide abstraction over CometD credentials based handshake data structure\n * @access public\n * @extends {AbstractHandshake}\n */\nexport class CredentialsHandshake extends AbstractHandshake {\n\n  /**\n   * @param {{authType: string, deploymentId: string, login: string, password: string}} parameters\n   */\n  constructor({ authType, deploymentId, login, password }) {\n    super({ authType, deploymentId })\n    /**\n     * @access private\n     * @type {string}\n     */\n    this.login = login\n    /**\n     * @access private\n     * @type {string}\n     */\n    this.password = password\n  }\n  /**\n   * Get auth data\n   * @return {login: string, password: string}\n   */\n  get authData() {\n    const { login, password } = this\n    return {\n      login, password\n    }\n  }\n\n}\n\n/**\n * Factory to create handshake\n * @access public\n */\nexport class Authentication {\n  /**\n   * @param {{deploymentId: string, login: string, password: string}} parameters\n   * @return {CredentialsHandshake}\n   */\n  static simple({ deploymentId = Simple.DEFAULT_DEPLOYMENT_ID, login, password }) {\n    return Authentication.create({\n      authType: DeployableNames.AUTH_SIMPLE,\n      deploymentId,\n      login,\n      password\n    })\n  }\n  /**\n   * @param {{deploymentId: string, token: string}} parameters\n   * @return {TokenHandshake}\n   */\n  static weak({ deploymentId = Weak.DEFAULT_DEPLOYMENT_ID, token }) {\n    return Authentication.create({\n      authType: DeployableNames.AUTH_WEAK,\n      deploymentId,\n      login: token,\n      password: null\n    })\n  }\n  /**\n   * @param {{deploymentId: string, token: string}} parameters\n   * @return {TokenHandshake}\n   */\n  static delegating({ deploymentId = Delegating.DEFAULT_DEPLOYMENT_ID, token }) {\n    return Authentication.create({\n      authType: DeployableNames.AUTH_DELEGATING,\n      deploymentId,\n      login: token,\n      password: null\n    })\n  }\n  /**\n   * @param {{authType: string, deploymentId: string, login: string, password: string}} parameters\n   * @return {TokenHandshake|CredentialsHandshake}\n   */\n  static create({ authType, deploymentId, login, password }) {\n    if (null === password) {\n      return new TokenHandshake({ authType, deploymentId, token: login })\n    }\n    return new CredentialsHandshake({ authType, deploymentId, login, password  })\n  }\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/authentication/handshake.js\n **/","/**\n * @access protected\n */\nexport class Service {\n\tconstructor({ $publish }) {\n\t\tthis.$publish = $publish\n\t}\n}\n/**\n * Data aggregation\n *\n * Provides data aggregation over time and across different items\n *  User devices push items data on developer-defined categories\n *  This service automatically aggregates the data\n * Raw data is not available for reading, only the generated aggregation result\n *\n * */\n/**\n * User API for item aggregation\n *\n * Users can push data and be notified of aggregated data.\n * This service does not allow you to read the data. To achieve that kind of behavior, you could configure a callback to store the data.\n * @access public\n * */\nexport class Aggreg extends Service {\n\t/**\n\t * Get default deployment id associated to AggregService\n\t * @return {string}\n\t */\n\tstatic get DEFAULT_DEPLOYMENT_ID() {\n\t\treturn 'aggreg_0'\n\t}\n\t/**\n\t * Pushes some data\n\t *\n\t * Pushes the given data.\n\t * All the items are processed according to the defined rules.\n\t * At least one push for a given item is needed during a time period to trigger processing and calling of the corresponding callback verb/macro.\n\t * */\n\tpush({items,owner}) { this.$publish('push', {items,owner})}\n}\n/**\n * Data stacks\n *\n * Stacks are a per-user named persistent queue of data\n *  An administrator creates a stack service\n *  End-users can push data on an arbitrary number of their own arbitrary named stacks\n * */\n/**\n * Data stack user API\n *\n * Data is stored on a per user basis. However, notifications can be sent to a configurable set of listeners.\n * Stack names are arbitrary and do not need to be explicitly initialized.\n * @access public\n * */\nexport class Stack extends Service {\n\t/**\n\t * Get default deployment id associated to StackService\n\t * @return {string}\n\t */\n\tstatic get DEFAULT_DEPLOYMENT_ID() {\n\t\treturn 'stack_0'\n\t}\n\t/**\n\t * Lists the listeners\n\t *\n\t * Returns the whole list of listeners for the given stack.\n\t * */\n\tgetListeners({owner,stack}) { this.$publish('getListeners', {owner,stack})}\n\t/**\n\t * Lists content\n\t *\n\t * Returns a paginated list of contents for the given stack.\n\t * Content is sorted according to the statically configured order.\n\t * */\n\tlist({owner,page,stack}) { this.$publish('list', {owner,page,stack})}\n\t/**\n\t * Empties a stack\n\t *\n\t * Removes all items from the given stack.\n\t * */\n\tpurge({owner,stack}) { this.$publish('purge', {owner,stack})}\n\t/**\n\t * Pushes an item\n\t *\n\t * Pushes an item onto the given stack.\n\t * The stack does not need to be created.\n\t * */\n\tpush({stack,data,owner}) { this.$publish('push', {stack,data,owner})}\n\t/**\n\t * Removes items\n\t *\n\t * Removes the item with the given guid from the given stack.\n\t * */\n\tremove({guids,owner,stack}) { this.$publish('remove', {guids,owner,stack})}\n\t/**\n\t * Sets the listeners\n\t *\n\t * Sets the listeners for the given stack.\n\t * */\n\tsetListeners({listeners,owner,stack}) { this.$publish('setListeners', {listeners,owner,stack})}\n\t/**\n\t * Updates an item\n\t *\n\t * Updates an existing item of the given stack.\n\t * The item MUST exist prior to the call.\n\t * */\n\tupdate({guid,stack,data,owner}) { this.$publish('update', {guid,stack,data,owner})}\n}\n/**\n * Echo\n *\n * Echo\n * */\n/**\n * Echo service\n *\n * Simple echo service, for development purposes.\n * @access public\n * */\nexport class Echo extends Service {\n\t/**\n\t * Get default deployment id associated to EchoService\n\t * @return {string}\n\t */\n\tstatic get DEFAULT_DEPLOYMENT_ID() {\n\t\treturn 'echo_0'\n\t}\n\t/**\n\t * Echoes an object\n\t *\n\t * Echoes an object: the server will echo that object on channel 'echo' for the current user.\n\t * */\n\techo({}) { this.$publish('echo', {})}\n}\n/**\n * Game engine\n *\n * Abstract Game Engine\n *  Concrete game engines are remote cometd clients or internal macros\n * */\n/**\n * Game Engine API\n *\n * The Game Engine API is for game engine clients, not end-users.\n * @access public\n * */\nexport class GameEngine extends Service {\n\t/**\n\t * Get default deployment id associated to GameEngineService\n\t * @return {string}\n\t */\n\tstatic get DEFAULT_DEPLOYMENT_ID() {\n\t\treturn 'game_0'\n\t}\n\t/**\n\t * Notify the result for a join request\n\t *\n\t * A Game Engine notifies the STR of the result of a join request that it received on join_callback\n\t * */\n\tjoin_result({callerId,error,msgId,payload}) { this.$publish('join_result', {callerId,error,msgId,payload})}\n\t/**\n\t * Notify the result for an organization request\n\t *\n\t * A Game Engine notifies the STR of the result of an organization request that it received on organize_callback\n\t * */\n\torganize_result({callerId,error,msgId,payload}) { this.$publish('organize_result', {callerId,error,msgId,payload})}\n\t/**\n\t * Registers a game engine\n\t *\n\t * A client registers itself to the STR as a Game Engine.\n\t * The STR may, from now on, dispatch game of the given game type to said client.\n\t * Unregistration is done automatically on logoff.\n\t * */\n\tregister({gameInfo,location,maxGames}) { this.$publish('register', {gameInfo,location,maxGames})}\n\t/**\n\t * Notify the result for a start request\n\t *\n\t * A Game Engine notifies the STR of the result of a start request that it received on start_callback\n\t * */\n\tstart_result({gameId}) { this.$publish('start_result', {gameId})}\n\t/**\n\t * Notify a game event\n\t *\n\t * A Game Engine notifies the STR of some arbitrary game event.\n\t * */\n\tstate({data,gameId,status}) { this.$publish('state', {data,gameId,status})}\n\t/**\n\t * Notify the result for an unjoin request\n\t *\n\t * A Game Engine notifies the STR of the result of an unjoin request that it received on unjoin_callback\n\t * */\n\tunjoin_result({callerId,error,msgId,payload}) { this.$publish('unjoin_result', {callerId,error,msgId,payload})}\n}\n/**\n * User API for games\n *\n * Users can list, start, join games, and play.\n * @access public\n * */\nexport class Game extends Service {\n\t/**\n\t * Get default deployment id associated to GameService\n\t * @return {string}\n\t */\n\tstatic get DEFAULT_DEPLOYMENT_ID() {\n\t\treturn 'game_0'\n\t}\n\t/**\n\t * Lists game types\n\t *\n\t * Returns the list of game types supported by the server and the currently registered game engines.\n\t * */\n\tavailable({}) { this.$publish('available', {})}\n\t/**A user joins a game*/\n\tjoin({gameId,role,userId,userName}) { this.$publish('join', {gameId,role,userId,userName})}\n\t/**Organizes a game*/\n\torganize({type,owner,options}) { this.$publish('organize', {type,owner,options})}\n\t/**Gives some command to the game engine*/\n\tplay({data,gameId,userId}) { this.$publish('play', {data,gameId,userId})}\n\t/**Starts a game*/\n\tstart({gameId}) { this.$publish('start', {gameId})}\n\t/**A user cancels joining a game*/\n\tunjoin({gameId,role,userId,userName}) { this.$publish('unjoin', {gameId,role,userId,userName})}\n}\n/**\n * Generic Data Access\n *\n * Generic Data Access Service : NoSQL storage\n * */\n/**\n * GDA User API\n *\n * User API for Generic Data Access.\n * Data is stored on a per-user basis.\n * Users can put, get, list their data.\n * @access public\n * */\nexport class Gda extends Service {\n\t/**\n\t * Get default deployment id associated to GdaService\n\t * @return {string}\n\t */\n\tstatic get DEFAULT_DEPLOYMENT_ID() {\n\t\treturn 'gda_0'\n\t}\n\t/**\n\t * Asks for a data row\n\t *\n\t * Returns a full data row.\n\t * */\n\tget({key,owner,table}) { this.$publish('get', {key,owner,table})}\n\t/**\n\t * Asks for a data cell\n\t *\n\t * Returns a precise list of cells from a column in a data row.\n\t * */\n\tgetCells({column,key,key2,owner,table}) { this.$publish('getCells', {column,key,key2,owner,table})}\n\t/**\n\t * Increments an integer value\n\t *\n\t * Increments a cell 64-bit signed integer value and returns the result in the data field.\n\t * The increment is atomic : if you concurrently increment 10 times a value by 1, the final result will be the initial value plus 10. The actual individual resulting values seen by the 10 concurrent callers may vary discontinuously, with duplicates : at least one of them will see the final (+10) result.\n\t * */\n\tinc({table,data,key,key2,owner,column}) { this.$publish('inc', {table,data,key,key2,owner,column})}\n\t/**\n\t * Asks for a list of rows\n\t *\n\t * Returns a paginated list of rows from the given table.\n\t * */\n\tlist({columns,owner,page,table}) { this.$publish('list', {columns,owner,page,table})}\n\t/**\n\t * Puts some data into a cell\n\t *\n\t * Creates or replaces the contents of a particular cell.\n\t * */\n\tput({column,data,key,key2,owner,table}) { this.$publish('put', {column,data,key,key2,owner,table})}\n\t/**\n\t * Puts several rows\n\t *\n\t * Creates or replaces the (maybe partial) contents of a collection of rows.\n\t * This method only creates or replaces cells for non-null input values.\n\t * */\n\tputs({owner,rows,table}) { this.$publish('puts', {owner,rows,table})}\n\t/**\n\t * Asks for a range of rows\n\t *\n\t * Returns a paginated range of rows from the given table.\n\t * A range consists of consecutive rows from the start key (inclusive) to the stop key (exclusive).\n\t * You can specify partial keys for the start and stop fields.\n\t * */\n\trange({columns,owner,page,start,stop,table}) { this.$publish('range', {columns,owner,page,start,stop,table})}\n\t/**\n\t * Reduces a range of rows\n\t *\n\t * Returns a computed single reduced result from a range of rows from the given table.\n\t * A range consists of consecutive rows from the start key (inclusive) to the stop key (exclusive).\n\t * You can specify partial keys for the start and stop fields.\n\t * */\n\treduce({}) { this.$publish('reduce', {})}\n\t/**\n\t * Removes one cell inside a column of a row\n\t *\n\t * Removes only one cell of the given column of the given row from the given table.\n\t * */\n\tremoveCell({column,key,key2,owner,table}) { this.$publish('removeCell', {column,key,key2,owner,table})}\n\t/**\n\t * Removes one full column of a row\n\t *\n\t * Removes all cells of the given column of the given row from the given table.\n\t * */\n\tremoveColumn({column,key,owner,table}) { this.$publish('removeColumn', {column,key,owner,table})}\n\t/**\n\t * Removes a range of rows\n\t *\n\t * Removes the specified columns of the given range of rows from the given table.\n\t * */\n\tremoveRange({columns,owner,start,stop,table}) { this.$publish('removeRange', {columns,owner,start,stop,table})}\n\t/**\n\t * Removes one full row\n\t *\n\t * Removes all columns of the given row from the given table.\n\t * */\n\tremoveRow({key,owner,table}) { this.$publish('removeRow', {key,owner,table})}\n}\n/**\n * Groups Management\n *\n * Groups management for users, grants on resources, remote commands on devices\n *  This is where you can configure rights for any resource\n *\n * */\n/**\n * User API for remote control\n *\n * @access public\n * */\nexport class Remoting extends Service {\n\t/**\n\t * Get default deployment id associated to RemotingService\n\t * @return {string}\n\t */\n\tstatic get DEFAULT_DEPLOYMENT_ID() {\n\t\treturn 'groups_0'\n\t}\n\t/**\n\t * Adds a listener\n\t *\n\t * A user requests notifications from a device owned by anyone who granted him the right authorizations.\n\t * Whenever the device calls 'notify', notifications will be sent to the caller of this verb.\n\t * */\n\taddListener({cmd,data,from,fromResource,owner,resource}) { this.$publish('addListener', {cmd,data,from,fromResource,owner,resource})}\n\t/**Response to 'getCapabilities'*/\n\tcapabilities({answeringResource,askingResource,capabilities}) { this.$publish('capabilities', {answeringResource,askingResource,capabilities})}\n\t/**\n\t * Executes a command\n\t *\n\t * A user executes a command on a device owned by anyone who granted him the right authorizations.\n\t * The command is issued on channel 'command'\n\t * */\n\texecute({resource,cmd,data,owner}) { this.$publish('execute', {resource,cmd,data,owner})}\n\t/**\n\t * Requests capabilities\n\t *\n\t * A user requests all his devices for the whole list of their capabilities.\n\t * Devices are expected to answer on channel 'capabilities'\n\t * */\n\tgetCapabilities({}) { this.$publish('getCapabilities', {})}\n\t/**\n\t * Notifies of some event\n\t *\n\t * A device notifies the registered users/devices on this channel.\n\t * The server forwards the notification to said users.\n\t * */\n\tnotify({cmd,data,from,fromResource,owner,resource}) { this.$publish('notify', {cmd,data,from,fromResource,owner,resource})}\n\t/**\n\t * Pings devices\n\t *\n\t * A user requests all devices (of all owners) on which he has authorizations to respond on channel 'pong'\n\t * */\n\tping({action}) { this.$publish('ping', {action})}\n\t/**Response to ping*/\n\tpong({action,available,owner,resource,uid,user}) { this.$publish('pong', {action,available,owner,resource,uid,user})}\n\t/**\n\t * Removes a listener\n\t *\n\t * A user stops requesting notifications from a device owned by anyone who granted him the right authorizations\n\t * */\n\tremoveListener({cmd,data,from,fromResource,owner,resource}) { this.$publish('removeListener', {cmd,data,from,fromResource,owner,resource})}\n}\n/**\n * User API for groups and rights.\n *\n * Groups are stored per user.\n * This means that two users can own a group with the same identifier. A couple (owner, group) is needed to uniquely identify a group inside a group management service.\n * The triplet (deploymentId, owner, group) is actually needed to fully qualify a group outside of the scope of this service.\n * @access public\n * */\nexport class GroupManagement extends Service {\n\t/**\n\t * Get default deployment id associated to GroupManagementService\n\t * @return {string}\n\t */\n\tstatic get DEFAULT_DEPLOYMENT_ID() {\n\t\treturn 'groups_0'\n\t}\n\t/**\n\t * Adds me to a group\n\t *\n\t * Adds me (the caller) to a group.\n\t * This verb exists so that group owners may grant the right to join their groups without granting the right to add other users to those groups.\n\t * The 'user' field is implicitly set to the current user's key.\n\t * */\n\taddMe({group,owner}) { this.$publish('addMe', {group,owner})}\n\t/**\n\t * Adds a user to a group\n\t *\n\t * Adds the given user to the given group.\n\t * Addition may fail if the given group does not already exist.\n\t * */\n\taddUser({user,group,owner}) { this.$publish('addUser', {user,group,owner})}\n\t/**Adds users to a group*/\n\taddUsers({users,group,owner}) { this.$publish('addUsers', {users,group,owner})}\n\t/**\n\t * Lists my owned groups, with details\n\t *\n\t * Returns the whole list of groups owned by the current user, with their members\n\t * */\n\tallGroups({owner}) { this.$publish('allGroups', {owner})}\n\t/**\n\t * Creates a group\n\t *\n\t * Creates a group owned by the current user.\n\t * Group creation may fail if the group already exists.\n\t * */\n\tcreateGroup({group,groupName,owner}) { this.$publish('createGroup', {group,groupName,owner})}\n\t/**\n\t * Removes a group\n\t *\n\t * Removes the given group owned by the current user or the given owner.\n\t * Also removes all grants to that group.\n\t * */\n\tdelGroup({group,owner}) { this.$publish('delGroup', {group,owner})}\n\t/**Removes a user from a group*/\n\tdelUser({group,owner,user}) { this.$publish('delUser', {group,owner,user})}\n\t/**Removes users from a group*/\n\tdelUsers({group,groupName,owner,users}) { this.$publish('delUsers', {group,groupName,owner,users})}\n\t/**\n\t * Tests for a group's existence\n\t *\n\t * Returns whether a group exists or not.\n\t * */\n\texists({group,owner}) { this.$publish('exists', {group,owner})}\n\t/**\n\t * Grants a right to a group\n\t *\n\t * The granting API does not do any check when storing permissions.\n\t * In particular when granting rights on a verb and resource of another API, the existence of said verb and resource is not checked.\n\t * */\n\tgrant({action,group,owner,resource}) { this.$publish('grant', {action,group,owner,resource})}\n\t/**\n\t * Lists the group users\n\t *\n\t * Returns the whole list of users configured inside the given group.\n\t * */\n\tgroupUsers({group,owner}) { this.$publish('groupUsers', {group,owner})}\n\t/**\n\t * Lists my owned groups\n\t *\n\t * Returns the whole list of groups owned by the current user\n\t * */\n\tgroups({owner}) { this.$publish('groups', {owner})}\n\t/**\n\t * Lists rights for a group\n\t *\n\t * This API lists explicitly configured rights.\n\t * Effective rights include configured rights, implicit rights and inherited rights.\n\t * */\n\tlistGrants({group,owner}) { this.$publish('listGrants', {group,owner})}\n\t/**\n\t * Lists presences for a group\n\t *\n\t * Returns the list of members of the given groups, along with their actual and current presence on the zetapush server.\n\t * The current implementation does not include information about the particular devices users are connected with.\n\t * If a user is connected twice with two different devices, two identical entries will be returned.\n\t * */\n\tlistPresences({group,owner}) { this.$publish('listPresences', {group,owner})}\n\t/**\n\t * Tests membership\n\t *\n\t * Tests whether I (the caller) am a member of the given group.\n\t * This verb exists so that users can determine if they are part of a group without being granted particular rights.\n\t * The 'user' field is implicitly set to the current user's key.\n\t * */\n\tmemberOf({hardFail,group,owner}) { this.$publish('memberOf', {hardFail,group,owner})}\n\t/**\n\t * Grants rights to a group\n\t *\n\t * Grant several rights at once.\n\t * */\n\tmgrant({actions,group,owner,resource}) { this.$publish('mgrant', {actions,group,owner,resource})}\n\t/**Revokes rights for a group*/\n\tmrevoke({actions,group,owner,resource}) { this.$publish('mrevoke', {actions,group,owner,resource})}\n\t/**\n\t * Lists the groups I am part of\n\t *\n\t * Returns the whole list of groups the current user is part of.\n\t * Groups may be owned by anyone, including the current user.\n\t * */\n\tmyGroups({owner}) { this.$publish('myGroups', {owner})}\n\t/**Revokes a right for a group*/\n\trevoke({action,group,owner,resource}) { this.$publish('revoke', {action,group,owner,resource})}\n}\n/**\n * HTTP client\n *\n * Web-service client\n *  An admin records URL templates that can be called by users\n *  Calls are not configurable by end-users\n *  However an admin may leverage the macro service to achieve URL, headers and body configurability\n * */\n/**\n * User API for http requests\n *\n * @access public\n * */\nexport class Httpclient extends Service {\n\t/**\n\t * Get default deployment id associated to HttpclientService\n\t * @return {string}\n\t */\n\tstatic get DEFAULT_DEPLOYMENT_ID() {\n\t\treturn 'httpclient_0'\n\t}\n\t/**\n\t * Makes a predefined request\n\t *\n\t * Lookups a predefined request by name, and executes it.\n\t * */\n\tcall({name,requestId}) { this.$publish('call', {name,requestId})}\n\t/**\n\t * Makes a parameterized request\n\t *\n\t * Executes an HTTP request with the given url, method, headers and body.\n\t * */\n\trequest({}) { this.$publish('request', {})}\n}\n/**\n * Macros\n *\n * Macro-command service\n *  An admin defines macro-commands that can sequentially call any number of other api verbs, loop on collections of data, make decisions, etc\n *\n *\n *  End-users play them, with contextual parameters\n * */\n/**\n * User API for macro execution\n *\n * Simple errors are reported as usual.\n * However, the macro execution verbs treat most errors in a particular way : instead of reporting errors on the usual 'error' channel, errors are put in the returned 'MacroCompletion' result.\n * This behavior can be tuned on a per-call basis with the hardFail parameter.\n * Note that some particular errors will always behave as if hardFail were true, because they are related to programming errors, or prevent processing from ending gracefully : STACK_OVERFLOW, NO_SUCH_FUNCTION, RAM_EXCEEDED, CYCLES_EXCEEDED, TIME_EXCEEDED, QUOTA_EXCEEDED, RATE_EXCEEDED, BAD_COMPARATOR_VALUE\n * @access public\n * */\nexport class Macro extends Service {\n\t/**\n\t * Get default deployment id associated to MacroService\n\t * @return {string}\n\t */\n\tstatic get DEFAULT_DEPLOYMENT_ID() {\n\t\treturn 'macro_0'\n\t}\n\t/**\n\t * Plays a previously recorded macro\n\t *\n\t * DO NOT use this verb from inside an enclosing macro when you need the result in order to proceed with the enclosing macro.\n\t * You can override the default notification channel when defining the macro.\n\t * */\n\tcall({debug,hardFail,name,parameters}) { this.$publish('call', {debug,hardFail,name,parameters})}\n\t/**\n\t * Plays a previously recorded macro and returns the result.\n\t *\n\t * Use this verb when you want to synchronously call a macro from inside another macro.\n\t * */\n\tfunc({}) { this.$publish('func', {})}\n\t/**\n\t * Similar to func, with the ability to impersonate any user at will.\n\t *\n\t * Use this verb when you do not want to use or cannot use the standard rights system and wish to bypass it completely.\n\t * Use this verb sparingly, as it can give the caller any right on any resource.\n\t * */\n\tsudo({}) { this.$publish('sudo', {})}\n}\n/**\n * Mail sender\n *\n * Sends email through SMTP\n * */\n/**\n * Mail service user API\n *\n * This service is statically configured with an outgoing SMTP server.\n * Users call the API here to actually send emails.\n * @access public\n * */\nexport class Sendmail extends Service {\n\t/**\n\t * Get default deployment id associated to SendmailService\n\t * @return {string}\n\t */\n\tstatic get DEFAULT_DEPLOYMENT_ID() {\n\t\treturn 'sendmail_0'\n\t}\n\t/**\n\t * Sends an email\n\t *\n\t * Sends an email with the given body to the intended recipients.\n\t * */\n\tsend({}) { this.$publish('send', {})}\n}\n/**\n * Messaging service\n *\n * Messaging service\n * */\n/**\n * Messaging service\n *\n * Simple and flexible user-to-user or user-to-group messaging service.\n * @access public\n * */\nexport class Messaging extends Service {\n\t/**\n\t * Get default deployment id associated to MessagingService\n\t * @return {string}\n\t */\n\tstatic get DEFAULT_DEPLOYMENT_ID() {\n\t\treturn 'messaging_0'\n\t}\n\t/**\n\t * Sends a message to a target\n\t *\n\t * Sends the given message to the specified target on the given (optional) channel.\n\t * The administratively given default channel name is used when none is provided in the message itself.\n\t * */\n\tsend({target,channel,data}) { this.$publish('send', {target,channel,data})}\n}\n/**\n * Producer consumer\n *\n * Producer consumer service\n *  Users can submit tasks and other users consume them\n * */\n/**\n * Producer / consumer real-time API\n *\n * Task producers submits their tasks.\n * The server dispatches the tasks.\n * Consumers process them and report completion back to the server.\n * Tasks are global to the service (i.e. NOT per user).\n * @access public\n * */\nexport class Queue extends Service {\n\t/**\n\t * Get default deployment id associated to QueueService\n\t * @return {string}\n\t */\n\tstatic get DEFAULT_DEPLOYMENT_ID() {\n\t\treturn 'queue_0'\n\t}\n\t/**\n\t * Submits a task\n\t *\n\t * Producer API.\n\t * A task producer submits the given task to the server.\n\t * The server will find a tasker with processing capacity and dispatch the task.\n\t * The task result will be returned to the caller.\n\t * When called from inside a macro, the comsumer generated result is available for further use.\n\t * */\n\tcall({description,originBusinessId,originDeploymentId,data,owner}) { this.$publish('call', {description,originBusinessId,originDeploymentId,data,owner})}\n\t/**\n\t * Notifies completion of a task\n\t *\n\t * Consumer API.\n\t * The tasker notifies completion of the given task to the server.\n\t * The tasker can optionally include a result or an error code.\n\t * */\n\tdone({result,success,taskId}) { this.$publish('done', {result,success,taskId})}\n\t/**\n\t * Registers a consumer\n\t *\n\t * Consumer API.\n\t * Registers the current user resource as an available task consumer.\n\t * Tasks will be then dispatched to that consumer.\n\t * */\n\tregister({capacity}) { this.$publish('register', {capacity})}\n\t/**\n\t * Submits a task\n\t *\n\t * Producer API.\n\t * A task producer submits the given task to the server.\n\t * The server will find a tasker with processing capacity and dispatch the task.\n\t * The task result will be ignored : the producer will not receive any notification of any kind, even in case of errors (including capacity exceeded errors).\n\t * This verb will return immediately : you can use this API to asynchronously submit a task.\n\t * */\n\tsubmit({description,originBusinessId,originDeploymentId,data,owner}) { this.$publish('submit', {description,originBusinessId,originDeploymentId,data,owner})}\n\t/**\n\t * Unregisters a consumer\n\t *\n\t * Consumer API.\n\t * Unregisters the current user resource as an available task consumer.\n\t * All non finished tasks are returned to the server.\n\t * */\n\tunregister({}) { this.$publish('unregister', {})}\n}\n/**\n * SMS via OVH\n *\n * SMS sender, to send text messages to mobile phones\n * This SMS sending service uses the OVH API\n *\n * */\n/**\n * SMS service\n *\n * User API for SMS.\n * @access public\n * */\nexport class Sms_ovh extends Service {\n\t/**\n\t * Get default deployment id associated to Sms_ovhService\n\t * @return {string}\n\t */\n\tstatic get DEFAULT_DEPLOYMENT_ID() {\n\t\treturn 'sms_ovh_0'\n\t}\n\t/**\n\t * Sends an SMS\n\t *\n\t * Sends the given message to the given recipients.\n\t * */\n\tsend({}) { this.$publish('send', {})}\n}\n/**\n * Scheduler\n *\n * Scheduler service\n *  End-users can schedule one-time or repetitive tasks using a classical cron syntax (with the year field) or a timestamp (milliseconds from the epoch)\n * */\n/**\n * User API for the Scheduler\n *\n * User endpoints for scheduling : users can schedule, list and delete tasks.\n * Tasks are stored on a per-user basis: a task will run with the priviledges of the user who stored it.\n * Tasks are run on the server and thus can call api verbs marked as server-only.\n * @access public\n * */\nexport class Cron extends Service {\n\t/**\n\t * Get default deployment id associated to CronService\n\t * @return {string}\n\t */\n\tstatic get DEFAULT_DEPLOYMENT_ID() {\n\t\treturn 'cron_0'\n\t}\n\t/**\n\t * List the configured tasks\n\t *\n\t * Returns a paginated list of the asking user's tasks.\n\t * */\n\tlist({owner,page,start,stop}) { this.$publish('list', {owner,page,start,stop})}\n\t/**\n\t * Schedules a task\n\t *\n\t * Schedules a task for later execution.\n\t * If a task already exists with the same cronName, this new task completely replaces it.\n\t * A task can be scheduled with a cron-like syntax for repetitive or one-shot execution.\n\t * Wildcards are not allowed for minutes and hours.\n\t * When scheduling for one-shot execution, the time must be at least two minutes into the future.\n\t * */\n\tschedule({}) { this.$publish('schedule', {})}\n\t/**\n\t * Removes a scheduled task\n\t *\n\t * Removes a previously scheduled task.\n\t * Does absolutely nothing if asked to remove a non-existent task.\n\t * */\n\tunschedule({cronName,owner}) { this.$publish('unschedule', {cronName,owner})}\n}\n/**\n * Search engine\n *\n * ElasticSearch engine, to index and search data\n *  An admin creates indices\n *  Users index and search documents\n *\n * */\n/**\n * ElasticSearch Service\n *\n * This API is a very thin wrapper around ElasticSearch's API.\n * @access public\n * */\nexport class Search extends Service {\n\t/**\n\t * Get default deployment id associated to SearchService\n\t * @return {string}\n\t */\n\tstatic get DEFAULT_DEPLOYMENT_ID() {\n\t\treturn 'search_0'\n\t}\n\t/**\n\t * Deletes data\n\t *\n\t * Deletes a document from the elasticsearch engine by id.\n\t * */\n\tdelete({id,index,type}) { this.$publish('delete', {id,index,type})}\n\t/**\n\t * Gets data\n\t *\n\t * Retrieves a document from the elasticsearch engine by id.\n\t * */\n\tget({id,index,type}) { this.$publish('get', {id,index,type})}\n\t/**\n\t * Indexes data\n\t *\n\t * Inserts or updates a document into the elasticsearch engine.\n\t * */\n\tindex({data,id,index,type}) { this.$publish('index', {data,id,index,type})}\n\t/**Searches for data*/\n\tsearch({indices,page,query,sort}) { this.$publish('search', {indices,page,query,sort})}\n}\n/**\n * Template engine\n *\n * Template engine to produce documents from parameterized templates\n * <br>An admin creates templates\n * <br> Users produce documents\n * <br>The implementation uses the <a href='http://freemarker\n * org/'>freemarker</a> engine\n *\n * */\n/**\n * User API for templates\n *\n * Users use this API to evaluate pre-configured templates.\n * @access public\n * */\nexport class Template extends Service {\n\t/**\n\t * Get default deployment id associated to TemplateService\n\t * @return {string}\n\t */\n\tstatic get DEFAULT_DEPLOYMENT_ID() {\n\t\treturn 'template_0'\n\t}\n\t/**\n\t * Evaluates a template\n\t *\n\t * Evaluates the given template and returns the result as a string.\n\t * Templates are parsed the first time they are evaluated. Evaluation may fail early due to a parsing error.\n\t * */\n\tevaluate({data,languageTag,name,requestId}) { this.$publish('evaluate', {data,languageTag,name,requestId})}\n}\n/**\n * Upload: S3\n *\n * Upload service with S3 storage\n * */\n/**\n * User API for file management\n *\n * User API for virtual file management and http file upload\n * This API contains all the verbs needed to browse, upload and remove files.\n * Files are stored on a per-user basis: each user has his or her own whole virtual filesystem.\n * Uploading a file is a 3-step process : request an upload URL, upload via HTTP, notify this service of completion.\n * @access public\n * */\nexport class Zpfs_s3 extends Service {\n\t/**\n\t * Get default deployment id associated to Zpfs_s3Service\n\t * @return {string}\n\t */\n\tstatic get DEFAULT_DEPLOYMENT_ID() {\n\t\treturn 'zpfs_s3_0'\n\t}\n\t/**\n\t * Copies a file\n\t *\n\t * Copies a file or folder (recursively) to a new location.\n\t * May fail if the target location is not empty.\n\t * */\n\tcp({oldPath,owner,path}) { this.$publish('cp', {oldPath,owner,path})}\n\t/**\n\t * Returns disk usage\n\t *\n\t * Returns an recursively aggregated number of used bytes, starting at the given path.\n\t * */\n\tdu({owner,path}) { this.$publish('du', {owner,path})}\n\t/**Requests an upload URL without constraints.*/\n\tfreeUploadUrl({}) { this.$publish('freeUploadUrl', {})}\n\t/**\n\t * Links a file\n\t *\n\t * Links a file or folder to another location.\n\t * May fail if the target location is not empty.\n\t * */\n\tlink({oldPath,owner,path}) { this.$publish('link', {oldPath,owner,path})}\n\t/**\n\t * Lists a folder content\n\t *\n\t * Returns a paginated list of the folder's content.\n\t * */\n\tls({folder,owner,page}) { this.$publish('ls', {folder,owner,page})}\n\t/**\n\t * Creates a folder\n\t *\n\t * Creates a new folder.\n\t * May fail if the target location is not empty.\n\t * */\n\tmkdir({folder,owner,parents}) { this.$publish('mkdir', {folder,owner,parents})}\n\t/**\n\t * Moves a file\n\t *\n\t * Moves a file or folder (recursively) to a new location.\n\t * May fail if the target location is not empty.\n\t * */\n\tmv({oldPath,owner,path}) { this.$publish('mv', {oldPath,owner,path})}\n\t/**\n\t * Notifies of upload completion\n\t *\n\t * The client application calls this verb to notify that it's done uploading to the cloud.\n\t * Calling that verb MAY trigger additional events such as thumbnail/metadata creation.\n\t * */\n\tnewFile({guid,metadata,owner,tags}) { this.$publish('newFile', {guid,metadata,owner,tags})}\n\t/**\n\t * Requests an upload URL\n\t *\n\t * Requests an HTTP upload URL.\n\t * The URL contains temporary credentials (typically valid for a few minutes) and is meant for immediate use.\n\t * */\n\tnewUploadUrl({contentType,owner,path}) { this.$publish('newUploadUrl', {contentType,owner,path})}\n\t/**\n\t * Removes a file\n\t *\n\t * Removes a file or folder (recursively).\n\t * */\n\trm({owner,path}) { this.$publish('rm', {owner,path})}\n\t/**\n\t * Returns information about a file\n\t *\n\t * Returns information about a single file.\n\t * The entry field will be null if the path does not exist\n\t * */\n\tstat({owner,path}) { this.$publish('stat', {owner,path})}\n\t/**Updates a file's metadata*/\n\tupdateMeta({metadata,metadataFiles,owner,path}) { this.$publish('updateMeta', {metadata,metadataFiles,owner,path})}\n}\n/**\n * Upload: local\n *\n * Upload service with local HDFS storage\n * */\n/**\n * User API for file management\n *\n * User API for virtual file management and http file upload\n * This API contains all the verbs needed to browse, upload and remove files.\n * Files are stored on a per-user basis: each user has his or her own whole virtual filesystem.\n * Uploading a file is a 3-step process : request an upload URL, upload via HTTP, notify this service of completion.\n * @access public\n * */\nexport class Zpfs_hdfs extends Service {\n\t/**\n\t * Get default deployment id associated to Zpfs_hdfsService\n\t * @return {string}\n\t */\n\tstatic get DEFAULT_DEPLOYMENT_ID() {\n\t\treturn 'zpfs_hdfs_0'\n\t}\n\t/**\n\t * Copies a file\n\t *\n\t * Copies a file or folder (recursively) to a new location.\n\t * May fail if the target location is not empty.\n\t * */\n\tcp({oldPath,owner,path}) { this.$publish('cp', {oldPath,owner,path})}\n\t/**\n\t * Returns disk usage\n\t *\n\t * Returns an recursively aggregated number of used bytes, starting at the given path.\n\t * */\n\tdu({owner,path}) { this.$publish('du', {owner,path})}\n\t/**Requests an upload URL without constraints.*/\n\tfreeUploadUrl({}) { this.$publish('freeUploadUrl', {})}\n\t/**\n\t * Links a file\n\t *\n\t * Links a file or folder to another location.\n\t * May fail if the target location is not empty.\n\t * */\n\tlink({oldPath,owner,path}) { this.$publish('link', {oldPath,owner,path})}\n\t/**\n\t * Lists a folder content\n\t *\n\t * Returns a paginated list of the folder's content.\n\t * */\n\tls({folder,owner,page}) { this.$publish('ls', {folder,owner,page})}\n\t/**\n\t * Creates a folder\n\t *\n\t * Creates a new folder.\n\t * May fail if the target location is not empty.\n\t * */\n\tmkdir({folder,owner,parents}) { this.$publish('mkdir', {folder,owner,parents})}\n\t/**\n\t * Moves a file\n\t *\n\t * Moves a file or folder (recursively) to a new location.\n\t * May fail if the target location is not empty.\n\t * */\n\tmv({oldPath,owner,path}) { this.$publish('mv', {oldPath,owner,path})}\n\t/**\n\t * Notifies of upload completion\n\t *\n\t * The client application calls this verb to notify that it's done uploading to the cloud.\n\t * Calling that verb MAY trigger additional events such as thumbnail/metadata creation.\n\t * */\n\tnewFile({guid,metadata,owner,tags}) { this.$publish('newFile', {guid,metadata,owner,tags})}\n\t/**\n\t * Requests an upload URL\n\t *\n\t * Requests an HTTP upload URL.\n\t * The URL contains temporary credentials (typically valid for a few minutes) and is meant for immediate use.\n\t * */\n\tnewUploadUrl({contentType,owner,path}) { this.$publish('newUploadUrl', {contentType,owner,path})}\n\t/**\n\t * Removes a file\n\t *\n\t * Removes a file or folder (recursively).\n\t * */\n\trm({owner,path}) { this.$publish('rm', {owner,path})}\n\t/**\n\t * Returns information about a file\n\t *\n\t * Returns information about a single file.\n\t * The entry field will be null if the path does not exist\n\t * */\n\tstat({owner,path}) { this.$publish('stat', {owner,path})}\n\t/**Updates a file's metadata*/\n\tupdateMeta({metadata,metadataFiles,owner,path}) { this.$publish('updateMeta', {metadata,metadataFiles,owner,path})}\n}\n/**\n * Upload: pseudo-S3\n *\n * Upload service with pseudo-S3compatible storage\n * */\n/**\n * User API for file management\n *\n * User API for virtual file management and http file upload\n * This API contains all the verbs needed to browse, upload and remove files.\n * Files are stored on a per-user basis: each user has his or her own whole virtual filesystem.\n * Uploading a file is a 3-step process : request an upload URL, upload via HTTP, notify this service of completion.\n * @access public\n * */\nexport class Zpfs_s3compat extends Service {\n\t/**\n\t * Get default deployment id associated to Zpfs_s3compatService\n\t * @return {string}\n\t */\n\tstatic get DEFAULT_DEPLOYMENT_ID() {\n\t\treturn 'zpfs_s3compat_0'\n\t}\n\t/**\n\t * Copies a file\n\t *\n\t * Copies a file or folder (recursively) to a new location.\n\t * May fail if the target location is not empty.\n\t * */\n\tcp({oldPath,owner,path}) { this.$publish('cp', {oldPath,owner,path})}\n\t/**\n\t * Returns disk usage\n\t *\n\t * Returns an recursively aggregated number of used bytes, starting at the given path.\n\t * */\n\tdu({owner,path}) { this.$publish('du', {owner,path})}\n\t/**Requests an upload URL without constraints.*/\n\tfreeUploadUrl({}) { this.$publish('freeUploadUrl', {})}\n\t/**\n\t * Links a file\n\t *\n\t * Links a file or folder to another location.\n\t * May fail if the target location is not empty.\n\t * */\n\tlink({oldPath,owner,path}) { this.$publish('link', {oldPath,owner,path})}\n\t/**\n\t * Lists a folder content\n\t *\n\t * Returns a paginated list of the folder's content.\n\t * */\n\tls({folder,owner,page}) { this.$publish('ls', {folder,owner,page})}\n\t/**\n\t * Creates a folder\n\t *\n\t * Creates a new folder.\n\t * May fail if the target location is not empty.\n\t * */\n\tmkdir({folder,owner,parents}) { this.$publish('mkdir', {folder,owner,parents})}\n\t/**\n\t * Moves a file\n\t *\n\t * Moves a file or folder (recursively) to a new location.\n\t * May fail if the target location is not empty.\n\t * */\n\tmv({oldPath,owner,path}) { this.$publish('mv', {oldPath,owner,path})}\n\t/**\n\t * Notifies of upload completion\n\t *\n\t * The client application calls this verb to notify that it's done uploading to the cloud.\n\t * Calling that verb MAY trigger additional events such as thumbnail/metadata creation.\n\t * */\n\tnewFile({guid,metadata,owner,tags}) { this.$publish('newFile', {guid,metadata,owner,tags})}\n\t/**\n\t * Requests an upload URL\n\t *\n\t * Requests an HTTP upload URL.\n\t * The URL contains temporary credentials (typically valid for a few minutes) and is meant for immediate use.\n\t * */\n\tnewUploadUrl({contentType,owner,path}) { this.$publish('newUploadUrl', {contentType,owner,path})}\n\t/**\n\t * Removes a file\n\t *\n\t * Removes a file or folder (recursively).\n\t * */\n\trm({owner,path}) { this.$publish('rm', {owner,path})}\n\t/**\n\t * Returns information about a file\n\t *\n\t * Returns information about a single file.\n\t * The entry field will be null if the path does not exist\n\t * */\n\tstat({owner,path}) { this.$publish('stat', {owner,path})}\n\t/**Updates a file's metadata*/\n\tupdateMeta({metadata,metadataFiles,owner,path}) { this.$publish('updateMeta', {metadata,metadataFiles,owner,path})}\n}\n/**\n * User directory service\n *\n * User directory service\n * */\n/**\n * User API for user information\n *\n * @access public\n * */\nexport class Userdir extends Service {\n\t/**\n\t * Get default deployment id associated to UserdirService\n\t * @return {string}\n\t */\n\tstatic get DEFAULT_DEPLOYMENT_ID() {\n\t\treturn 'userdir_0'\n\t}\n\t/**Searches for users matching the request*/\n\tsearch({page,query,requestId}) { this.$publish('search', {page,query,requestId})}\n\t/**Requests public data for the specified users*/\n\tuserInfo({userKeys}) { this.$publish('userInfo', {userKeys})}\n}\n/**\n * Delegating authentication\n *\n * This authentication delegates authentication to an external auth provider\n * <br>When a zetapush client handshakes with a delegated authentication, the 'token' field given by the client is sent to the configured remote server as part of the URL\n * <br>The response must be in JSON format\n *  Each key of the response will be considered a user information field name\n *\n * */\n/**\n * End-user API for the delegating authentication\n *\n * Provisionning verbs.\n * @access public\n * */\nexport class Delegating extends Service {\n\t/**\n\t * Get default deployment id associated to DelegatingService\n\t * @return {string}\n\t */\n\tstatic get DEFAULT_DEPLOYMENT_ID() {\n\t\treturn 'delegating_0'\n\t}\n\t/**\n\t * Get user info\n\t *\n\t * Retrieves cached user info or (if missing) eagerly creates a zetapush key for the user.\n\t * The returned field 'zetapushKey' is a unique and permanent ID identifying a user in a sandbox.\n\t * */\n\tuserInfo({}) { this.$publish('userInfo', {})}\n}\n/**\n * Local authentication\n *\n * Zetapush local authentication\n *  The configurer can choose the primary key and mandatory user fields for account creation\n *  The field 'zetapushKey' is generated by the server and MUST not be used : it contains the unique key of the user inside a sandbox (it can be obtained from inside a macro with the <b>__userKey</b> pseudo-constant)\n * */\n/**\n * End-user API for the simple local authentication\n *\n * These API verbs allow end-users to manage their account.\n * @access public\n * */\nexport class Simple extends Service {\n\t/**\n\t * Get default deployment id associated to SimpleService\n\t * @return {string}\n\t */\n\tstatic get DEFAULT_DEPLOYMENT_ID() {\n\t\treturn 'simple_0'\n\t}\n\t/**\n\t * Changes a password\n\t *\n\t * Changes a user password for this authentication realm.\n\t * The user can be either implicit (the current user) or deduced from the token.\n\t * The change is effective immediately. However, already logged in users might stay connected.\n\t * */\n\tchangePassword({}) { this.$publish('changePassword', {})}\n\t/**\n\t * Checks some account's existence\n\t *\n\t * Checks whether the given user already exists in this 'simple' authentication realm.\n\t * */\n\tcheckUser({}) { this.$publish('checkUser', {})}\n\t/**\n\t * Creates a user\n\t *\n\t * Creates a new user in this 'simple' authentication realm.\n\t * */\n\tcreateUser({}) { this.$publish('createUser', {})}\n\t/**\n\t * Deletes a user\n\t *\n\t * Deletes an existing user in this 'simple' authentication realm.\n\t * */\n\tdeleteUser({}) { this.$publish('deleteUser', {})}\n\t/**\n\t * Requests a password reset\n\t *\n\t * Requests a password reset for the given unique key.\n\t * The key must exist and must be given, as it cannot obviously be deduced from the currently logged in user.\n\t * The returned token needs to be sent to the intended recipient only. The typical use case is to define a macro that requests a reset, generates a email template and emails the user. The macro can then be safely called by a weakly authenticated user.\n\t * Requesting a reset does not invalidate the password.\n\t * Requesting a reset again invalidates previous reset requests (only the last token is usable)\n\t * */\n\trequestReset({}) { this.$publish('requestReset', {})}\n\t/**\n\t * Updates a user\n\t *\n\t * Updates an existing user in this 'simple' authentication realm.\n\t * */\n\tupdateUser({}) { this.$publish('updateUser', {})}\n}\n/**\n * Weak authentication\n *\n * The weak authentication allows for anonymous authentication of devices\n *  Such devices can display a qrcode to allow regular users to take control of them\n * */\n/**\n * User API for weak devices control\n *\n * User API for control and release of weakly authenticated user sessions.\n * @access public\n * */\nexport class Weak extends Service {\n\t/**\n\t * Get default deployment id associated to WeakService\n\t * @return {string}\n\t */\n\tstatic get DEFAULT_DEPLOYMENT_ID() {\n\t\treturn 'weak_0'\n\t}\n\t/**\n\t * Controls a session\n\t *\n\t * Takes control of a weak user session, identified by the given public token.\n\t * The public token has been previously made available by the controlled device, for example by displaying a QRCode.\n\t * Upon control notification, the client SDK of the controlled session is expected to re-handshake.\n\t * */\n\tcontrol({fullRights,publicToken}) { this.$publish('control', {fullRights,publicToken})}\n\t/**\n\t * Releases a session\n\t *\n\t * Releases control of a weak user session, identified by the given public token.\n\t * The weak user session must have been previously controlled by a call to 'control'.\n\t * */\n\trelease({fullRights,publicToken}) { this.$publish('release', {fullRights,publicToken})}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/services/index.js\n **/","/**\n * Define life cycle connection methods\n * @access public\n */\nexport class ConnectionStatusListener {\n  /**\n   * Callback fired when connection is broken\n   */\n  onConnectionBroken() {}\n  /**\n   * Callback fired when connection is closed\n   */\n  onConnectionClosed() {}\n  /**\n   * Callback fired when connection is established\n   */\n  onConnectionEstablished() {}\n  /**\n  * Callback fired when connection will close\n  */\n  onConnectionWillClose() {}\n  /**\n   * Callback fired when an error occurs in handshake step\n   * @param {Object} error\n   */\n  onFailedHandshake(error) {}\n  /**\n   * Callback fired when a message is lost\n   */\n  onMessageLost() {}\n  /**\n   * Callback fired when handshake step succeed\n   * @param {Object} authentication\n   */\n  onSuccessfulHandshake(authentication) {}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/connection/connection-status.js\n **/","import { API_URL, isHttpsProtocol } from './utils/index'\nimport { ClientHelper } from './client-helper'\nimport { ConnectionStatusListener } from './connection/connection-status'\n\n/**\n * Client config object.\n * @typedef {Object} ClientConfig\n * @property {string} apiUrl - Api Url\n * @property {string} sandboxId - Sandbox id\n * @property {boolean} forceHttps - Force end to end HTTPS connection\n * @property {function():AbstractHandshake} credentials - Return credentials properties\n * @property {string} resource - Client resource id\n */\n\n/**\n * ZetaPush Client to connect\n * @access public\n * @example\n * // Securized client with token based connection\n * const client = new ZetaPush.Client({\n *   sandboxId: '<YOUR-SANDBOX-ID>',\n *   credentials() {\n *     return ZetaPush.Authentication.weak({\n *       token: null\n  *    })\n *   }\n * })\n * @example\n * // Client with credentials based connection\n * const client = new ZetaPush.Client({\n *   sandboxId: '<YOUR-SANDBOX-ID>',\n *   credentials() {\n *     return ZetaPush.Authentication.simple({\n *       login: '<USER-LOGIN>',\n *       password: '<USER-PASSWORD>'\n  *    })\n *   }\n * })\n */\nexport class Client {\n  /**\n   * @param {ClientConfig} config\n   * Create a new ZetaPush client\n   */\n  constructor({ apiUrl = API_URL, sandboxId, forceHttps = isHttpsProtocol(location), credentials, resource = null }) {\n    /**\n     * @access private\n     * @type {ClientHelper}\n     */\n    this.helper = new ClientHelper({\n      apiUrl,\n      sandboxId,\n      forceHttps,\n      credentials,\n      resource\n    })\n  }\n  /**\n   * Is client connected to ZetaPush\n   * @return {boolean}\n   */\n  isConnected() {\n    return this.helper.isConnected()\n  }\n  /**\n   * Connect client to ZetaPush\n   */\n  connect() {\n    this.helper.connect()\n  }\n  /**\n   * Disonnect client from ZetaPush\n   */\n  disconnect() {\n    this.helper.disconnect()\n  }\n  /**\n   * Get the client sandbox id\n   * @return {string}\n   */\n  getSandboxId() {\n    return this.helper.getSandboxId()\n  }\n  /**\n   * Get the client resource\n   * @return {string}\n   */\n  getResource() {\n    return this.helper.getResource()\n  }\n  /**\n   * Get the client user id\n   * @return {string}\n   */\n  getUserId() {\n    return this.helper.getUserId()\n  }\n  /**\n   * Remove all subscriptions\n   * @param {Object} service\n   */\n  unsubscribe(service) {\n    if (!service.$subscriptions) {\n      throw new TypeError('Missing $subscriptions property in service')\n    }\n    return this.helper.unsubscribe(service.$subscriptions)\n  }\n  /**\n   * Create a publish/subscribe for a service type\n   * @param {{type: class, deploymentId: string, listener: Object}} parameters\n   * @return {Object} service\n   */\n  createService({ type, listener, deploymentId = type.DEFAULT_DEPLOYMENT_ID }) {\n    return this.helper.createService({ deploymentId, listener, type })\n  }\n  /**\n   * Set new client resource value\n   * @param {string} resource\n   */\n  setResource(resource) {\n    this.helper.setResource(resource)\n  }\n  /**\n   * Add a connection listener to handle life cycle connection events\n   * @param {ConnectionStatusListener} listener\n   * @return {number} handler\n   */\n  addConnectionStatusListener(listener) {\n    return this.helper.addConnectionStatusListener(listener)\n  }\n  /**\n   * Remove a connection status listener\n   * @param {number} handler\n   */\n  removeConnectionStatusListener(handler) {\n    return this.helper.removeConnectionStatusListener(handler)\n  }\n  /**\n   * Set logging level\n   * Valid values are the strings 'error', 'warn', 'info' and 'debug', from\n   * less verbose to more verbose.\n   * @param {string} level\n   */\n  setLogLevel(level) {\n    this.helper.setLogLevel(level)\n  }\n}\n\n/**\n * Add shorthand connection status method\n */\nObject.getOwnPropertyNames(ConnectionStatusListener.prototype).forEach((method) => {\n  // Only implements unsupported methods\n  if (!Client.prototype.hasOwnProperty(method)) {\n    Client.prototype[method] = function addListener(listener) {\n      return this.addConnectionStatusListener({\n        [method]: listener\n      })\n    }\n  }\n})\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/client.js\n **/","/**\n * Match unsecure pattern web\n * @type {RegExp}\n */\nconst UNSECURE_PATTERN = /^http:\\/\\/|^\\/\\//\n\n/**\n* Default ZetaPush API URL\n* @access private\n*/\nexport const API_URL = 'https://api.zpush.io/'\n\n/**\n * @access private\n * @param {Array<Object>} list\n * @return {Object}\n */\nexport const shuffle = (list) => {\n  const index = Math.floor(Math.random() * list.length)\n  return list[index]\n}\n\n/**\n * @access private\n * @param {string} url\n * @param {boolean} forceHttps\n * @return {string}\n */\nexport const getSecureUrl = (url, forceHttps) => {\n  return forceHttps ? url.replace(UNSECURE_PATTERN, 'https://') : url\n}\n\n/**\n * @access private\n * @param {{apiUrl: string, sandboxId: string, forceHttps: boolean}} parameters\n * @return {Promise}\n */\nexport const getServers = ({ apiUrl, sandboxId, forceHttps }) => {\n  const secureApiUrl = getSecureUrl(apiUrl, forceHttps)\n  const url = `${secureApiUrl}${sandboxId}`\n  return fetch(url)\n    .then((response) => {\n      return response.json()\n    })\n    .then(({ servers }) => {\n      // TODO: Replace by a server side implementation when available\n      return servers.map((server) => {\n        return getSecureUrl(server, forceHttps)\n      })\n    })\n}\n\n/**\n * @access private\n * @return {boolean}\n */\nexport const isHttpsProtocol = ({ protocol } = {}) => {\n  return 'https:' === protocol\n}\n\n/**\n * @access  private\n * @return {boolean}\n */\nexport const isPrototypeOf = (derived, parent) => {\n  let prototype = Object.getPrototypeOf(derived)\n  let is = false\n  while (!(is || prototype === null)) {\n    is = prototype === parent\n    prototype = Object.getPrototypeOf(prototype)\n  }\n  return is\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/utils/index.js\n **/","import { CometD, WebSocketTransport } from 'zetapush-cometd'\nimport { FetchLongPollingTransport } from './connection/cometd'\nimport { ConnectionStatusListener } from './connection/connection-status'\nimport { Macro } from './services'\nimport { getServers, shuffle, isPrototypeOf } from './utils/index'\n\n/**\n * CometD Messages enumeration\n */\nconst Message = {\n  RECONNECT_HANDSHAKE_VALUE: 'handshake',\n  RECONNECT_NONE_VALUE: 'none',\n  RECONNECT_RETRY_VALUE: 'retry'\n}\n\n/**\n * CometD Transports enumeration\n */\nconst Transport = {\n  LONG_POLLING: 'long-polling',\n  WEBSOCKET: 'websocket'\n}\n\n/**\n * Provide utilities and abstraction on CometD Transport layer\n * @access private\n */\nexport class ClientHelper {\n  /**\n   * Create a new ZetaPush client helper\n   */\n  constructor({ apiUrl, sandboxId, forceHttps = false, credentials, resource }) {\n    /**\n     * @access private\n     * @type {string}\n     */\n    this.sandboxId = sandboxId\n    /**\n     * @access private\n     * @type {function():AbstractHandshake}\n     */\n    this.credentials = credentials\n    /**\n     * @access private\n     * @type {string}\n     */\n    this.resource = resource\n    /**\n     * @access private\n     * @type {string}\n     */\n    this.userId = null\n    /**\n     * @access private\n     * @type {Promise}\n     */\n    this.servers = getServers({ apiUrl, sandboxId, forceHttps })\n    /**\n     * @access private\n     * @type {Array<Object>}\n     */\n    this.connectionListeners = []\n    /**\n     * @access private\n     * @type {boolean}\n     */\n    this.connected = false\n    /**\n     * @access private\n     * @type {boolean}\n     */\n    this.wasConnected = false\n    /**\n     * @access private\n     * @type {string}\n     */\n    this.serverUrl = null\n    /**\n     * @access private\n     * @type {Array<Object>}\n     */\n    this.subscribeQueue = []\n    /**\n     * @access private\n     * @type {CometD}\n     */\n    this.cometd = new CometD()\n    this.cometd.registerTransport(Transport.WEBSOCKET, new WebSocketTransport())\n    this.cometd.registerTransport(Transport.LONG_POLLING, new FetchLongPollingTransport())\n    this.cometd.onTransportException = (cometd, transport) => {\n      if (Transport.LONG_POLLING === transport) {\n        // Try to find an other available server\n        // Remove the current one from the _serverList array\n        this.updateServerUrl()\n      }\n    }\n    this.cometd.addListener('/meta/handshake', ({ ext, successful, advice, error }) => {\n      this.cometd._debug('ClientHelper::/meta/handshake', { ext, successful, advice, error })\n      if (successful) {\n        const { authentication = null } = ext\n        this.initialized(authentication)\n      }\n      else {\n        this.handshakeFailure(error)\n      }\n    })\n\n    this.cometd.addListener('/meta/handshake', ({ advice, error, ext, successful }) => {\n      this.cometd._debug('ClientHelper::/meta/handshake', { ext, successful, advice, error })\n      // AuthNegotiation\n      if (!successful) {\n        if ('undefined' === typeof advice) {\n          return\n        }\n        if (Message.RECONNECT_NONE_VALUE === advice.reconnect) {\n          this.authenticationFailed(error)\n        }\n        else if (Message.RECONNECT_HANDSHAKE_VALUE === advice.reconnect) {\n          this.negotiate(ext)\n        }\n      }\n    })\n\n    this.cometd.addListener('/meta/connect', ({ advice, channel, successful }) => {\n      this.cometd._debug('ClientHelper::/meta/connect', { advice, channel, successful })\n      // ConnectionListener\n      if (this.cometd.isDisconnected()) {\n        this.connected = false\n        // Notify connection will close\n        this.connectionWillClose()\n      }\n      else {\n        this.wasConnected = this.connected\n        this.connected = successful\n        if (!this.wasConnected && this.connected) {\n          this.cometd.batch(this, () => {\n            // Unqueue subscriptions\n            this.subscribeQueue.forEach(({ prefix, listener, subscriptions }) => {\n              this.subscribe(prefix, listener, subscriptions)\n            })\n          })\n          // Notify connection is established\n          this.connectionEstablished()\n        }\n        else if (this.wasConnected && !this.connected) {\n          // Notify connection is broken\n          this.connectionBroken()\n        }\n      }\n    })\n\n    this.cometd.addListener('/meta/disconnect', ({ channel, successful }) => {\n      this.cometd._debug('ClientHelper::/meta/disconnect', { channel, successful })\n      if (this.cometd.isDisconnected()) {\n        this.connected = false\n        // Notify connection is closed\n        this.connectionClosed()\n      }\n    })\n  }\n  /**\n   * Is client connected to ZetaPush\n   * @return boolean\n   */\n  isConnected() {\n    return !this.cometd.isDisconnected()\n  }\n  /**\n   * Connect client using CometD Transport\n   */\n  connect() {\n    this.servers.then((servers) => {\n      this.serverUrl = shuffle(servers)\n\n      this.cometd.configure({\n        url: `${this.serverUrl}/strd`,\n        backoffIncrement: 1000,\n        maxBackoff: 60000,\n        appendMessageTypeToURL: false\n      })\n\n      this.cometd.handshake(this.getHandshakeFields())\n    })\n  }\n  /**\n   * Notify listeners when connection is established\n   */\n  connectionEstablished() {\n    this.connectionListeners\n      .filter(({ enabled }) => enabled)\n      .forEach(({ listener }) => {\n        listener.onConnectionEstablished()\n      })\n  }\n  /**\n   * Notify listeners when connection is broken\n   */\n  connectionBroken() {\n    this.connectionListeners\n      .filter(({ enabled }) => enabled)\n      .forEach(({ listener }) => {\n        listener.onConnectionBroken()\n      })\n  }\n  /**\n   * Notify listeners when a message is lost\n   */\n  messageLost(channel, data) {\n    this.connectionListeners\n      .filter(({ enabled }) => enabled)\n      .forEach(({ listener }) => {\n        listener.onMessageLost(channel, data)\n      })\n  }\n  /**\n   * Notify listeners when connection will close\n   */\n  connectionWillClose() {\n    this.connectionListeners\n      .filter(({ enabled }) => enabled)\n      .forEach(({ listener }) => {\n        listener.onConnectionWillClose()\n      })\n  }\n  /**\n   * Notify listeners when connection is closed\n   */\n  connectionClosed() {\n    this.userId = null\n    this.connectionListeners\n      .filter(({ enabled }) => enabled)\n      .forEach(({ listener }) => {\n        listener.onConnectionClosed()\n      })\n  }\n  /**\n   * Notify listeners when connection is established\n   */\n  initialized(authentication) {\n    if (authentication) {\n      this.userId = authentication.userId\n    }\n    this.connectionListeners\n      .filter(({ enabled }) => enabled)\n      .forEach(({ listener }) => {\n        listener.onSuccessfulHandshake(authentication)\n      })\n  }\n  /**\n   * Notify listeners when handshake step succeed\n   */\n  authenticationFailed(error) {\n    this.userId = null\n    this.connectionListeners\n      .filter(({ enabled }) => enabled)\n      .forEach(({ listener }) => {\n        listener.onFailedHandshake(error)\n      })\n  }\n  /**\n   * Manage handshake failure case\n   */\n  handshakeFailure() {\n    this.userId = null\n  }\n  /**\n  * Remove current server url from the server list and shuffle for another one\n  */\n  updateServerUrl() {\n    this.servers.then((servers) => {\n      const index = servers.indexOf(this.serverUrl)\n      if (index > -1) {\n        servers.splice(index, 1)\n      }\n      if (servers.length === 0) {\n        // No more server available\n      }\n      else {\n        this.serverUrl = shuffle(servers)\n        this.cometd.configure({\n          url: `${this.serverUrl}/strd`\n        })\n        setTimeout(() => {\n          this.cometd.handshake(this.getHandshakeFields())\n        }, 250)\n      }\n    })\n  }\n  /**\n   * Negociate authentication\n   */\n  negotiate(ext) {\n    this.cometd._debug('ClientHelper::negotiate', ext)\n  }\n  /**\n   * Disconnect CometD client\n   */\n  disconnect() {\n    this.cometd.disconnect(true)\n  }\n  /**\n   * Get CometD handshake parameters\n   * @return {Object}\n   */\n  getHandshakeFields() {\n    const handshake = this.credentials()\n    return handshake.getHandshakeFields(this)\n  }\n  /**\n   * Set a new handshake factory methods\n   * @param {function():AbstractHandshake} credentials\n   */\n  setCredentials(credentials) {\n    this.credentials = credentials\n  }\n  /**\n   * Get sandbox id\n   * @return {string}\n   */\n  getSandboxId() {\n    return this.sandboxId\n  }\n  /**\n   * Get resource\n   * @return {string}\n   */\n  getResource() {\n    return this.resource\n  }\n  /**\n   * Get user id\n   * @return {string}\n   */\n  getUserId() {\n    return this.userId\n  }\n  /**\n   * Subsribe all methods defined in the listener for the given prefixed channel\n   * @param {string} prefix - Channel prefix\n   * @param {Object} listener\n   * @param {Object} subscriptions\n   * @return {Object} subscriptions\n   */\n  subscribe(prefix, listener, subscriptions = {}) {\n    const { queued } = this.getQueuedSubscription(subscriptions)\n    if (!queued) {\n      // Store arguments to renew subscriptions on connection\n      this.subscribeQueue.push({ prefix, listener, subscriptions })\n    }\n    // Subscribe if user is connected\n    if (!this.cometd.isDisconnected()) {\n      for (let method in listener) {\n        if (listener.hasOwnProperty(method)) {\n          const channel = `${prefix}/${method}`\n          subscriptions[method] = this.cometd.subscribe(channel, listener[method])\n        }\n      }\n    }\n    return subscriptions\n  }\n  /**\n   * Remove all subscriptions\n   * @param {Object} subscriptions\n   */\n  unsubscribe(subscriptions = {}) {\n    // Unsubscribe\n    for (let method in subscriptions) {\n      if (subscriptions.hasOwnProperty(method)) {\n        const subscription = subscriptions[method]\n        this.cometd.unsubscribe(subscription)\n      }\n    }\n    // Remove subscription from queue\n    const { index, queued } = this.getQueuedSubscription(subscriptions)\n    if (queued)  {\n      this.subscribeQueue.splice(index, 1)\n    }\n  }\n  /**\n   * Get queued subscription index\n   * @return {Object} index\n   */\n  getQueuedSubscription(subscriptions = {}) {\n    const index = this.subscribeQueue.findIndex((element) => subscriptions === element.subscriptions)\n    return {\n      index,\n      queued: -1 < index\n    }\n  }\n  /**\n   * Get a publisher for a macro service\n   * @param {string} prefix - Channel prefix\n   * @return {Function} publisher\n   */\n  getMacroPublisher(prefix) {\n    return (name, parameters, hardFail = true, debug = 1) => {\n      const channel = `${prefix}/call`\n      this.publish(channel, {\n        name,\n        parameters,\n        hardFail,\n        debug\n      })\n    }\n  }\n  /**\n   * Get a publisher for a service\n   * @param {string} prefix - Channel prefix\n   * @return {Function} publisher\n   */\n  getServicePublisher(prefix) {\n    return (method, parameters) => {\n      const channel = `${prefix}/${method}`\n      this.publish(channel, parameters)\n    }\n  }\n  /**\n   * @param {{deploymentId: string, listener: Object, type: class}} parameters\n   * @return {Object} service\n   */\n  createService({ deploymentId, listener, type }) {\n    const isMacroType = isPrototypeOf(type, Macro)\n    const prefix = `/service/${this.getSandboxId()}/${deploymentId}`\n    const $publish = isMacroType ? this.getMacroPublisher(prefix) : this.getServicePublisher(prefix)\n    const service = new type({ $publish })\n    // Store subscription in service instance\n    service.$subscriptions = this.subscribe(prefix, listener)\n    return service\n  }\n  /**\n   * Unsubcribe all subscriptions defined in given subscriptions object\n   * @param {Object} subscriptions\n   */\n  unsubscribe(subscriptions) {\n    for (let method in subscriptions) {\n      if (subscriptions.hasOwnProperty(method)) {\n        this.cometd.unsubscribe(subscriptions[method])\n      }\n    }\n  }\n  /**\n   * Add a connection listener to handle life cycle connection events\n   * @param {ConnectionStatusListener} listener\n   * @return {number} handler\n   */\n  addConnectionStatusListener(listener) {\n    this.connectionListeners.push({\n      enabled: true,\n      listener: Object.assign(new ConnectionStatusListener(), listener)\n    })\n    return this.connectionListeners.length - 1\n  }\n  /**\n   * Remove a connection status listener\n   */\n  removeConnectionStatusListener(handler) {\n    const listener = this.connectionListeners[handler]\n    if (listener) {\n      listener.enabled = false\n    }\n  }\n  /**\n   * Wrap CometdD publish method\n   * @param {String} channel\n   * @param {Object} parameters\n   */\n  publish(channel, parameters = {}) {\n    this.cometd.publish(channel, parameters)\n  }\n  /**\n   * Set logging level for CometD client\n   * Valid values are the strings 'error', 'warn', 'info' and 'debug', from\n   * less verbose to more verbose.\n   * @param {string} level\n   */\n  setLogLevel(level) {\n    this.cometd.setLogLevel(level)\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/client-helper.js\n **/","module.exports = {\n  CallbackPollingTransport: require('./lib/CallbackPollingTransport'),\n  CometD: require('./lib/CometD'),\n  LongPollingTransport: require('./lib/LongPollingTransport'),\n  RequestTransport: require('./lib/RequestTransport'),\n  Transport: require('./lib/Transport'),\n  TransportRegistry: require('./lib/TransportRegistry'),\n  Utils: require('./lib/Utils'),\n  WebSocketTransport: require('./lib/WebSocketTransport')\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/zetapush-cometd/index.js\n ** module id = 9\n ** module chunks = 0\n **/","var Transport = require('./Transport');\nvar RequestTransport = require('./RequestTransport');\n\nmodule.exports = function CallbackPollingTransport() {\n    var _super = new RequestTransport();\n    var _self = Transport.derive(_super);\n\n    _self.accept = function(version, crossDomain, url) {\n        return true;\n    };\n\n    _self.jsonpSend = function(packet) {\n        throw 'Abstract';\n    };\n\n    function _failTransportFn(envelope, request, x) {\n        var self = this;\n        return function() {\n            self.transportFailure(envelope, request, 'error', x);\n        };\n    }\n\n    _self.transportSend = function(envelope, request) {\n        var self = this;\n\n        // Microsoft Internet Explorer has a 2083 URL max length\n        // We must ensure that we stay within that length\n        var start = 0;\n        var length = envelope.messages.length;\n        var lengths = [];\n        while (length > 0) {\n            // Encode the messages because all brackets, quotes, commas, colons, etc\n            // present in the JSON will be URL encoded, taking many more characters\n            var json = JSON.stringify(envelope.messages.slice(start, start + length));\n            var urlLength = envelope.url.length + encodeURI(json).length;\n\n            var maxLength = this.getConfiguration().maxURILength;\n            if (urlLength > maxLength) {\n                if (length === 1) {\n                    var x = 'Bayeux message too big (' + urlLength + ' bytes, max is ' + maxLength + ') ' +\n                        'for transport ' + this.getType();\n                    // Keep the semantic of calling response callbacks asynchronously after the request\n                    self.setTimeout(_failTransportFn.call(this, envelope, request, x), 0);\n                    return;\n                }\n\n                --length;\n                continue;\n            }\n\n            lengths.push(length);\n            start += length;\n            length = envelope.messages.length - start;\n        }\n\n        // Here we are sure that the messages can be sent within the URL limit\n\n        var envelopeToSend = envelope;\n        if (lengths.length > 1) {\n            var begin = 0;\n            var end = lengths[0];\n            this._debug('Transport', this.getType(), 'split', envelope.messages.length, 'messages into', lengths.join(' + '));\n            envelopeToSend = this._mixin(false, {}, envelope);\n            envelopeToSend.messages = envelope.messages.slice(begin, end);\n            envelopeToSend.onSuccess = envelope.onSuccess;\n            envelopeToSend.onFailure = envelope.onFailure;\n\n            for (var i = 1; i < lengths.length; ++i) {\n                var nextEnvelope = this._mixin(false, {}, envelope);\n                begin = end;\n                end += lengths[i];\n                nextEnvelope.messages = envelope.messages.slice(begin, end);\n                nextEnvelope.onSuccess = envelope.onSuccess;\n                nextEnvelope.onFailure = envelope.onFailure;\n                this.send(nextEnvelope, request.metaConnect);\n            }\n        }\n\n        this._debug('Transport', this.getType(), 'sending request', request.id, 'envelope', envelopeToSend);\n\n        try {\n            var sameStack = true;\n            this.jsonpSend({\n                transport: this,\n                url: envelopeToSend.url,\n                sync: envelopeToSend.sync,\n                headers: this.getConfiguration().requestHeaders,\n                body: JSON.stringify(envelopeToSend.messages),\n                onSuccess: function(responses) {\n                    var success = false;\n                    try {\n                        var received = self.convertToMessages(responses);\n                        if (received.length === 0) {\n                            self.transportFailure(envelopeToSend, request, {\n                                httpCode: 204\n                            });\n                        } else {\n                            success = true;\n                            self.transportSuccess(envelopeToSend, request, received);\n                        }\n                    } catch (x) {\n                        self._debug(x);\n                        if (!success) {\n                            self.transportFailure(envelopeToSend, request, {\n                                exception: x\n                            });\n                        }\n                    }\n                },\n                onError: function(reason, exception) {\n                    var failure = {\n                        reason: reason,\n                        exception: exception\n                    };\n                    if (sameStack) {\n                        // Keep the semantic of calling response callbacks asynchronously after the request\n                        self.setTimeout(function() {\n                            self.transportFailure(envelopeToSend, request, failure);\n                        }, 0);\n                    } else {\n                        self.transportFailure(envelopeToSend, request, failure);\n                    }\n                }\n            });\n            sameStack = false;\n        } catch (xx) {\n            // Keep the semantic of calling response callbacks asynchronously after the request\n            self.setTimeout(function() {\n                self.transportFailure(envelopeToSend, request, {\n                    exception: xx\n                });\n            }, 0);\n        }\n    };\n\n    return _self;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/zetapush-cometd/lib/CallbackPollingTransport.js\n ** module id = 10\n ** module chunks = 0\n **/","var Utils = require('./Utils')\n\n/**\n * Base object with the common functionality for transports.\n */\nmodule.exports = function Transport() {\n    var _type;\n    var _cometd;\n    var _url;\n\n    /**\n     * Function invoked just after a transport has been successfully registered.\n     * @param type the type of transport (for example 'long-polling')\n     * @param cometd the cometd object this transport has been registered to\n     * @see #unregistered()\n     */\n    this.registered = function(type, cometd) {\n        _type = type;\n        _cometd = cometd;\n    };\n\n    /**\n     * Function invoked just after a transport has been successfully unregistered.\n     * @see #registered(type, cometd)\n     */\n    this.unregistered = function() {\n        _type = null;\n        _cometd = null;\n    };\n\n    this._debug = function() {\n        _cometd._debug.apply(_cometd, arguments);\n    };\n\n    this._mixin = function() {\n        return _cometd._mixin.apply(_cometd, arguments);\n    };\n\n    this.getConfiguration = function() {\n        return _cometd.getConfiguration();\n    };\n\n    this.getAdvice = function() {\n        return _cometd.getAdvice();\n    };\n\n    this.setTimeout = function(funktion, delay) {\n        return Utils.setTimeout(_cometd, funktion, delay);\n    };\n\n    this.clearTimeout = function(handle) {\n        Utils.clearTimeout(handle);\n    };\n\n    /**\n     * Converts the given response into an array of bayeux messages\n     * @param response the response to convert\n     * @return an array of bayeux messages obtained by converting the response\n     */\n    this.convertToMessages = function(response) {\n        if (Utils.isString(response)) {\n            try {\n                return JSON.parse(response);\n            } catch (x) {\n                this._debug('Could not convert to JSON the following string', '\"' + response + '\"');\n                throw x;\n            }\n        }\n        if (Utils.isArray(response)) {\n            return response;\n        }\n        if (response === undefined || response === null) {\n            return [];\n        }\n        if (response instanceof Object) {\n            return [response];\n        }\n        throw 'Conversion Error ' + response + ', typeof ' + (typeof response);\n    };\n\n    /**\n     * Returns whether this transport can work for the given version and cross domain communication case.\n     * @param version a string indicating the transport version\n     * @param crossDomain a boolean indicating whether the communication is cross domain\n     * @param url the URL to connect to\n     * @return true if this transport can work for the given version and cross domain communication case,\n     * false otherwise\n     */\n    this.accept = function(version, crossDomain, url) {\n        throw 'Abstract';\n    };\n\n    /**\n     * Returns the type of this transport.\n     * @see #registered(type, cometd)\n     */\n    this.getType = function() {\n        return _type;\n    };\n\n    this.getURL = function() {\n        return _url;\n    };\n\n    this.setURL = function(url) {\n        _url = url;\n    };\n\n    this.send = function(envelope, metaConnect) {\n        throw 'Abstract';\n    };\n\n    this.reset = function(init) {\n        this._debug('Transport', _type, 'reset', init ? 'initial' : 'retry');\n    };\n\n    this.abort = function() {\n        this._debug('Transport', _type, 'aborted');\n    };\n\n    this.toString = function() {\n        return this.getType();\n    };\n};\n\nmodule.exports.derive = function(baseObject) {\n    function F() {\n    }\n\n    F.prototype = baseObject;\n    return new F();\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/zetapush-cometd/lib/Transport.js\n ** module id = 11\n ** module chunks = 0\n **/","exports.isString = function (value) {\n    if (value === undefined || value === null) {\n        return false;\n    }\n    return typeof value === 'string' || value instanceof String;\n};\n\nexports.isArray = function (value) {\n    if (value === undefined || value === null) {\n        return false;\n    }\n    return value instanceof Array;\n};\n\n/**\n * Returns whether the given element is contained into the given array.\n * @param element the element to check presence for\n * @param array the array to check for the element presence\n * @return the index of the element, if present, or a negative index if the element is not present\n */\nexports.inArray = function (element, array) {\n    for (var i = 0; i < array.length; ++i) {\n        if (element === array[i]) {\n            return i;\n        }\n    }\n    return -1;\n};\n\nexports.setTimeout = function (cometd, funktion, delay) {\n    return setTimeout(function() {\n        try {\n            cometd._debug('Invoking timed function', funktion);\n            funktion();\n        } catch (x) {\n            cometd._debug('Exception invoking timed function', funktion, x);\n        }\n    }, delay);\n};\n\nexports.clearTimeout = function (timeoutHandle) {\n    clearTimeout(timeoutHandle);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/zetapush-cometd/lib/Utils.js\n ** module id = 12\n ** module chunks = 0\n **/","var Transport = require('./Transport')\nvar Utils = require('./Utils')\n\n/**\n * Base object with the common functionality for transports based on requests.\n * The key responsibility is to allow at most 2 outstanding requests to the server,\n * to avoid that requests are sent behind a long poll.\n * To achieve this, we have one reserved request for the long poll, and all other\n * requests are serialized one after the other.\n */\nmodule.exports = function RequestTransport() {\n    var _super = new Transport();\n    var _self = Transport.derive(_super);\n    var _requestIds = 0;\n    var _metaConnectRequest = null;\n    var _requests = [];\n    var _envelopes = [];\n\n    function _coalesceEnvelopes(envelope) {\n        while (_envelopes.length > 0) {\n            var envelopeAndRequest = _envelopes[0];\n            var newEnvelope = envelopeAndRequest[0];\n            var newRequest = envelopeAndRequest[1];\n            if (newEnvelope.url === envelope.url &&\n                newEnvelope.sync === envelope.sync) {\n                _envelopes.shift();\n                envelope.messages = envelope.messages.concat(newEnvelope.messages);\n                this._debug('Coalesced', newEnvelope.messages.length, 'messages from request', newRequest.id);\n                continue;\n            }\n            break;\n        }\n    }\n\n    function _transportSend(envelope, request) {\n        this.transportSend(envelope, request);\n        request.expired = false;\n\n        if (!envelope.sync) {\n            var maxDelay = this.getConfiguration().maxNetworkDelay;\n            var delay = maxDelay;\n            if (request.metaConnect === true) {\n                delay += this.getAdvice().timeout;\n            }\n\n            this._debug('Transport', this.getType(), 'waiting at most', delay, 'ms for the response, maxNetworkDelay', maxDelay);\n\n            var self = this;\n            request.timeout = self.setTimeout(function() {\n                request.expired = true;\n                var errorMessage = 'Request ' + request.id + ' of transport ' + self.getType() + ' exceeded ' + delay + ' ms max network delay';\n                var failure = {\n                    reason: errorMessage\n                };\n                var xhr = request.xhr;\n                failure.httpCode = self.xhrStatus(xhr);\n                self.abortXHR(xhr);\n                self._debug(errorMessage);\n                self.complete(request, false, request.metaConnect);\n                envelope.onFailure(xhr, envelope.messages, failure);\n            }, delay);\n        }\n    }\n\n    function _queueSend(envelope) {\n        var requestId = ++_requestIds;\n        var request = {\n            id: requestId,\n            metaConnect: false,\n            envelope: envelope\n        };\n\n        // Consider the metaConnect requests which should always be present\n        if (_requests.length < this.getConfiguration().maxConnections - 1) {\n            _requests.push(request);\n            _transportSend.call(this, envelope, request);\n        } else {\n            this._debug('Transport', this.getType(), 'queueing request', requestId, 'envelope', envelope);\n            _envelopes.push([envelope, request]);\n        }\n    }\n\n    function _metaConnectComplete(request) {\n        var requestId = request.id;\n        this._debug('Transport', this.getType(), 'metaConnect complete, request', requestId);\n        if (_metaConnectRequest !== null && _metaConnectRequest.id !== requestId) {\n            throw 'Longpoll request mismatch, completing request ' + requestId;\n        }\n\n        // Reset metaConnect request\n        _metaConnectRequest = null;\n    }\n\n    function _complete(request, success) {\n        var index = Utils.inArray(request, _requests);\n        // The index can be negative if the request has been aborted\n        if (index >= 0) {\n            _requests.splice(index, 1);\n        }\n\n        if (_envelopes.length > 0) {\n            var envelopeAndRequest = _envelopes.shift();\n            var nextEnvelope = envelopeAndRequest[0];\n            var nextRequest = envelopeAndRequest[1];\n            this._debug('Transport dequeued request', nextRequest.id);\n            if (success) {\n                if (this.getConfiguration().autoBatch) {\n                    _coalesceEnvelopes.call(this, nextEnvelope);\n                }\n                _queueSend.call(this, nextEnvelope);\n                this._debug('Transport completed request', request.id, nextEnvelope);\n            } else {\n                // Keep the semantic of calling response callbacks asynchronously after the request\n                var self = this;\n                self.setTimeout(function() {\n                    self.complete(nextRequest, false, nextRequest.metaConnect);\n                    var failure = {\n                        reason: 'Previous request failed'\n                    };\n                    var xhr = nextRequest.xhr;\n                    failure.httpCode = self.xhrStatus(xhr);\n                    nextEnvelope.onFailure(xhr, nextEnvelope.messages, failure);\n                }, 0);\n            }\n        }\n    }\n\n    _self.complete = function(request, success, metaConnect) {\n        if (metaConnect) {\n            _metaConnectComplete.call(this, request);\n        } else {\n            _complete.call(this, request, success);\n        }\n    };\n\n    /**\n     * Performs the actual send depending on the transport type details.\n     * @param envelope the envelope to send\n     * @param request the request information\n     */\n    _self.transportSend = function(envelope, request) {\n        throw 'Abstract';\n    };\n\n    _self.transportSuccess = function(envelope, request, responses) {\n        if (!request.expired) {\n            this.clearTimeout(request.timeout);\n            this.complete(request, true, request.metaConnect);\n            if (responses && responses.length > 0) {\n                envelope.onSuccess(responses);\n            } else {\n                envelope.onFailure(request.xhr, envelope.messages, {\n                    httpCode: 204\n                });\n            }\n        }\n    };\n\n    _self.transportFailure = function(envelope, request, failure) {\n        if (!request.expired) {\n            this.clearTimeout(request.timeout);\n            this.complete(request, false, request.metaConnect);\n            envelope.onFailure(request.xhr, envelope.messages, failure);\n        }\n    };\n\n    function _metaConnectSend(envelope) {\n        if (_metaConnectRequest !== null) {\n            throw 'Concurrent metaConnect requests not allowed, request id=' + _metaConnectRequest.id + ' not yet completed';\n        }\n\n        var requestId = ++_requestIds;\n        this._debug('Transport', this.getType(), 'metaConnect send, request', requestId, 'envelope', envelope);\n        var request = {\n            id: requestId,\n            metaConnect: true,\n            envelope: envelope\n        };\n        _transportSend.call(this, envelope, request);\n        _metaConnectRequest = request;\n    }\n\n    _self.send = function(envelope, metaConnect) {\n        if (metaConnect) {\n            _metaConnectSend.call(this, envelope);\n        } else {\n            _queueSend.call(this, envelope);\n        }\n    };\n\n    _self.abort = function() {\n        _super.abort();\n        for (var i = 0; i < _requests.length; ++i) {\n            var request = _requests[i];\n            if (request) {\n                this._debug('Aborting request', request);\n                if (!this.abortXHR(request.xhr)) {\n                    this.transportFailure(request.envelope, request, {reason: 'abort'});\n                }\n            }\n        }\n        if (_metaConnectRequest) {\n            this._debug('Aborting metaConnect request', _metaConnectRequest);\n            if (!this.abortXHR(_metaConnectRequest.xhr)) {\n                this.transportFailure(_metaConnectRequest.envelope, _metaConnectRequest, {reason: 'abort'});\n            }\n        }\n        this.reset(true);\n    };\n\n    _self.reset = function(init) {\n        _super.reset(init);\n        _metaConnectRequest = null;\n        _requests = [];\n        _envelopes = [];\n    };\n\n    _self.abortXHR = function(xhr) {\n        if (xhr) {\n            try {\n                var state = xhr.readyState;\n                xhr.abort();\n                return state !== XMLHttpRequest.UNSENT;\n            } catch (x) {\n                this._debug(x);\n            }\n        }\n        return false;\n    };\n\n    _self.xhrStatus = function(xhr) {\n        if (xhr) {\n            try {\n                return xhr.status;\n            } catch (x) {\n                this._debug(x);\n            }\n        }\n        return -1;\n    };\n\n    return _self;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/zetapush-cometd/lib/RequestTransport.js\n ** module id = 13\n ** module chunks = 0\n **/","var TransportRegistry = require('./TransportRegistry')\nvar Utils = require('./Utils')\n/**\n * The constructor for a CometD object, identified by an optional name.\n * The default name is the string 'default'.\n * In the rare case a page needs more than one Bayeux conversation,\n * a new instance can be created via:\n * <pre>\n * var bayeuxUrl2 = ...;\n *\n * // Dojo style\n * var cometd2 = new dojox.CometD('another_optional_name');\n *\n * // jQuery style\n * var cometd2 = new $.CometD('another_optional_name');\n *\n * cometd2.init({url: bayeuxUrl2});\n * </pre>\n * @param name the optional name of this cometd object\n */\nmodule.exports = function CometD(name) {\n    var _cometd = this;\n    var _name = name || 'default';\n    var _crossDomain = false;\n    var _transports = new TransportRegistry();\n    var _transport;\n    var _status = 'disconnected';\n    var _messageId = 0;\n    var _clientId = null;\n    var _batch = 0;\n    var _messageQueue = [];\n    var _internalBatch = false;\n    var _listeners = {};\n    var _backoff = 0;\n    var _scheduledSend = null;\n    var _extensions = [];\n    var _advice = {};\n    var _handshakeProps;\n    var _handshakeCallback;\n    var _callbacks = {};\n    var _remoteCalls = {};\n    var _reestablish = false;\n    var _connected = false;\n    var _unconnectTime = 0;\n    var _handshakeMessages = 0;\n    var _config = {\n        protocol: null,\n        stickyReconnect: true,\n        connectTimeout: 0,\n        maxConnections: 2,\n        backoffIncrement: 1000,\n        maxBackoff: 60000,\n        logLevel: 'info',\n        reverseIncomingExtensions: true,\n        maxNetworkDelay: 10000,\n        requestHeaders: {},\n        appendMessageTypeToURL: true,\n        autoBatch: false,\n        urls: {},\n        maxURILength: 2000,\n        advice: {\n            timeout: 60000,\n            interval: 0,\n            reconnect: 'retry',\n            maxInterval: 0\n        }\n    };\n\n    function _fieldValue(object, name) {\n        try {\n            return object[name];\n        } catch (x) {\n            return undefined;\n        }\n    }\n\n    /**\n     * Mixes in the given objects into the target object by copying the properties.\n     * @param deep if the copy must be deep\n     * @param target the target object\n     * @param objects the objects whose properties are copied into the target\n     */\n    this._mixin = function(deep, target, objects) {\n        var result = target || {};\n\n        // Skip first 2 parameters (deep and target), and loop over the others\n        for (var i = 2; i < arguments.length; ++i) {\n            var object = arguments[i];\n\n            if (object === undefined || object === null) {\n                continue;\n            }\n\n            for (var propName in object) {\n                if (object.hasOwnProperty(propName)) {\n                    var prop = _fieldValue(object, propName);\n                    var targ = _fieldValue(result, propName);\n\n                    // Avoid infinite loops\n                    if (prop === target) {\n                        continue;\n                    }\n                    // Do not mixin undefined values\n                    if (prop === undefined) {\n                        continue;\n                    }\n\n                    if (deep && typeof prop === 'object' && prop !== null) {\n                        if (prop instanceof Array) {\n                            result[propName] = this._mixin(deep, targ instanceof Array ? targ : [], prop);\n                        } else {\n                            var source = typeof targ === 'object' && !(targ instanceof Array) ? targ : {};\n                            result[propName] = this._mixin(deep, source, prop);\n                        }\n                    } else {\n                        result[propName] = prop;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    function _isString(value) {\n        return Utils.isString(value);\n    }\n\n    function _isFunction(value) {\n        if (value === undefined || value === null) {\n            return false;\n        }\n        return typeof value === 'function';\n    }\n\n    function _zeroPad(value, length) {\n        var result = '';\n        while (--length > 0) {\n            if (value >= Math.pow(10, length)) {\n                break;\n            }\n            result += '0';\n        }\n        result += value;\n        return result;\n    }\n\n    function _log(level, args) {\n        if ('undefined' !== typeof console) {\n            var logger = console[level];\n            if (_isFunction(logger)) {\n                var now = new Date();\n                [].splice.call(args, 0, 0, _zeroPad(now.getHours(), 2) + ':' + _zeroPad(now.getMinutes(), 2) + ':' +\n                        _zeroPad(now.getSeconds(), 2) + '.' + _zeroPad(now.getMilliseconds(), 3));\n                logger.apply(console, args);\n            }\n        }\n    }\n\n    this._warn = function() {\n        _log('warn', arguments);\n    };\n\n    this._info = function() {\n        if (_config.logLevel !== 'warn') {\n            _log('info', arguments);\n        }\n    };\n\n    this._debug = function() {\n        if (_config.logLevel === 'debug') {\n            _log('debug', arguments);\n        }\n    };\n\n    function _splitURL(url) {\n        // [1] = protocol://,\n        // [2] = host:port,\n        // [3] = host,\n        // [4] = IPv6_host,\n        // [5] = IPv4_host,\n        // [6] = :port,\n        // [7] = port,\n        // [8] = uri,\n        // [9] = rest (query / fragment)\n        return /(^https?:\\/\\/)?(((\\[[^\\]]+\\])|([^:\\/\\?#]+))(:(\\d+))?)?([^\\?#]*)(.*)?/.exec(url);\n    }\n\n    /**\n     * Returns whether the given hostAndPort is cross domain.\n     * The default implementation checks against window.location.host\n     * but this function can be overridden to make it work in non-browser\n     * environments.\n     *\n     * @param hostAndPort the host and port in format host:port\n     * @return whether the given hostAndPort is cross domain\n     */\n    this._isCrossDomain = function(hostAndPort) {\n        return hostAndPort && hostAndPort !== window.location.host;\n    };\n\n    function _configure(configuration) {\n        _cometd._debug('Configuring cometd object with', configuration);\n        // Support old style param, where only the Bayeux server URL was passed\n        if (_isString(configuration)) {\n            configuration = { url: configuration };\n        }\n        if (!configuration) {\n            configuration = {};\n        }\n\n        _config = _cometd._mixin(false, _config, configuration);\n\n        var url = _cometd.getURL();\n        if (!url) {\n            throw 'Missing required configuration parameter \\'url\\' specifying the Bayeux server URL';\n        }\n\n        // Check if we're cross domain.\n        var urlParts = _splitURL(url);\n        var hostAndPort = urlParts[2];\n        var uri = urlParts[8];\n        var afterURI = urlParts[9];\n        _crossDomain = _cometd._isCrossDomain(hostAndPort);\n\n        // Check if appending extra path is supported\n        if (_config.appendMessageTypeToURL) {\n            if (afterURI !== undefined && afterURI.length > 0) {\n                _cometd._info('Appending message type to URI ' + uri + afterURI + ' is not supported, disabling \\'appendMessageTypeToURL\\' configuration');\n                _config.appendMessageTypeToURL = false;\n            } else {\n                var uriSegments = uri.split('/');\n                var lastSegmentIndex = uriSegments.length - 1;\n                if (uri.match(/\\/$/)) {\n                    lastSegmentIndex -= 1;\n                }\n                if (uriSegments[lastSegmentIndex].indexOf('.') >= 0) {\n                    // Very likely the CometD servlet's URL pattern is mapped to an extension, such as *.cometd\n                    // It will be difficult to add the extra path in this case\n                    _cometd._info('Appending message type to URI ' + uri + ' is not supported, disabling \\'appendMessageTypeToURL\\' configuration');\n                    _config.appendMessageTypeToURL = false;\n                }\n            }\n        }\n    }\n\n    function _removeListener(subscription) {\n        if (subscription) {\n            var subscriptions = _listeners[subscription.channel];\n            if (subscriptions && subscriptions[subscription.id]) {\n                delete subscriptions[subscription.id];\n                _cometd._debug('Removed', subscription.listener ? 'listener' : 'subscription', subscription);\n            }\n        }\n    }\n\n    function _removeSubscription(subscription) {\n        if (subscription && !subscription.listener) {\n            _removeListener(subscription);\n        }\n    }\n\n    function _clearSubscriptions() {\n        for (var channel in _listeners) {\n            if (_listeners.hasOwnProperty(channel)) {\n                var subscriptions = _listeners[channel];\n                if (subscriptions) {\n                    for (var i = 0; i < subscriptions.length; ++i) {\n                        _removeSubscription(subscriptions[i]);\n                    }\n                }\n            }\n        }\n    }\n\n    function _setStatus(newStatus) {\n        if (_status !== newStatus) {\n            _cometd._debug('Status', _status, '->', newStatus);\n            _status = newStatus;\n        }\n    }\n\n    function _isDisconnected() {\n        return _status === 'disconnecting' || _status === 'disconnected';\n    }\n\n    function _nextMessageId() {\n        var result = ++_messageId;\n        return '' + result;\n    }\n\n    function _applyExtension(scope, callback, name, message, outgoing) {\n        try {\n            return callback.call(scope, message);\n        } catch (x) {\n            var handler = _cometd.onExtensionException;\n            if (_isFunction(handler)) {\n                _cometd._debug('Invoking extension exception handler', name, x);\n                try {\n                    handler.call(_cometd, x, name, outgoing, message);\n                } catch (xx) {\n                    _cometd._info('Exception during execution of extension exception handler', name, xx);\n                }\n            } else {\n                _cometd._info('Exception during execution of extension', name, x);\n            }\n            return message;\n        }\n    }\n\n    function _applyIncomingExtensions(message) {\n        for (var i = 0; i < _extensions.length; ++i) {\n            if (message === undefined || message === null) {\n                break;\n            }\n\n            var index = _config.reverseIncomingExtensions ? _extensions.length - 1 - i : i;\n            var extension = _extensions[index];\n            var callback = extension.extension.incoming;\n            if (_isFunction(callback)) {\n                var result = _applyExtension(extension.extension, callback, extension.name, message, false);\n                message = result === undefined ? message : result;\n            }\n        }\n        return message;\n    }\n\n    function _applyOutgoingExtensions(message) {\n        for (var i = 0; i < _extensions.length; ++i) {\n            if (message === undefined || message === null) {\n                break;\n            }\n\n            var extension = _extensions[i];\n            var callback = extension.extension.outgoing;\n            if (_isFunction(callback)) {\n                var result = _applyExtension(extension.extension, callback, extension.name, message, true);\n                message = result === undefined ? message : result;\n            }\n        }\n        return message;\n    }\n\n    function _notify(channel, message) {\n        var subscriptions = _listeners[channel];\n        if (subscriptions && subscriptions.length > 0) {\n            for (var i = 0; i < subscriptions.length; ++i) {\n                var subscription = subscriptions[i];\n                // Subscriptions may come and go, so the array may have 'holes'\n                if (subscription) {\n                    try {\n                        subscription.callback.call(subscription.scope, message);\n                    } catch (x) {\n                        var handler = _cometd.onListenerException;\n                        if (_isFunction(handler)) {\n                            _cometd._debug('Invoking listener exception handler', subscription, x);\n                            try {\n                                handler.call(_cometd, x, subscription, subscription.listener, message);\n                            } catch (xx) {\n                                _cometd._info('Exception during execution of listener exception handler', subscription, xx);\n                            }\n                        } else {\n                            _cometd._info('Exception during execution of listener', subscription, message, x);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    function _notifyListeners(channel, message) {\n        // Notify direct listeners\n        _notify(channel, message);\n\n        // Notify the globbing listeners\n        var channelParts = channel.split('/');\n        var last = channelParts.length - 1;\n        for (var i = last; i > 0; --i) {\n            var channelPart = channelParts.slice(0, i).join('/') + '/*';\n            // We don't want to notify /foo/* if the channel is /foo/bar/baz,\n            // so we stop at the first non recursive globbing\n            if (i === last) {\n                _notify(channelPart, message);\n            }\n            // Add the recursive globber and notify\n            channelPart += '*';\n            _notify(channelPart, message);\n        }\n    }\n\n    function _cancelDelayedSend() {\n        if (_scheduledSend !== null) {\n            Utils.clearTimeout(_scheduledSend);\n        }\n        _scheduledSend = null;\n    }\n\n    function _delayedSend(operation, delay) {\n        _cancelDelayedSend();\n        var time = _advice.interval + delay;\n        _cometd._debug('Function scheduled in', time, 'ms, interval =', _advice.interval, 'backoff =', _backoff, operation);\n        _scheduledSend = Utils.setTimeout(_cometd, operation, time);\n    }\n\n    // Needed to break cyclic dependencies between function definitions\n    var _handleMessages;\n    var _handleFailure;\n\n    /**\n     * Delivers the messages to the CometD server\n     * @param sync whether the send is synchronous\n     * @param messages the array of messages to send\n     * @param metaConnect true if this send is on /meta/connect\n     * @param extraPath an extra path to append to the Bayeux server URL\n     */\n    function _send(sync, messages, metaConnect, extraPath) {\n        // We must be sure that the messages have a clientId.\n        // This is not guaranteed since the handshake may take time to return\n        // (and hence the clientId is not known yet) and the application\n        // may create other messages.\n        for (var i = 0; i < messages.length; ++i) {\n            var message = messages[i];\n            var messageId = message.id;\n\n            if (_clientId) {\n                message.clientId = _clientId;\n            }\n\n            message = _applyOutgoingExtensions(message);\n            if (message !== undefined && message !== null) {\n                // Extensions may have modified the message id, but we need to own it.\n                message.id = messageId;\n                messages[i] = message;\n            } else {\n                delete _callbacks[messageId];\n                messages.splice(i--, 1);\n            }\n        }\n\n        if (messages.length === 0) {\n            return;\n        }\n\n        var url = _cometd.getURL();\n        if (_config.appendMessageTypeToURL) {\n            // If url does not end with '/', then append it\n            if (!url.match(/\\/$/)) {\n                url = url + '/';\n            }\n            if (extraPath) {\n                url = url + extraPath;\n            }\n        }\n\n        var envelope = {\n            url: url,\n            sync: sync,\n            messages: messages,\n            onSuccess: function(rcvdMessages) {\n                try {\n                    _handleMessages.call(_cometd, rcvdMessages);\n                } catch (x) {\n                    _cometd._info('Exception during handling of messages', x);\n                }\n            },\n            onFailure: function(conduit, messages, failure) {\n                try {\n                    var transport = _cometd.getTransport();\n                    failure.connectionType = transport ? transport.getType() : \"unknown\";\n                    _handleFailure.call(_cometd, conduit, messages, failure);\n                } catch (x) {\n                    _cometd._info('Exception during handling of failure', x);\n                }\n            }\n        };\n        _cometd._debug('Send', envelope);\n        _transport.send(envelope, metaConnect);\n    }\n\n    function _queueSend(message) {\n        if (_batch > 0 || _internalBatch === true) {\n            _messageQueue.push(message);\n        } else {\n            _send(false, [message], false);\n        }\n    }\n\n    /**\n     * Sends a complete bayeux message.\n     * This method is exposed as a public so that extensions may use it\n     * to send bayeux message directly, for example in case of re-sending\n     * messages that have already been sent but that for some reason must\n     * be resent.\n     */\n    this.send = _queueSend;\n\n    function _resetBackoff() {\n        _backoff = 0;\n    }\n\n    function _increaseBackoff() {\n        if (_backoff < _config.maxBackoff) {\n            _backoff += _config.backoffIncrement;\n        }\n        return _backoff;\n    }\n\n    /**\n     * Starts a the batch of messages to be sent in a single request.\n     * @see #_endBatch(sendMessages)\n     */\n    function _startBatch() {\n        ++_batch;\n        _cometd._debug('Starting batch, depth', _batch);\n    }\n\n    function _flushBatch() {\n        var messages = _messageQueue;\n        _messageQueue = [];\n        if (messages.length > 0) {\n            _send(false, messages, false);\n        }\n    }\n\n    /**\n     * Ends the batch of messages to be sent in a single request,\n     * optionally sending messages present in the message queue depending\n     * on the given argument.\n     * @see #_startBatch()\n     */\n    function _endBatch() {\n        --_batch;\n        _cometd._debug('Ending batch, depth', _batch);\n        if (_batch < 0) {\n            throw 'Calls to startBatch() and endBatch() are not paired';\n        }\n\n        if (_batch === 0 && !_isDisconnected() && !_internalBatch) {\n            _flushBatch();\n        }\n    }\n\n    /**\n     * Sends the connect message\n     */\n    function _connect() {\n        if (!_isDisconnected()) {\n            var bayeuxMessage = {\n                id: _nextMessageId(),\n                channel: '/meta/connect',\n                connectionType: _transport.getType()\n            };\n\n            // In case of reload or temporary loss of connection\n            // we want the next successful connect to return immediately\n            // instead of being held by the server, so that connect listeners\n            // can be notified that the connection has been re-established\n            if (!_connected) {\n                bayeuxMessage.advice = { timeout: 0 };\n            }\n\n            _setStatus('connecting');\n            _cometd._debug('Connect sent', bayeuxMessage);\n            _send(false, [bayeuxMessage], true, 'connect');\n            _setStatus('connected');\n        }\n    }\n\n    function _delayedConnect(delay) {\n        _setStatus('connecting');\n        _delayedSend(function() {\n            _connect();\n        }, delay);\n    }\n\n    function _updateAdvice(newAdvice) {\n        if (newAdvice) {\n            _advice = _cometd._mixin(false, {}, _config.advice, newAdvice);\n            _cometd._debug('New advice', _advice);\n        }\n    }\n\n    function _disconnect(abort) {\n        _cancelDelayedSend();\n        if (abort && _transport) {\n            _transport.abort();\n        }\n        _clientId = null;\n        _setStatus('disconnected');\n        _batch = 0;\n        _resetBackoff();\n        _transport = null;\n\n        // Fail any existing queued message\n        if (_messageQueue.length > 0) {\n            var messages = _messageQueue;\n            _messageQueue = [];\n            _handleFailure.call(_cometd, undefined, messages, {\n                reason: 'Disconnected'\n            });\n        }\n    }\n\n    function _notifyTransportFailure(oldTransport, newTransport, failure) {\n        var handler = _cometd.onTransportException;\n        if (_isFunction(handler)) {\n            _cometd._debug('Invoking transport exception handler', oldTransport, newTransport, failure);\n            try {\n                handler.call(_cometd, failure, oldTransport, newTransport);\n            } catch (x) {\n                _cometd._info('Exception during execution of transport exception handler', x);\n            }\n        }\n    }\n\n    /**\n     * Sends the initial handshake message\n     */\n    function _handshake(handshakeProps, handshakeCallback) {\n        if (_isFunction(handshakeProps)) {\n            handshakeCallback = handshakeProps;\n            handshakeProps = undefined;\n        }\n\n        _clientId = null;\n\n        _clearSubscriptions();\n\n        // Reset the transports if we're not retrying the handshake\n        if (_isDisconnected()) {\n            _transports.reset(true);\n            _updateAdvice(_config.advice);\n        } else {\n            // We are retrying the handshake, either because another handshake failed\n            // and we're backing off, or because the server timed us out and asks us to\n            // re-handshake: in both cases, make sure that if the handshake succeeds\n            // the next action is a connect.\n            _updateAdvice(_cometd._mixin(false, _advice, {reconnect: 'retry'}));\n        }\n\n        _batch = 0;\n\n        // Mark the start of an internal batch.\n        // This is needed because handshake and connect are async.\n        // It may happen that the application calls init() then subscribe()\n        // and the subscribe message is sent before the connect message, if\n        // the subscribe message is not held until the connect message is sent.\n        // So here we start a batch to hold temporarily any message until\n        // the connection is fully established.\n        _internalBatch = true;\n\n        // Save the properties provided by the user, so that\n        // we can reuse them during automatic re-handshake\n        _handshakeProps = handshakeProps;\n        _handshakeCallback = handshakeCallback;\n\n        var version = '1.0';\n\n        // Figure out the transports to send to the server\n        var url = _cometd.getURL();\n        var transportTypes = _transports.findTransportTypes(version, _crossDomain, url);\n\n        var bayeuxMessage = {\n            id: _nextMessageId(),\n            version: version,\n            minimumVersion: version,\n            channel: '/meta/handshake',\n            supportedConnectionTypes: transportTypes,\n            advice: {\n                timeout: _advice.timeout,\n                interval: _advice.interval\n            }\n        };\n        // Do not allow the user to override important fields.\n        var message = _cometd._mixin(false, {}, _handshakeProps, bayeuxMessage);\n\n        // Save the callback.\n        _cometd._putCallback(message.id, handshakeCallback);\n\n        // Pick up the first available transport as initial transport\n        // since we don't know if the server supports it\n        if (!_transport) {\n            _transport = _transports.negotiateTransport(transportTypes, version, _crossDomain, url);\n            if (!_transport) {\n                var failure = 'Could not find initial transport among: ' + _transports.getTransportTypes();\n                _cometd._warn(failure);\n                throw failure;\n            }\n        }\n\n        _cometd._debug('Initial transport is', _transport.getType());\n\n        // We started a batch to hold the application messages,\n        // so here we must bypass it and send immediately.\n        _setStatus('handshaking');\n        _cometd._debug('Handshake sent', message);\n        _send(false, [message], false, 'handshake');\n    }\n\n    function _delayedHandshake(delay) {\n        _setStatus('handshaking');\n\n        // We will call _handshake() which will reset _clientId, but we want to avoid\n        // that between the end of this method and the call to _handshake() someone may\n        // call publish() (or other methods that call _queueSend()).\n        _internalBatch = true;\n\n        _delayedSend(function() {\n            _handshake(_handshakeProps, _handshakeCallback);\n        }, delay);\n    }\n\n    function _notifyCallback(callback, message) {\n        try {\n            callback.call(_cometd, message);\n        } catch (x) {\n            var handler = _cometd.onCallbackException;\n            if (_isFunction(handler)) {\n                _cometd._debug('Invoking callback exception handler', x);\n                try {\n                    handler.call(_cometd, x, message);\n                } catch (xx) {\n                    _cometd._info('Exception during execution of callback exception handler', xx);\n                }\n            } else {\n                _cometd._info('Exception during execution of message callback', x);\n            }\n        }\n    }\n\n    this._getCallback = function(messageId) {\n        return _callbacks[messageId];\n    };\n\n    this._putCallback = function(messageId, callback) {\n        var result = this._getCallback(messageId);\n        if (_isFunction(callback)) {\n            _callbacks[messageId] = callback;\n        }\n        return result;\n    };\n\n    function _handleCallback(message) {\n        var callback = _cometd._getCallback([message.id]);\n        if (_isFunction(callback)) {\n            delete _callbacks[message.id];\n            _notifyCallback(callback, message);\n        }\n    }\n\n    function _handleRemoteCall(message) {\n        var context = _remoteCalls[message.id];\n        delete _remoteCalls[message.id];\n        _cometd._debug('Handling remote call response for', message, 'with context', context);\n        if (context) {\n            // Clear the timeout, if present.\n            var timeout = context.timeout;\n            if (timeout) {\n                Utils.clearTimeout(timeout);\n            }\n\n            var callback = context.callback;\n            if (_isFunction(callback)) {\n                _notifyCallback(callback, message);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function _failHandshake(message) {\n        _handleCallback(message);\n        _notifyListeners('/meta/handshake', message);\n        _notifyListeners('/meta/unsuccessful', message);\n\n        // Only try again if we haven't been disconnected and\n        // the advice permits us to retry the handshake\n        var retry = !_isDisconnected() && _advice.reconnect !== 'none';\n        if (retry) {\n            _increaseBackoff();\n            _delayedHandshake();\n        } else {\n            _disconnect(true);\n        }\n    }\n\n    function _handshakeResponse(message) {\n        if (message.successful) {\n            // Save clientId, figure out transport, then follow the advice to connect\n            _clientId = message.clientId;\n\n            var url = _cometd.getURL();\n            var newTransport = _transports.negotiateTransport(message.supportedConnectionTypes, message.version, _crossDomain, url);\n            if (newTransport === null) {\n                var failure = 'Could not negotiate transport with server; client=[' +\n                    _transports.findTransportTypes(message.version, _crossDomain, url) +\n                    '], server=[' + message.supportedConnectionTypes + ']';\n                var oldTransport = _cometd.getTransport();\n                _notifyTransportFailure(oldTransport.getType(), null, {\n                    reason: failure,\n                    connectionType: oldTransport.getType(),\n                    transport: oldTransport\n                });\n                _cometd._warn(failure);\n                _disconnect(true);\n                return;\n            } else if (_transport !== newTransport) {\n                _cometd._debug('Transport', _transport.getType(), '->', newTransport.getType());\n                _transport = newTransport;\n            }\n\n            // End the internal batch and allow held messages from the application\n            // to go to the server (see _handshake() where we start the internal batch).\n            _internalBatch = false;\n            _flushBatch();\n\n            // Here the new transport is in place, as well as the clientId, so\n            // the listeners can perform a publish() if they want.\n            // Notify the listeners before the connect below.\n            message.reestablish = _reestablish;\n            _reestablish = true;\n\n            _handleCallback(message);\n            _notifyListeners('/meta/handshake', message);\n\n            var action = _isDisconnected() ? 'none' : _advice.reconnect;\n            switch (action) {\n                case 'retry':\n                    _resetBackoff();\n                    _delayedConnect();\n                    break;\n                case 'none':\n                    _disconnect(true);\n                    break;\n                default:\n                    throw 'Unrecognized advice action ' + action;\n            }\n        } else {\n            _failHandshake(message);\n        }\n    }\n\n    function _handshakeFailure(message) {\n        var version = '1.0';\n        var url = _cometd.getURL();\n        var oldTransport = _cometd.getTransport();\n        var transportTypes = _transports.findTransportTypes(version, _crossDomain, url);\n        var newTransport = _transports.negotiateTransport(transportTypes, version, _crossDomain, url);\n        if (!newTransport) {\n            _notifyTransportFailure(oldTransport.getType(), null, message.failure);\n            _cometd._warn('Could not negotiate transport; client=[' + transportTypes + ']');\n            _disconnect(true);\n            _failHandshake(message);\n        } else {\n            _cometd._debug('Transport', oldTransport.getType(), '->', newTransport.getType());\n            _notifyTransportFailure(oldTransport.getType(), newTransport.getType(), message.failure);\n            _failHandshake(message);\n            _transport = newTransport;\n        }\n    }\n\n    function _failConnect(message) {\n        // Notify the listeners after the status change but before the next action\n        _notifyListeners('/meta/connect', message);\n        _notifyListeners('/meta/unsuccessful', message);\n\n        // This may happen when the server crashed, the current clientId\n        // will be invalid, and the server will ask to handshake again\n        // Listeners can call disconnect(), so check the state after they run\n        var action = _isDisconnected() ? 'none' : _advice.reconnect;\n        switch (action) {\n            case 'retry':\n                _delayedConnect();\n                _increaseBackoff();\n                break;\n            case 'handshake':\n                // The current transport may be failed (e.g. network disconnection)\n                // Reset the transports so the new handshake picks up the right one\n                _transports.reset(true);\n                _resetBackoff();\n                _delayedHandshake();\n                break;\n            case 'none':\n                _disconnect(true);\n                break;\n            default:\n                throw 'Unrecognized advice action' + action;\n        }\n    }\n\n    function _connectResponse(message) {\n        _connected = message.successful;\n\n        if (_connected) {\n            _notifyListeners('/meta/connect', message);\n\n            // Normally, the advice will say \"reconnect: 'retry', interval: 0\"\n            // and the server will hold the request, so when a response returns\n            // we immediately call the server again (long polling)\n            // Listeners can call disconnect(), so check the state after they run\n            var action = _isDisconnected() ? 'none' : _advice.reconnect;\n            switch (action) {\n                case 'retry':\n                    _resetBackoff();\n                    _delayedConnect();\n                    break;\n                case 'none':\n                    // Wait for the /meta/disconnect to arrive.\n                    _disconnect(false);\n                    break;\n                default:\n                    throw 'Unrecognized advice action ' + action;\n            }\n        } else {\n            _failConnect(message);\n        }\n    }\n\n    function _connectFailure(message) {\n        _connected = false;\n        _failConnect(message);\n    }\n\n    function _failDisconnect(message) {\n        _disconnect(true);\n        _handleCallback(message);\n        _notifyListeners('/meta/disconnect', message);\n        _notifyListeners('/meta/unsuccessful', message);\n    }\n\n    function _disconnectResponse(message) {\n        if (message.successful) {\n            // Wait for the /meta/connect to arrive.\n            _disconnect(false);\n            _handleCallback(message);\n            _notifyListeners('/meta/disconnect', message);\n        } else {\n            _failDisconnect(message);\n        }\n    }\n\n    function _disconnectFailure(message) {\n        _failDisconnect(message);\n    }\n\n    function _failSubscribe(message) {\n        var subscriptions = _listeners[message.subscription];\n        if (subscriptions) {\n            for (var i = subscriptions.length - 1; i >= 0; --i) {\n                var subscription = subscriptions[i];\n                if (subscription && !subscription.listener) {\n                    delete subscriptions[i];\n                    _cometd._debug('Removed failed subscription', subscription);\n                    break;\n                }\n            }\n        }\n        _handleCallback(message);\n        _notifyListeners('/meta/subscribe', message);\n        _notifyListeners('/meta/unsuccessful', message);\n    }\n\n    function _subscribeResponse(message) {\n        if (message.successful) {\n            _handleCallback(message);\n            _notifyListeners('/meta/subscribe', message);\n        } else {\n            _failSubscribe(message);\n        }\n    }\n\n    function _subscribeFailure(message) {\n        _failSubscribe(message);\n    }\n\n    function _failUnsubscribe(message) {\n        _handleCallback(message);\n        _notifyListeners('/meta/unsubscribe', message);\n        _notifyListeners('/meta/unsuccessful', message);\n    }\n\n    function _unsubscribeResponse(message) {\n        if (message.successful) {\n            _handleCallback(message);\n            _notifyListeners('/meta/unsubscribe', message);\n        } else {\n            _failUnsubscribe(message);\n        }\n    }\n\n    function _unsubscribeFailure(message) {\n        _failUnsubscribe(message);\n    }\n\n    function _failMessage(message) {\n        if (!_handleRemoteCall(message)) {\n            _handleCallback(message);\n            _notifyListeners('/meta/publish', message);\n            _notifyListeners('/meta/unsuccessful', message);\n        }\n    }\n\n    function _messageResponse(message) {\n        if (message.data !== undefined) {\n            if (!_handleRemoteCall(message)) {\n                _notifyListeners(message.channel, message);\n                if (_handshakeMessages > 0) {\n                    --_handshakeMessages;\n                    if (_handshakeMessages === 0) {\n                        _cometd._debug('Processed last handshake-delivered message');\n                        _delayedConnect(0);\n                    }\n                }\n            }\n        } else {\n            if (message.successful === undefined) {\n                _cometd._warn('Unknown Bayeux Message', message);\n            } else {\n                if (message.successful) {\n                    _handleCallback(message);\n                    _notifyListeners('/meta/publish', message);\n                } else {\n                    _failMessage(message);\n                }\n            }\n        }\n    }\n\n    function _messageFailure(failure) {\n        _failMessage(failure);\n    }\n\n    function _receive(message) {\n        _unconnectTime = 0;\n\n        message = _applyIncomingExtensions(message);\n        if (message === undefined || message === null) {\n            return;\n        }\n\n        _updateAdvice(message.advice);\n\n        var channel = message.channel;\n        switch (channel) {\n            case '/meta/handshake':\n                _handshakeResponse(message);\n                break;\n            case '/meta/connect':\n                _connectResponse(message);\n                break;\n            case '/meta/disconnect':\n                _disconnectResponse(message);\n                break;\n            case '/meta/subscribe':\n                _subscribeResponse(message);\n                break;\n            case '/meta/unsubscribe':\n                _unsubscribeResponse(message);\n                break;\n            default:\n                _messageResponse(message);\n                break;\n        }\n    }\n\n    /**\n     * Receives a message.\n     * This method is exposed as a public so that extensions may inject\n     * messages simulating that they had been received.\n     */\n    this.receive = _receive;\n\n    _handleMessages = function(rcvdMessages) {\n        _cometd._debug('Received', rcvdMessages);\n\n        for (var i = 0; i < rcvdMessages.length; ++i) {\n            var message = rcvdMessages[i];\n            _receive(message);\n        }\n    };\n\n    _handleFailure = function(conduit, messages, failure) {\n        _cometd._debug('handleFailure', conduit, messages, failure);\n\n        failure.transport = conduit;\n        for (var i = 0; i < messages.length; ++i) {\n            var message = messages[i];\n            var failureMessage = {\n                id: message.id,\n                successful: false,\n                channel: message.channel,\n                failure: failure\n            };\n            failure.message = message;\n            switch (message.channel) {\n                case '/meta/handshake':\n                    _handshakeFailure(failureMessage);\n                    break;\n                case '/meta/connect':\n                    _connectFailure(failureMessage);\n                    break;\n                case '/meta/disconnect':\n                    _disconnectFailure(failureMessage);\n                    break;\n                case '/meta/subscribe':\n                    failureMessage.subscription = message.subscription;\n                    _subscribeFailure(failureMessage);\n                    break;\n                case '/meta/unsubscribe':\n                    failureMessage.subscription = message.subscription;\n                    _unsubscribeFailure(failureMessage);\n                    break;\n                default:\n                    _messageFailure(failureMessage);\n                    break;\n            }\n        }\n    };\n\n    function _hasSubscriptions(channel) {\n        var subscriptions = _listeners[channel];\n        if (subscriptions) {\n            for (var i = 0; i < subscriptions.length; ++i) {\n                if (subscriptions[i]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    function _resolveScopedCallback(scope, callback) {\n        var delegate = {\n            scope: scope,\n            method: callback\n        };\n        if (_isFunction(scope)) {\n            delegate.scope = undefined;\n            delegate.method = scope;\n        } else {\n            if (_isString(callback)) {\n                if (!scope) {\n                    throw 'Invalid scope ' + scope;\n                }\n                delegate.method = scope[callback];\n                if (!_isFunction(delegate.method)) {\n                    throw 'Invalid callback ' + callback + ' for scope ' + scope;\n                }\n            } else if (!_isFunction(callback)) {\n                throw 'Invalid callback ' + callback;\n            }\n        }\n        return delegate;\n    }\n\n    function _addListener(channel, scope, callback, isListener) {\n        // The data structure is a map<channel, subscription[]>, where each subscription\n        // holds the callback to be called and its scope.\n\n        var delegate = _resolveScopedCallback(scope, callback);\n        _cometd._debug('Adding', isListener ? 'listener' : 'subscription', 'on', channel, 'with scope', delegate.scope, 'and callback', delegate.method);\n\n        var subscription = {\n            channel: channel,\n            scope: delegate.scope,\n            callback: delegate.method,\n            listener: isListener\n        };\n\n        var subscriptions = _listeners[channel];\n        if (!subscriptions) {\n            subscriptions = [];\n            _listeners[channel] = subscriptions;\n        }\n\n        // Pushing onto an array appends at the end and returns the id associated with the element increased by 1.\n        // Note that if:\n        // a.push('a'); var hb=a.push('b'); delete a[hb-1]; var hc=a.push('c');\n        // then:\n        // hc==3, a.join()=='a',,'c', a.length==3\n        subscription.id = subscriptions.push(subscription) - 1;\n\n        _cometd._debug('Added', isListener ? 'listener' : 'subscription', subscription);\n\n        // For backward compatibility: we used to return [channel, subscription.id]\n        subscription[0] = channel;\n        subscription[1] = subscription.id;\n\n        return subscription;\n    }\n\n    //\n    // PUBLIC API\n    //\n\n    /**\n     * Registers the given transport under the given transport type.\n     * The optional index parameter specifies the \"priority\" at which the\n     * transport is registered (where 0 is the max priority).\n     * If a transport with the same type is already registered, this function\n     * does nothing and returns false.\n     * @param type the transport type\n     * @param transport the transport object\n     * @param index the index at which this transport is to be registered\n     * @return true if the transport has been registered, false otherwise\n     * @see #unregisterTransport(type)\n     */\n    this.registerTransport = function(type, transport, index) {\n        var result = _transports.add(type, transport, index);\n        if (result) {\n            this._debug('Registered transport', type);\n\n            if (_isFunction(transport.registered)) {\n                transport.registered(type, this);\n            }\n        }\n        return result;\n    };\n\n    /**\n     * Unregisters the transport with the given transport type.\n     * @param type the transport type to unregister\n     * @return the transport that has been unregistered,\n     * or null if no transport was previously registered under the given transport type\n     */\n    this.unregisterTransport = function(type) {\n        var transport = _transports.remove(type);\n        if (transport !== null) {\n            this._debug('Unregistered transport', type);\n\n            if (_isFunction(transport.unregistered)) {\n                transport.unregistered();\n            }\n        }\n        return transport;\n    };\n\n    this.unregisterTransports = function() {\n        _transports.clear();\n    };\n\n    /**\n     * @return an array of all registered transport types\n     */\n    this.getTransportTypes = function() {\n        return _transports.getTransportTypes();\n    };\n\n    this.findTransport = function(name) {\n        return _transports.find(name);\n    };\n\n    /**\n     * @returns the TransportRegistry object\n     */\n    this.getTransportRegistry = function() {\n        return _transports;\n    };\n\n    /**\n     * Configures the initial Bayeux communication with the Bayeux server.\n     * Configuration is passed via an object that must contain a mandatory field <code>url</code>\n     * of type string containing the URL of the Bayeux server.\n     * @param configuration the configuration object\n     */\n    this.configure = function(configuration) {\n        _configure.call(this, configuration);\n    };\n\n    /**\n     * Configures and establishes the Bayeux communication with the Bayeux server\n     * via a handshake and a subsequent connect.\n     * @param configuration the configuration object\n     * @param handshakeProps an object to be merged with the handshake message\n     * @see #configure(configuration)\n     * @see #handshake(handshakeProps)\n     */\n    this.init = function(configuration, handshakeProps) {\n        this.configure(configuration);\n        this.handshake(handshakeProps);\n    };\n\n    /**\n     * Establishes the Bayeux communication with the Bayeux server\n     * via a handshake and a subsequent connect.\n     * @param handshakeProps an object to be merged with the handshake message\n     * @param handshakeCallback a function to be invoked when the handshake is acknowledged\n     */\n    this.handshake = function(handshakeProps, handshakeCallback) {\n        _setStatus('disconnected');\n        _reestablish = false;\n        _handshake(handshakeProps, handshakeCallback);\n    };\n\n    /**\n     * Disconnects from the Bayeux server.\n     * It is possible to suggest to attempt a synchronous disconnect, but this feature\n     * may only be available in certain transports (for example, long-polling may support\n     * it, callback-polling certainly does not).\n     * @param sync whether attempt to perform a synchronous disconnect\n     * @param disconnectProps an object to be merged with the disconnect message\n     * @param disconnectCallback a function to be invoked when the disconnect is acknowledged\n     */\n    this.disconnect = function(sync, disconnectProps, disconnectCallback) {\n        if (_isDisconnected()) {\n            return;\n        }\n\n        if (typeof sync !== 'boolean') {\n            disconnectCallback = disconnectProps;\n            disconnectProps = sync;\n            sync = false;\n        }\n        if (_isFunction(disconnectProps)) {\n            disconnectCallback = disconnectProps;\n            disconnectProps = undefined;\n        }\n\n        var bayeuxMessage = {\n            id: _nextMessageId(),\n            channel: '/meta/disconnect'\n        };\n        // Do not allow the user to override important fields.\n        var message = this._mixin(false, {}, disconnectProps, bayeuxMessage);\n\n        // Save the callback.\n        _cometd._putCallback(message.id, disconnectCallback);\n\n        _setStatus('disconnecting');\n        _send(sync === true, [message], false, 'disconnect');\n    };\n\n    /**\n     * Marks the start of a batch of application messages to be sent to the server\n     * in a single request, obtaining a single response containing (possibly) many\n     * application reply messages.\n     * Messages are held in a queue and not sent until {@link #endBatch()} is called.\n     * If startBatch() is called multiple times, then an equal number of endBatch()\n     * calls must be made to close and send the batch of messages.\n     * @see #endBatch()\n     */\n    this.startBatch = function() {\n        _startBatch();\n    };\n\n    /**\n     * Marks the end of a batch of application messages to be sent to the server\n     * in a single request.\n     * @see #startBatch()\n     */\n    this.endBatch = function() {\n        _endBatch();\n    };\n\n    /**\n     * Executes the given callback in the given scope, surrounded by a {@link #startBatch()}\n     * and {@link #endBatch()} calls.\n     * @param scope the scope of the callback, may be omitted\n     * @param callback the callback to be executed within {@link #startBatch()} and {@link #endBatch()} calls\n     */\n    this.batch = function(scope, callback) {\n        var delegate = _resolveScopedCallback(scope, callback);\n        this.startBatch();\n        try {\n            delegate.method.call(delegate.scope);\n            this.endBatch();\n        } catch (x) {\n            this._info('Exception during execution of batch', x);\n            this.endBatch();\n            throw x;\n        }\n    };\n\n    /**\n     * Adds a listener for bayeux messages, performing the given callback in the given scope\n     * when a message for the given channel arrives.\n     * @param channel the channel the listener is interested to\n     * @param scope the scope of the callback, may be omitted\n     * @param callback the callback to call when a message is sent to the channel\n     * @returns the subscription handle to be passed to {@link #removeListener(object)}\n     * @see #removeListener(subscription)\n     */\n    this.addListener = function(channel, scope, callback) {\n        if (arguments.length < 2) {\n            throw 'Illegal arguments number: required 2, got ' + arguments.length;\n        }\n        if (!_isString(channel)) {\n            throw 'Illegal argument type: channel must be a string';\n        }\n\n        return _addListener(channel, scope, callback, true);\n    };\n\n    /**\n     * Removes the subscription obtained with a call to {@link #addListener(string, object, function)}.\n     * @param subscription the subscription to unsubscribe.\n     * @see #addListener(channel, scope, callback)\n     */\n    this.removeListener = function(subscription) {\n        // Beware of subscription.id == 0, which is falsy => cannot use !subscription.id\n        if (!subscription || !subscription.channel || !(\"id\" in subscription)) {\n            throw 'Invalid argument: expected subscription, not ' + subscription;\n        }\n\n        _removeListener(subscription);\n    };\n\n    /**\n     * Removes all listeners registered with {@link #addListener(channel, scope, callback)} or\n     * {@link #subscribe(channel, scope, callback)}.\n     */\n    this.clearListeners = function() {\n        _listeners = {};\n    };\n\n    /**\n     * Subscribes to the given channel, performing the given callback in the given scope\n     * when a message for the channel arrives.\n     * @param channel the channel to subscribe to\n     * @param scope the scope of the callback, may be omitted\n     * @param callback the callback to call when a message is sent to the channel\n     * @param subscribeProps an object to be merged with the subscribe message\n     * @param subscribeCallback a function to be invoked when the subscription is acknowledged\n     * @return the subscription handle to be passed to {@link #unsubscribe(object)}\n     */\n    this.subscribe = function(channel, scope, callback, subscribeProps, subscribeCallback) {\n        if (arguments.length < 2) {\n            throw 'Illegal arguments number: required 2, got ' + arguments.length;\n        }\n        if (!_isString(channel)) {\n            throw 'Illegal argument type: channel must be a string';\n        }\n        if (_isDisconnected()) {\n            throw 'Illegal state: already disconnected';\n        }\n\n        // Normalize arguments\n        if (_isFunction(scope)) {\n            subscribeCallback = subscribeProps;\n            subscribeProps = callback;\n            callback = scope;\n            scope = undefined;\n        }\n        if (_isFunction(subscribeProps)) {\n            subscribeCallback = subscribeProps;\n            subscribeProps = undefined;\n        }\n\n        // Only send the message to the server if this client has not yet subscribed to the channel\n        var send = !_hasSubscriptions(channel);\n\n        var subscription = _addListener(channel, scope, callback, false);\n\n        if (send) {\n            // Send the subscription message after the subscription registration to avoid\n            // races where the server would send a message to the subscribers, but here\n            // on the client the subscription has not been added yet to the data structures\n            var bayeuxMessage = {\n                id: _nextMessageId(),\n                channel: '/meta/subscribe',\n                subscription: channel\n            };\n            // Do not allow the user to override important fields.\n            var message = this._mixin(false, {}, subscribeProps, bayeuxMessage);\n\n            // Save the callback.\n            _cometd._putCallback(message.id, subscribeCallback);\n\n            _queueSend(message);\n        }\n\n        return subscription;\n    };\n\n    /**\n     * Unsubscribes the subscription obtained with a call to {@link #subscribe(string, object, function)}.\n     * @param subscription the subscription to unsubscribe.\n     * @param unsubscribeProps an object to be merged with the unsubscribe message\n     * @param unsubscribeCallback a function to be invoked when the unsubscription is acknowledged\n     */\n    this.unsubscribe = function(subscription, unsubscribeProps, unsubscribeCallback) {\n        if (arguments.length < 1) {\n            throw 'Illegal arguments number: required 1, got ' + arguments.length;\n        }\n        if (_isDisconnected()) {\n            throw 'Illegal state: already disconnected';\n        }\n\n        if (_isFunction(unsubscribeProps)) {\n            unsubscribeCallback = unsubscribeProps;\n            unsubscribeProps = undefined;\n        }\n\n        // Remove the local listener before sending the message\n        // This ensures that if the server fails, this client does not get notifications\n        this.removeListener(subscription);\n\n        var channel = subscription.channel;\n        // Only send the message to the server if this client unsubscribes the last subscription\n        if (!_hasSubscriptions(channel)) {\n            var bayeuxMessage = {\n                id: _nextMessageId(),\n                channel: '/meta/unsubscribe',\n                subscription: channel\n            };\n            // Do not allow the user to override important fields.\n            var message = this._mixin(false, {}, unsubscribeProps, bayeuxMessage);\n\n            // Save the callback.\n            _cometd._putCallback(message.id, unsubscribeCallback);\n\n            _queueSend(message);\n        }\n    };\n\n    this.resubscribe = function(subscription, subscribeProps) {\n        _removeSubscription(subscription);\n        if (subscription) {\n            return this.subscribe(subscription.channel, subscription.scope, subscription.callback, subscribeProps);\n        }\n        return undefined;\n    };\n\n    /**\n     * Removes all subscriptions added via {@link #subscribe(channel, scope, callback, subscribeProps)},\n     * but does not remove the listeners added via {@link addListener(channel, scope, callback)}.\n     */\n    this.clearSubscriptions = function() {\n        _clearSubscriptions();\n    };\n\n    /**\n     * Publishes a message on the given channel, containing the given content.\n     * @param channel the channel to publish the message to\n     * @param content the content of the message\n     * @param publishProps an object to be merged with the publish message\n     * @param publishCallback a function to be invoked when the publish is acknowledged by the server\n     */\n    this.publish = function(channel, content, publishProps, publishCallback) {\n        if (arguments.length < 1) {\n            throw 'Illegal arguments number: required 1, got ' + arguments.length;\n        }\n        if (!_isString(channel)) {\n            throw 'Illegal argument type: channel must be a string';\n        }\n        if (/^\\/meta\\//.test(channel)) {\n            throw 'Illegal argument: cannot publish to meta channels';\n        }\n        if (_isDisconnected()) {\n            throw 'Illegal state: already disconnected';\n        }\n\n        if (_isFunction(content)) {\n            publishCallback = content;\n            content = publishProps = {};\n        } else if (_isFunction(publishProps)) {\n            publishCallback = publishProps;\n            publishProps = {};\n        }\n\n        var bayeuxMessage = {\n            id: _nextMessageId(),\n            channel: channel,\n            data: content\n        };\n        // Do not allow the user to override important fields.\n        var message = this._mixin(false, {}, publishProps, bayeuxMessage);\n\n        // Save the callback.\n        _cometd._putCallback(message.id, publishCallback);\n\n        _queueSend(message);\n    };\n\n    this.remoteCall = function(target, content, timeout, callback) {\n        if (arguments.length < 1) {\n            throw 'Illegal arguments number: required 1, got ' + arguments.length;\n        }\n        if (!_isString(target)) {\n            throw 'Illegal argument type: target must be a string';\n        }\n        if (_isDisconnected()) {\n            throw 'Illegal state: already disconnected';\n        }\n\n        if (_isFunction(content)) {\n            callback = content;\n            content = {};\n            timeout = _config.maxNetworkDelay;\n        } else if (_isFunction(timeout)) {\n            callback = timeout;\n            timeout = _config.maxNetworkDelay;\n        }\n\n        if (typeof timeout !== 'number') {\n            throw 'Illegal argument type: timeout must be a number';\n        }\n\n        if (!target.match(/^\\//)) {\n            target = '/' + target;\n        }\n        var channel = '/service' + target;\n\n        var bayeuxMessage = {\n            id: _nextMessageId(),\n            channel: channel,\n            data: content\n        };\n\n        var context = {\n            callback: callback\n        };\n        if (timeout > 0) {\n            context.timeout = Utils.setTimeout(_cometd, function() {\n                _cometd._debug('Timing out remote call', bayeuxMessage, 'after', timeout, 'ms');\n                _failMessage({\n                    id: bayeuxMessage.id,\n                    error: '406::timeout',\n                    successful: false,\n                    failure: {\n                        message : bayeuxMessage,\n                        reason: 'Remote Call Timeout'\n                    }\n                });\n            }, timeout);\n            _cometd._debug('Scheduled remote call timeout', bayeuxMessage, 'in', timeout, 'ms');\n        }\n        _remoteCalls[bayeuxMessage.id] = context;\n\n        _queueSend(bayeuxMessage);\n    };\n\n    /**\n     * Returns a string representing the status of the bayeux communication with the Bayeux server.\n     */\n    this.getStatus = function() {\n        return _status;\n    };\n\n    /**\n     * Returns whether this instance has been disconnected.\n     */\n    this.isDisconnected = _isDisconnected;\n\n    /**\n     * Sets the backoff period used to increase the backoff time when retrying an unsuccessful or failed message.\n     * Default value is 1 second, which means if there is a persistent failure the retries will happen\n     * after 1 second, then after 2 seconds, then after 3 seconds, etc. So for example with 15 seconds of\n     * elapsed time, there will be 5 retries (at 1, 3, 6, 10 and 15 seconds elapsed).\n     * @param period the backoff period to set\n     * @see #getBackoffIncrement()\n     */\n    this.setBackoffIncrement = function(period) {\n        _config.backoffIncrement = period;\n    };\n\n    /**\n     * Returns the backoff period used to increase the backoff time when retrying an unsuccessful or failed message.\n     * @see #setBackoffIncrement(period)\n     */\n    this.getBackoffIncrement = function() {\n        return _config.backoffIncrement;\n    };\n\n    /**\n     * Returns the backoff period to wait before retrying an unsuccessful or failed message.\n     */\n    this.getBackoffPeriod = function() {\n        return _backoff;\n    };\n\n    /**\n     * Increases the backoff period up to the maximum value configured.\n     * @returns the backoff period after increment\n     * @see getBackoffIncrement\n     */\n    this.increaseBackoffPeriod = function() {\n        return _increaseBackoff();\n    };\n\n    /**\n     * Resets the backoff period to zero.\n     */\n    this.resetBackoffPeriod = function() {\n        _resetBackoff();\n    };\n\n    /**\n     * Sets the log level for console logging.\n     * Valid values are the strings 'error', 'warn', 'info' and 'debug', from\n     * less verbose to more verbose.\n     * @param level the log level string\n     */\n    this.setLogLevel = function(level) {\n        _config.logLevel = level;\n    };\n\n    /**\n     * Registers an extension whose callbacks are called for every incoming message\n     * (that comes from the server to this client implementation) and for every\n     * outgoing message (that originates from this client implementation for the\n     * server).\n     * The format of the extension object is the following:\n     * <pre>\n     * {\n     *     incoming: function(message) { ... },\n     *     outgoing: function(message) { ... }\n     * }\n     * </pre>\n     * Both properties are optional, but if they are present they will be called\n     * respectively for each incoming message and for each outgoing message.\n     * @param name the name of the extension\n     * @param extension the extension to register\n     * @return true if the extension was registered, false otherwise\n     * @see #unregisterExtension(name)\n     */\n    this.registerExtension = function(name, extension) {\n        if (arguments.length < 2) {\n            throw 'Illegal arguments number: required 2, got ' + arguments.length;\n        }\n        if (!_isString(name)) {\n            throw 'Illegal argument type: extension name must be a string';\n        }\n\n        var existing = false;\n        for (var i = 0; i < _extensions.length; ++i) {\n            var existingExtension = _extensions[i];\n            if (existingExtension.name === name) {\n                existing = true;\n                break;\n            }\n        }\n        if (!existing) {\n            _extensions.push({\n                name: name,\n                extension: extension\n            });\n            this._debug('Registered extension', name);\n\n            // Callback for extensions\n            if (_isFunction(extension.registered)) {\n                extension.registered(name, this);\n            }\n\n            return true;\n        } else {\n            this._info('Could not register extension with name', name, 'since another extension with the same name already exists');\n            return false;\n        }\n    };\n\n    /**\n     * Unregister an extension previously registered with\n     * {@link #registerExtension(name, extension)}.\n     * @param name the name of the extension to unregister.\n     * @return true if the extension was unregistered, false otherwise\n     */\n    this.unregisterExtension = function(name) {\n        if (!_isString(name)) {\n            throw 'Illegal argument type: extension name must be a string';\n        }\n\n        var unregistered = false;\n        for (var i = 0; i < _extensions.length; ++i) {\n            var extension = _extensions[i];\n            if (extension.name === name) {\n                _extensions.splice(i, 1);\n                unregistered = true;\n                this._debug('Unregistered extension', name);\n\n                // Callback for extensions\n                var ext = extension.extension;\n                if (_isFunction(ext.unregistered)) {\n                    ext.unregistered();\n                }\n\n                break;\n            }\n        }\n        return unregistered;\n    };\n\n    /**\n     * Find the extension registered with the given name.\n     * @param name the name of the extension to find\n     * @return the extension found or null if no extension with the given name has been registered\n     */\n    this.getExtension = function(name) {\n        for (var i = 0; i < _extensions.length; ++i) {\n            var extension = _extensions[i];\n            if (extension.name === name) {\n                return extension.extension;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Returns the name assigned to this CometD object, or the string 'default'\n     * if no name has been explicitly passed as parameter to the constructor.\n     */\n    this.getName = function() {\n        return _name;\n    };\n\n    /**\n     * Returns the clientId assigned by the Bayeux server during handshake.\n     */\n    this.getClientId = function() {\n        return _clientId;\n    };\n\n    /**\n     * Returns the URL of the Bayeux server.\n     */\n    this.getURL = function() {\n        if (_transport) {\n            var url = _transport.getURL();\n            if (url) {\n                return url;\n            }\n            url = _config.urls[_transport.getType()];\n            if (url) {\n                return url;\n            }\n        }\n        return _config.url;\n    };\n\n    this.getTransport = function() {\n        return _transport;\n    };\n\n    this.getConfiguration = function() {\n        return this._mixin(true, {}, _config);\n    };\n\n    this.getAdvice = function() {\n        return this._mixin(true, {}, _advice);\n    };\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/zetapush-cometd/lib/CometD.js\n ** module id = 14\n ** module chunks = 0\n **/","/**\n * A registry for transports used by the CometD object.\n */\nmodule.exports = function TransportRegistry() {\n    var _types = [];\n    var _transports = {};\n\n    this.getTransportTypes = function() {\n        return _types.slice(0);\n    };\n\n    this.findTransportTypes = function(version, crossDomain, url) {\n        var result = [];\n        for (var i = 0; i < _types.length; ++i) {\n            var type = _types[i];\n            if (_transports[type].accept(version, crossDomain, url) === true) {\n                result.push(type);\n            }\n        }\n        return result;\n    };\n\n    this.negotiateTransport = function(types, version, crossDomain, url) {\n        for (var i = 0; i < _types.length; ++i) {\n            var type = _types[i];\n            for (var j = 0; j < types.length; ++j) {\n                if (type === types[j]) {\n                    var transport = _transports[type];\n                    if (transport.accept(version, crossDomain, url) === true) {\n                        return transport;\n                    }\n                }\n            }\n        }\n        return null;\n    };\n\n    this.add = function(type, transport, index) {\n        var existing = false;\n        for (var i = 0; i < _types.length; ++i) {\n            if (_types[i] === type) {\n                existing = true;\n                break;\n            }\n        }\n\n        if (!existing) {\n            if (typeof index !== 'number') {\n                _types.push(type);\n            } else {\n                _types.splice(index, 0, type);\n            }\n            _transports[type] = transport;\n        }\n\n        return !existing;\n    };\n\n    this.find = function(type) {\n        for (var i = 0; i < _types.length; ++i) {\n            if (_types[i] === type) {\n                return _transports[type];\n            }\n        }\n        return null;\n    };\n\n    this.remove = function(type) {\n        for (var i = 0; i < _types.length; ++i) {\n            if (_types[i] === type) {\n                _types.splice(i, 1);\n                var transport = _transports[type];\n                delete _transports[type];\n                return transport;\n            }\n        }\n        return null;\n    };\n\n    this.clear = function() {\n        _types = [];\n        _transports = {};\n    };\n\n    this.reset = function(init) {\n        for (var i = 0; i < _types.length; ++i) {\n            _transports[_types[i]].reset(init);\n        }\n    };\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/zetapush-cometd/lib/TransportRegistry.js\n ** module id = 15\n ** module chunks = 0\n **/","var Transport = require('./Transport');\nvar RequestTransport = require('./RequestTransport');\n\nmodule.exports = function LongPollingTransport() {\n    var _super = new RequestTransport();\n    var _self = Transport.derive(_super);\n    // By default, support cross domain\n    var _supportsCrossDomain = true;\n\n    _self.accept = function(version, crossDomain, url) {\n        return _supportsCrossDomain || !crossDomain;\n    };\n\n    _self.xhrSend = function(packet) {\n        throw 'Abstract';\n    };\n\n    _self.transportSend = function(envelope, request) {\n        this._debug('Transport', this.getType(), 'sending request', request.id, 'envelope', envelope);\n\n        var self = this;\n        try {\n            var sameStack = true;\n            request.xhr = this.xhrSend({\n                transport: this,\n                url: envelope.url,\n                sync: envelope.sync,\n                headers: this.getConfiguration().requestHeaders,\n                body: JSON.stringify(envelope.messages),\n                onSuccess: function(response) {\n                    self._debug('Transport', self.getType(), 'received response', response);\n                    var success = false;\n                    try {\n                        var received = self.convertToMessages(response);\n                        if (received.length === 0) {\n                            _supportsCrossDomain = false;\n                            self.transportFailure(envelope, request, {\n                                httpCode: 204\n                            });\n                        } else {\n                            success = true;\n                            self.transportSuccess(envelope, request, received);\n                        }\n                    } catch (x) {\n                        self._debug(x);\n                        if (!success) {\n                            _supportsCrossDomain = false;\n                            var failure = {\n                                exception: x\n                            };\n                            failure.httpCode = self.xhrStatus(request.xhr);\n                            self.transportFailure(envelope, request, failure);\n                        }\n                    }\n                },\n                onError: function(reason, exception) {\n                    self._debug('Transport', self.getType(), 'received error', reason, exception);\n                    _supportsCrossDomain = false;\n                    var failure = {\n                        reason: reason,\n                        exception: exception\n                    };\n                    failure.httpCode = self.xhrStatus(request.xhr);\n                    if (sameStack) {\n                        // Keep the semantic of calling response callbacks asynchronously after the request\n                        self.setTimeout(function() {\n                            self.transportFailure(envelope, request, failure);\n                        }, 0);\n                    } else {\n                        self.transportFailure(envelope, request, failure);\n                    }\n                }\n            });\n            sameStack = false;\n        } catch (x) {\n            _supportsCrossDomain = false;\n            // Keep the semantic of calling response callbacks asynchronously after the request\n            self.setTimeout(function() {\n                self.transportFailure(envelope, request, {\n                    exception: x\n                });\n            }, 0);\n        }\n    };\n\n    _self.reset = function(init) {\n        _super.reset(init);\n        _supportsCrossDomain = true;\n    };\n\n    return _self;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/zetapush-cometd/lib/LongPollingTransport.js\n ** module id = 16\n ** module chunks = 0\n **/","var Transport = require('./Transport')\nvar Utils = require('./Utils')\n\nmodule.exports = function WebSocketTransport() {\n    var _super = new Transport();\n    var _self = Transport.derive(_super);\n    var _cometd;\n    // By default WebSocket is supported\n    var _webSocketSupported = true;\n    // Whether we were able to establish a WebSocket connection\n    var _webSocketConnected = false;\n    var _stickyReconnect = true;\n    // The context contains the envelopes that have been sent\n    // and the timeouts for the messages that have been sent.\n    var _context = null;\n    var _connecting = null;\n    var _connected = false;\n    var _successCallback = null;\n\n    _self.reset = function(init) {\n        _super.reset(init);\n        _webSocketSupported = true;\n        if (init) {\n            _webSocketConnected = false;\n        }\n        _stickyReconnect = true;\n        _context = null;\n        _connecting = null;\n        _connected = false;\n    };\n\n    function _forceClose(context, event) {\n        if (context) {\n            this.webSocketClose(context, event.code, event.reason);\n            // Force immediate failure of pending messages to trigger reconnect.\n            // This is needed because the server may not reply to our close()\n            // and therefore the onclose function is never called.\n            this.onClose(context, event);\n        }\n    }\n\n    function _sameContext(context) {\n        return context === _connecting || context === _context;\n    }\n\n    function _storeEnvelope(context, envelope, metaConnect) {\n        var messageIds = [];\n        for (var i = 0; i < envelope.messages.length; ++i) {\n            var message = envelope.messages[i];\n            if (message.id) {\n                messageIds.push(message.id);\n            }\n        }\n        context.envelopes[messageIds.join(',')] = [envelope, metaConnect];\n        this._debug('Transport', this.getType(), 'stored envelope, envelopes', context.envelopes);\n    }\n\n    function _websocketConnect(context) {\n        // We may have multiple attempts to open a WebSocket\n        // connection, for example a /meta/connect request that\n        // may take time, along with a user-triggered publish.\n        // Early return if we are already connecting.\n        if (_connecting) {\n            return;\n        }\n\n        // Mangle the URL, changing the scheme from 'http' to 'ws'.\n        var url = _cometd.getURL().replace(/^http/, 'ws');\n        this._debug('Transport', this.getType(), 'connecting to URL', url);\n\n        try {\n            var protocol = _cometd.getConfiguration().protocol;\n            context.webSocket = protocol ? new WebSocket(url, protocol) : new WebSocket(url);\n            _connecting = context;\n        } catch (x) {\n            _webSocketSupported = false;\n            this._debug('Exception while creating WebSocket object', x);\n            throw x;\n        }\n\n        // By default use sticky reconnects.\n        _stickyReconnect = _cometd.getConfiguration().stickyReconnect !== false;\n\n        var self = this;\n        var connectTimeout = _cometd.getConfiguration().connectTimeout;\n        if (connectTimeout > 0) {\n            context.connectTimer = self.setTimeout(function() {\n                _cometd._debug('Transport', self.getType(), 'timed out while connecting to URL', url, ':', connectTimeout, 'ms');\n                // The connection was not opened, close anyway.\n                _forceClose.call(self, context, {code: 1000, reason: 'Connect Timeout'});\n            }, connectTimeout);\n        }\n\n        var onopen = function() {\n            _cometd._debug('WebSocket onopen', context);\n            if (context.connectTimer) {\n                self.clearTimeout(context.connectTimer);\n            }\n\n            if (_sameContext(context)) {\n                _connecting = null;\n                _context = context;\n                _webSocketConnected = true;\n                self.onOpen(context);\n            } else {\n                // We have a valid connection already, close this one.\n                _cometd._warn('Closing extra WebSocket connection', this, 'active connection', _context);\n                _forceClose.call(self, context, {code: 1000, reason: 'Extra Connection'});\n            }\n        };\n\n        // This callback is invoked when the server sends the close frame.\n        // The close frame for a connection may arrive *after* another\n        // connection has been opened, so we must make sure that actions\n        // are performed only if it's the same connection.\n        var onclose = function(event) {\n            event = event || {code: 1000};\n            _cometd._debug('WebSocket onclose', context, event, 'connecting', _connecting, 'current', _context);\n\n            if (context.connectTimer) {\n                self.clearTimeout(context.connectTimer);\n            }\n\n            self.onClose(context, event);\n        };\n\n        var onmessage = function(wsMessage) {\n            _cometd._debug('WebSocket onmessage', wsMessage, context);\n            self.onMessage(context, wsMessage);\n        };\n\n        context.webSocket.onopen = onopen;\n        context.webSocket.onclose = onclose;\n        context.webSocket.onerror = function() {\n            // Clients should call onclose(), but if they do not we do it here for safety.\n            onclose({code: 1000, reason: 'Error'});\n        };\n        context.webSocket.onmessage = onmessage;\n\n        this._debug('Transport', this.getType(), 'configured callbacks on', context);\n    }\n\n    function _webSocketSend(context, envelope, metaConnect) {\n        var json = JSON.stringify(envelope.messages);\n        context.webSocket.send(json);\n        this._debug('Transport', this.getType(), 'sent', envelope, 'metaConnect =', metaConnect);\n\n        // Manage the timeout waiting for the response.\n        var maxDelay = this.getConfiguration().maxNetworkDelay;\n        var delay = maxDelay;\n        if (metaConnect) {\n            delay += this.getAdvice().timeout;\n            _connected = true;\n        }\n\n        var self = this;\n        var messageIds = [];\n        for (var i = 0; i < envelope.messages.length; ++i) {\n            (function() {\n                var message = envelope.messages[i];\n                if (message.id) {\n                    messageIds.push(message.id);\n                    context.timeouts[message.id] = self.setTimeout(function() {\n                        _cometd._debug('Transport', self.getType(), 'timing out message', message.id, 'after', delay, 'on', context);\n                        _forceClose.call(self, context, {code: 1000, reason: 'Message Timeout'});\n                    }, delay);\n                }\n            })();\n        }\n\n        this._debug('Transport', this.getType(), 'waiting at most', delay, 'ms for messages', messageIds, 'maxNetworkDelay', maxDelay, ', timeouts:', context.timeouts);\n    }\n\n    _self._notifySuccess = function(fn, messages) {\n        fn.call(this, messages);\n    };\n\n    _self._notifyFailure = function(fn, context, messages, failure) {\n        fn.call(this, context, messages, failure);\n    };\n\n    function _send(context, envelope, metaConnect) {\n        try {\n            if (context === null) {\n                context = _connecting || {\n                        envelopes: {},\n                        timeouts: {}\n                    };\n                _storeEnvelope.call(this, context, envelope, metaConnect);\n                _websocketConnect.call(this, context);\n            } else {\n                _storeEnvelope.call(this, context, envelope, metaConnect);\n                _webSocketSend.call(this, context, envelope, metaConnect);\n            }\n        } catch (x) {\n            // Keep the semantic of calling response callbacks asynchronously after the request.\n            var self = this;\n            self.setTimeout(function() {\n                _forceClose.call(self, context, {\n                    code: 1000,\n                    reason: 'Exception',\n                    exception: x\n                });\n            }, 0);\n        }\n    }\n\n    _self.onOpen = function(context) {\n        var envelopes = context.envelopes;\n        this._debug('Transport', this.getType(), 'opened', context, 'pending messages', envelopes);\n        for (var key in envelopes) {\n            if (envelopes.hasOwnProperty(key)) {\n                var element = envelopes[key];\n                var envelope = element[0];\n                var metaConnect = element[1];\n                // Store the success callback, which is independent from the envelope,\n                // so that it can be used to notify arrival of messages.\n                _successCallback = envelope.onSuccess;\n                _webSocketSend.call(this, context, envelope, metaConnect);\n            }\n        }\n    };\n\n    _self.onMessage = function(context, wsMessage) {\n        this._debug('Transport', this.getType(), 'received websocket message', wsMessage, context);\n\n        var close = false;\n        var messages = this.convertToMessages(wsMessage.data);\n        var messageIds = [];\n        for (var i = 0; i < messages.length; ++i) {\n            var message = messages[i];\n\n            // Detect if the message is a response to a request we made.\n            // If it's a meta message, for sure it's a response; otherwise it's\n            // a publish message and publish responses don't have the data field.\n            if (/^\\/meta\\//.test(message.channel) || message.data === undefined) {\n                if (message.id) {\n                    messageIds.push(message.id);\n\n                    var timeout = context.timeouts[message.id];\n                    if (timeout) {\n                        this.clearTimeout(timeout);\n                        delete context.timeouts[message.id];\n                        this._debug('Transport', this.getType(), 'removed timeout for message', message.id, ', timeouts', context.timeouts);\n                    }\n                }\n            }\n\n            if ('/meta/connect' === message.channel) {\n                _connected = false;\n            }\n            if ('/meta/disconnect' === message.channel && !_connected) {\n                close = true;\n            }\n        }\n\n        // Remove the envelope corresponding to the messages.\n        var removed = false;\n        var envelopes = context.envelopes;\n        for (var j = 0; j < messageIds.length; ++j) {\n            var id = messageIds[j];\n            for (var key in envelopes) {\n                if (envelopes.hasOwnProperty(key)) {\n                    var ids = key.split(',');\n                    var index = Utils.inArray(id, ids);\n                    if (index >= 0) {\n                        removed = true;\n                        ids.splice(index, 1);\n                        var envelope = envelopes[key][0];\n                        var metaConnect = envelopes[key][1];\n                        delete envelopes[key];\n                        if (ids.length > 0) {\n                            envelopes[ids.join(',')] = [envelope, metaConnect];\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n        if (removed) {\n            this._debug('Transport', this.getType(), 'removed envelope, envelopes', envelopes);\n        }\n\n        this._notifySuccess(_successCallback, messages);\n\n        if (close) {\n            this.webSocketClose(context, 1000, 'Disconnect');\n        }\n    };\n\n    _self.onClose = function(context, event) {\n        this._debug('Transport', this.getType(), 'closed', context, event);\n\n        if (_sameContext(context)) {\n            // Remember if we were able to connect.\n            // This close event could be due to server shutdown,\n            // and if it restarts we want to try websocket again.\n            _webSocketSupported = _stickyReconnect && _webSocketConnected;\n            _connecting = null;\n            _context = null;\n        }\n\n        var timeouts = context.timeouts;\n        context.timeouts = {};\n        for (var id in timeouts) {\n            if (timeouts.hasOwnProperty(id)) {\n                this.clearTimeout(timeouts[id]);\n            }\n        }\n\n        var envelopes = context.envelopes;\n        context.envelopes = {};\n        for (var key in envelopes) {\n            if (envelopes.hasOwnProperty(key)) {\n                var envelope = envelopes[key][0];\n                var metaConnect = envelopes[key][1];\n                if (metaConnect) {\n                    _connected = false;\n                }\n                var failure = {\n                    websocketCode: event.code,\n                    reason: event.reason\n                };\n                if (event.exception) {\n                    failure.exception = event.exception;\n                }\n                this._notifyFailure(envelope.onFailure, context, envelope.messages, failure);\n            }\n        }\n    };\n\n    _self.registered = function(type, cometd) {\n        _super.registered(type, cometd);\n        _cometd = cometd;\n    };\n\n    _self.accept = function(version, crossDomain, url) {\n        this._debug('Transport', this.getType(), 'accept, supported:', _webSocketSupported);\n        // Using !! to return a boolean (and not the WebSocket object).\n        return _webSocketSupported && !('undefined' === typeof WebSocket) && _cometd.websocketEnabled !== false;\n    };\n\n    _self.send = function(envelope, metaConnect) {\n        this._debug('Transport', this.getType(), 'sending', envelope, 'metaConnect =', metaConnect);\n        _send.call(this, _context, envelope, metaConnect);\n    };\n\n    _self.webSocketClose = function(context, code, reason) {\n        try {\n            if (context.webSocket) {\n                context.webSocket.close(code, reason);\n            }\n        } catch (x) {\n            this._debug(x);\n        }\n    };\n\n    _self.abort = function() {\n        _super.abort();\n        _forceClose.call(this, _context, {code: 1000, reason: 'Abort'});\n        this.reset(true);\n    };\n\n    return _self;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/zetapush-cometd/lib/WebSocketTransport.js\n ** module id = 17\n ** module chunks = 0\n **/","import { Transport, LongPollingTransport } from 'zetapush-cometd'\n\n/**\n * Implements LongPollingTransport using borwser fetch() API\n * @access private\n * @return {FetchLongPollingTransport}\n */\nexport function FetchLongPollingTransport() {\n  const _super = new LongPollingTransport()\n  const that = Transport.derive(_super)\n\n  /**\n   * Implements transport via fetch() API\n   * @param {Object} packet\n   */\n  that.xhrSend = function (packet) {\n    fetch(packet.url, {\n      method: 'post',\n      body: packet.body,\n      headers: Object.assign(packet.headers, {\n        'Content-Type': 'application/json;charset=UTF-8'\n      })\n    })\n    .then((response) => {\n      return response.json()\n    })\n    .then(packet.onSuccess)\n    .catch(packet.onError)\n  }\n\n  return that\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/connection/cometd.js\n **/","import { Client } from './client'\nimport { Authentication } from './authentication/handshake'\nimport { LocalStorageTokenPersistenceStrategy } from './utils/token-persistence'\n\n/**\n * WeakClient config object.\n * @typedef {Object} WeakClientConfig\n * @property {string} apiUrl - Api Url\n * @property {string} deploymentId - Authentication deployment id\n * @property {string} sandboxId - Sandbox id\n * @property {boolean} forceHttps - Force end to end HTTPS connection\n * @property {string} resource - Client resource id\n */\n\n/**\n * @access public\n * @extends {Client}\n * @example\n * // Create a new WeakClient\n * const client = new ZetaPush.WeakClient({\n *   sandboxId: '<YOUR-SANDBOX-ID>'\n * })\n */\nexport class WeakClient extends Client {\n  /**\n   * Create a new ZetaPush smart client\n   * @param {WeakClientConfig} config\n   */\n  constructor({ apiUrl, sandboxId, deploymentId, forceHttps, resource }) {\n    const credentials = () => {\n      const token = this.getToken()\n      const handshake = Authentication.weak({\n        deploymentId,\n        token\n      })\n      return handshake\n    }\n    /**\n     * Call Client constructor with specific parameters\n     */\n    super({ apiUrl , sandboxId, forceHttps, credentials, resource })\n    const onSuccessfulHandshake = ({ publicToken, userId, token }) => {\n      if (token) {\n        this.strategy.set({ token })\n      }\n    }\n    this.addConnectionStatusListener({ onSuccessfulHandshake })\n    /**\n     * @access private\n     * @type {TokenPersistenceStrategy}\n     */\n    this.strategy = new LocalStorageTokenPersistenceStrategy()\n  }\n  /**\n   * @return {string} The stored token\n   */\n  getToken() {\n    return this.strategy.get()\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/weak-client.js\n **/","/**\n * @type {string}\n */\nconst ZETAPUSH_TOKEN_KEY = 'zetapush.token'\n\n/**\n * Provide abstraction for token persistence\n * @access protected\n */\nexport class AbstractTokenPersistenceStrategy {\n  /**\n   * @param {{key: string}} parameters\n   */\n  constructor({ key = ZETAPUSH_TOKEN_KEY } = {}) {\n    /**\n     * @access private\n     * @type {string}\n     */\n    this.key = key\n  }\n  /**\n   * @abstract\n   * @return {string} The stored token\n   */\n  get() {}\n  /**\n   * @abstract\n   * @param {{token: string}} parameters\n   */\n  set({ token }) {}\n}\n\n/**\n * @access protected\n * @extends {AbstractTokenPersistenceStrategy}\n */\nexport class LocalStorageTokenPersistenceStrategy extends AbstractTokenPersistenceStrategy {\n  /**\n   * @override\n   * @return {string} The stored token\n   */\n  get() {\n    return localStorage.getItem(this.key)\n  }\n  /**\n   * @override\n   * @param {{token: string}} parameters\n   */\n  set({ token }) {\n    localStorage.setItem(this.key, token)\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/utils/token-persistence.js\n **/"],"sourceRoot":""}